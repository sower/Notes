import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.1f7d9302.js";const F=JSON.parse('{"title":"Programming paradigm","description":"","frontmatter":{"title":"Programming paradigm","created_at":"2022-02-01T05:44:50.000Z","updated_at":"2022-02-01T06:50:40.000Z","word_count":1918},"headers":[],"relativePath":"Universal/Programming paradigm.md","filePath":"Universal/Programming paradigm.md"}'),e={name:"Universal/Programming paradigm.md"},p=l(`<p><strong>程序设计（programming）</strong> <br> 给出解决特定问题程序的过程，软件开发过程中的重要步骤。 <br> 程序设计往往以某种程序设计语言为工具，给出这种语言下的程序。 <br> 程序设计过程一般包括分析、设计、编码、测试、调试等不同阶段。</p><p><strong>编程范式（Programming paradigm）</strong>：一类典型的编程风格，是指从事软件工程的一类典型的风格</p><h2 id="——-声明式编程-declarative-programming-——" tabindex="-1">—— 声明式编程（Declarative programming）—— <a class="header-anchor" href="#——-声明式编程-declarative-programming-——" aria-label="Permalink to &quot;—— 声明式编程（Declarative programming）——&quot;">​</a></h2><p>描述目标的性质，让电脑明白目标，而非流程。声明式编程不用告诉电脑问题领域，从而避免随之而来的副作用。</p><h2 id="函数式编程-functional-programming" tabindex="-1">函数式编程（Functional programming） <a class="header-anchor" href="#函数式编程-functional-programming" aria-label="Permalink to &quot;函数式编程（Functional programming）&quot;">​</a></h2><p><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese" target="_blank" rel="noreferrer">JavaScript 函数式编程指南</a></p><p>理论基础——<a href="https://zh.wikipedia.org/wiki/%CE%9B%E6%BC%94%E7%AE%97" target="_blank" rel="noreferrer">λ演算</a>（lambda calculus）</p><ul><li>函数是<a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch2.html" target="_blank" rel="noreferrer">第一等公民</a>：既可以作为其它函数的参数（输入值），也可以从函数中返回（输入值），被修改或者被分配给一个变量</li><li>将计算过程分解成可复用的函数</li><li>只有<a href="https://zh.wikipedia.org/wiki/%E7%BA%AF%E5%87%BD%E6%95%B0" target="_blank" rel="noreferrer">纯的</a>、没有<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E5%89%AF%E4%BD%9C%E7%94%A8" target="_blank" rel="noreferrer">副作用</a>的函数，才是合格的函数。</li></ul><p><strong>子程序</strong>（subroutine, subprogram, callable unit）：一个大型程序中的某部分代码，由一个或多个语句块组成。它负责完成某项特定任务，而且相较于其他代码，具备相对的独立性。</p><ul><li><p><strong>函数（function）：一种子程序，利用函数名称，可以接收回传值</strong></p></li><li><p><strong>过程（procedure）：一种子程序，它能够接受不同的引数，来运行某些特别的动作</strong></p></li><li><p><strong>方法（method）：在</strong><a href="https://zh.wikipedia.org/wiki/%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88" target="_blank" rel="noreferrer">面向对象编程</a><strong>语言中，</strong><a href="https://zh.wikipedia.org/wiki/%E7%B1%BB_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)" target="_blank" rel="noreferrer">类</a><strong>或</strong><a href="https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)" target="_blank" rel="noreferrer">对象</a><strong>中的子程序</strong></p><br></li></ul><h3 id="函数的合成-compose" tabindex="-1">函数的合成（compose） <a class="header-anchor" href="#函数的合成-compose" aria-label="Permalink to &quot;函数的合成（compose）&quot;">​</a></h3><p>数据在由纯函数组成的管道中传递，可以用简单如交换律、结合律、分配律</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">compose</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">compose</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">h</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等同于</span></span>
<span class="line"><span style="color:#61AFEF;">compose</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">compose</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">g</span><span style="color:#ABB2BF;">), </span><span style="color:#E06C75;">h</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等同于</span></span>
<span class="line"><span style="color:#61AFEF;">compose</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">g</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">h</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017022209.png#id=Ck0Mc&amp;originHeight=313&amp;originWidth=800&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h3 id="柯里化-curry" tabindex="-1">柯里化(curry) <a class="header-anchor" href="#柯里化-curry" aria-label="Permalink to &quot;柯里化(curry)&quot;">​</a></h3><p>把一个多参数的函数，转化为单参数函数</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 柯里化之前</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 柯里化之后</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">addX</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">addX</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="函子-functor" tabindex="-1">函子（Functor） <a class="header-anchor" href="#函子-functor" aria-label="Permalink to &quot;函子（Functor）&quot;">​</a></h3><p>标志：容器具有map方法。该方法将容器里面的每一个值，映射到另一个容器。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Functor</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) { </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">; </span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">f</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Functor</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 一般约定，函子有一个of方法，用来生成新的容器。</span></span>
<span class="line"><span style="color:#E5C07B;">Functor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">val</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Functor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">Functor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">two</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">two</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Functor(4)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>Maybe 函子</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Maybe</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Functor</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">f</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Maybe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Maybe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);    </span><span style="color:#7F848E;font-style:italic;">// 设置了空值检查</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Either 函子 <br> 内部有两个值：左值（Left）和右值（Right）。右值是正常情况下使用的值，左值是右值不存在时使用的默认值。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Either</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Functor</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">left</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">right</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">left</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">left</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">right</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">right</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">f</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">right</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">Either</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">left</span><span style="color:#ABB2BF;">, </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">right</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">Either</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">left</span><span style="color:#ABB2BF;">), </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">right</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">Either</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">left</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">right</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Either</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">left</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">right</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">addOne</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#E5C07B;">Either</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">addOne</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Either(5, 7);</span></span>
<span class="line"><span style="color:#E5C07B;">Either</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">addOne</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Either(2, null);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>条件运算if...else <br> 代替try...catch，使用左值表示错误</p><p>ap 函子 <br> 部署了applicative（应用）方法的函子</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Ap</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Functor</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">ap</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">F</span><span style="color:#ABB2BF;">) {                                     </span><span style="color:#7F848E;font-style:italic;">// 参数是另一个函子</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Ap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">val</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">F</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>对于那些多参数的函数，可以从多个容器之中取值，实现函子的链式操作</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E5C07B;">Ap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">add</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">ap</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Maybe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)).</span><span style="color:#61AFEF;">ap</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Maybe</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">));    </span><span style="color:#7F848E;font-style:italic;">// Ap.of(add(2)).ap(Maybe.of(3));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Ap(5)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Monad 函子 <br> 总是返回一个单层的函子</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Monad</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Functor</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">val</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">flatMap</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">f</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">f</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="——-指令式编程-imperative-programming-——" tabindex="-1">—— 指令式编程（Imperative programming）—— <a class="header-anchor" href="#——-指令式编程-imperative-programming-——" aria-label="Permalink to &quot;—— 指令式编程（Imperative programming）——&quot;">​</a></h2><p>一种描述电脑所需作出的行为的<a href="https://zh.wikipedia.org/wiki/%E7%B7%A8%E7%A8%8B%E5%85%B8%E7%AF%84" target="_blank" rel="noreferrer">编程典范</a>。几乎所有电脑的<a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E9%AB%94" target="_blank" rel="noreferrer">硬件</a>工作都是指令式的</p><h2 id="" tabindex="-1"><br> <a class="header-anchor" href="#" aria-label="Permalink to &quot;&lt;br /&gt;&quot;">​</a></h2><h2 id="结构化编程-structured-programming" tabindex="-1">结构化编程（Structured programming） <a class="header-anchor" href="#结构化编程-structured-programming" aria-label="Permalink to &quot;结构化编程（Structured programming）&quot;">​</a></h2><p>采用<a href="https://zh.wikipedia.org/wiki/%E5%AD%90%E7%A8%8B%E5%BA%8F" target="_blank" rel="noreferrer">子程序</a>、<a href="https://zh.wikipedia.org/wiki/%E5%9D%97%E7%BB%93%E6%9E%84" target="_blank" rel="noreferrer">块结构</a>、<a href="https://zh.wikipedia.org/wiki/For%E8%BF%B4%E5%9C%88" target="_blank" rel="noreferrer">for循环</a>以及<a href="https://zh.wikipedia.org/wiki/While%E8%BF%B4%E5%9C%88" target="_blank" rel="noreferrer">while循环</a>等结构，来取代传统的 <a href="https://zh.wikipedia.org/wiki/Goto" target="_blank" rel="noreferrer">goto</a>。希望借此来改善<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F" target="_blank" rel="noreferrer">计算机程序</a>的明晰性、质量以及开发时间，并且避免写出<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E6%9D%A1%E5%BC%8F%E4%BB%A3%E7%A0%81" target="_blank" rel="noreferrer">面条式代码</a>。</p><p>循序（sequence） <br> 选择（selection） <br> 重复（repetition）</p><h3 id="-1" tabindex="-1"><br> <a class="header-anchor" href="#-1" aria-label="Permalink to &quot;&lt;br /&gt;&quot;">​</a></h3><h3 id="过程式编程-procedural-programming" tabindex="-1">过程式编程（Procedural programming） <a class="header-anchor" href="#过程式编程-procedural-programming" aria-label="Permalink to &quot;过程式编程（Procedural programming）&quot;">​</a></h3><p>派生自<a href="https://zh.wikipedia.org/wiki/%E7%B5%90%E6%A7%8B%E5%8C%96%E7%B7%A8%E7%A8%8B" target="_blank" rel="noreferrer">结构化编程</a>（Structured programming），主要采取<a href="https://zh.wikipedia.org/w/index.php?title=%E7%A8%8B%E5%BA%8F%E5%91%BC%E5%8F%AB&amp;action=edit&amp;redlink=1" target="_blank" rel="noreferrer">程序调用</a>（procedure call）或函数调用（function call）的方式来进行<a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6" target="_blank" rel="noreferrer">流程控制</a>。流程则由包涵一系列运算步骤的过程（Procedures），例程（routines），<a href="https://zh.wikipedia.org/wiki/%E5%AD%90%E7%A8%8B%E5%BA%8F" target="_blank" rel="noreferrer">子程序</a>（subroutines）, 方法（methods），或函数（functions）来控制。在程序运行的任何一个时间点，都可以调用某个特定的程序。任何一个特定的程序，也能被任意一个程序或是它自己本身调用。</p><h3 id="面向对象编程-object-oriented-programming" tabindex="-1">面向对象编程（Object-oriented programming） <br> <br> <a class="header-anchor" href="#面向对象编程-object-oriented-programming" aria-label="Permalink to &quot;面向对象编程（Object-oriented programming）  &lt;br /&gt;    &lt;br /&gt;&quot;">​</a></h3><p><a href="https://zh.wikipedia.org/wiki/%E5%B0%81%E8%A3%9D_(%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88)" target="_blank" rel="noreferrer">封装性</a>（Encapsulation）：隐藏了某一方法的具体运行步骤，取而代之的是通过消息传递机制发送消息给它。 <br> <a href="https://zh.wikipedia.org/wiki/%E7%BB%A7%E6%89%BF%E6%80%A7" target="_blank" rel="noreferrer">继承性</a>（Inheritance） <br> <a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E5%9E%8B_(%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88)" target="_blank" rel="noreferrer">多态</a>（Polymorphism）：由继承而产生的相关的不同的类，其对象对同一消息会做出不同的响应 <br> <a href="https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E5%8C%96_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)" target="_blank" rel="noreferrer">抽象</a>（Abstraction）是简化复杂的现实问题的途径，它可以为具体问题找到最恰当的类定义，并且可以在最恰当的继承级别解释问题。</p><h2 id="——-元编程-metaprogramming-——" tabindex="-1">—— 元编程（Metaprogramming）—— <a class="header-anchor" href="#——-元编程-metaprogramming-——" aria-label="Permalink to &quot;—— 元编程（Metaprogramming）——&quot;">​</a></h2><p>指某类<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F" target="_blank" rel="noreferrer">计算机程序</a>的编写，这类计算机程序编写或者操纵其它程序（或者自身）作为它们的资料，或者在<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E8%A1%8C%E6%97%B6" target="_blank" rel="noreferrer">运行时</a>完成部分本应在<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91%E6%97%B6" target="_blank" rel="noreferrer">编译时</a>完成的工作。</p><h2 id="模板超编程-template-metaprogramming" tabindex="-1">模板超编程（Template metaprogramming） <a class="header-anchor" href="#模板超编程-template-metaprogramming" aria-label="Permalink to &quot;模板超编程（Template metaprogramming）&quot;">​</a></h2><p>一种<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E7%B7%A8%E7%A8%8B" target="_blank" rel="noreferrer">超编程</a>技术，<a href="https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8" target="_blank" rel="noreferrer">编译器</a>使用<a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E6%9D%BF" target="_blank" rel="noreferrer">模板</a>产生暂时性的<a href="https://zh.wikipedia.org/wiki/%E6%BA%90%E7%A2%BC" target="_blank" rel="noreferrer">源码</a>，然后再和剩下的源码混合并<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91" target="_blank" rel="noreferrer">编译</a>。这些模板的输出包括<a href="https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E6%99%82%E6%9C%9F" target="_blank" rel="noreferrer">编译时期</a><a href="https://zh.wikipedia.org/wiki/%E5%B8%B8%E6%95%B8" target="_blank" rel="noreferrer">常量</a>、<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B" target="_blank" rel="noreferrer">数据结构</a>以及完整的函数。</p><h2 id="反射-reflection" tabindex="-1">反射（reflection） <a class="header-anchor" href="#反射-reflection" aria-label="Permalink to &quot;反射（reflection）&quot;">​</a></h2><p><a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F" target="_blank" rel="noreferrer">计算机程序</a>在<a href="https://zh.wikipedia.org/wiki/%E8%BF%90%E8%A1%8C%E6%97%B6" target="_blank" rel="noreferrer">运行时</a>（runtime）可以访问、检测和修改它本身状态或行为的一种能力。</p><p>内省（type introspection，自省）机制仅指程序在运行时对自身信息（称为<a href="https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE" target="_blank" rel="noreferrer">元数据</a>）的检测；</p><hr><h3 id="代码类型" tabindex="-1">代码类型 <a class="header-anchor" href="#代码类型" aria-label="Permalink to &quot;代码类型&quot;">​</a></h3><ul><li><strong>源代码（Source code）：一系列</strong><a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E7%B1%BB" target="_blank" rel="noreferrer">人类</a><strong>可读的</strong><a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80" target="_blank" rel="noreferrer">计算机语言</a><a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4" target="_blank" rel="noreferrer">指令</a><strong>。</strong></li><li><a href="https://zh.wikipedia.org/wiki/%E7%9B%AE%E6%A0%87%E4%BB%A3%E7%A0%81" target="_blank" rel="noreferrer">目标代码</a>（<strong>object code</strong>）：<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91%E5%99%A8" target="_blank" rel="noreferrer">编译器</a>或<a href="https://zh.wikipedia.org/wiki/%E6%B1%87%E7%BC%96%E5%99%A8" target="_blank" rel="noreferrer">汇编器</a>处理<a href="https://zh.wikipedia.org/wiki/%E6%BA%90%E4%BB%A3%E7%A0%81" target="_blank" rel="noreferrer">源代码</a>后所生成的代码，一般由<a href="https://zh.wikipedia.org/wiki/%E6%9C%BA%E5%99%A8%E4%BB%A3%E7%A0%81" target="_blank" rel="noreferrer">机器代码</a>或接近于机器语言的代码组成。</li><li><a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E7%A0%81" target="_blank" rel="noreferrer">字节码</a>（Bytecode）：已经经过<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91" target="_blank" rel="noreferrer">编译</a>，但与特定<a href="https://zh.wikipedia.org/wiki/%E6%A9%9F%E5%99%A8%E7%A2%BC" target="_blank" rel="noreferrer">机器代码</a>无关，需要<a href="https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E5%99%A8" target="_blank" rel="noreferrer">解释器</a>转译后才能成为<a href="https://zh.wikipedia.org/wiki/%E6%A9%9F%E5%99%A8%E7%A2%BC" target="_blank" rel="noreferrer">机器代码</a>的<a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%96%93%E8%AA%9E%E8%A8%80" target="_blank" rel="noreferrer">中间代码</a>。</li><li><a href="https://zh.wikipedia.org/wiki/%E6%9C%BA%E5%99%A8%E4%BB%A3%E7%A0%81" target="_blank" rel="noreferrer">机器代码</a>（machine code）：电脑的<a href="https://zh.wikipedia.org/wiki/CPU" target="_blank" rel="noreferrer">CPU</a>可直接解读的资料。</li><li><a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E7%A8%8B%E5%BA%8F" target="_blank" rel="noreferrer">微程序</a>（microcode）：<strong>微码</strong>，是在<a href="https://zh.wikipedia.org/wiki/CISC" target="_blank" rel="noreferrer">CISC</a>结构下，运行一些功能复杂的<a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4" target="_blank" rel="noreferrer">指令</a>时，所分解一系列相对简单的指令。</li></ul><h3 id="编译策略" tabindex="-1">编译策略 <a class="header-anchor" href="#编译策略" aria-label="Permalink to &quot;编译策略&quot;">​</a></h3><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%8D%B3%E6%99%82%E7%B7%A8%E8%AD%AF" target="_blank" rel="noreferrer">即时编译</a>（JIT） <ul><li><a href="https://zh.wikipedia.org/w/index.php?title=%E8%B7%9F%E8%B8%AA%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91&amp;action=edit&amp;redlink=1" target="_blank" rel="noreferrer">跟踪即时编译</a></li></ul></li><li><a href="https://zh.wikipedia.org/w/index.php?title=%E6%8F%90%E5%89%8D%E7%BC%96%E8%AF%91&amp;action=edit&amp;redlink=1" target="_blank" rel="noreferrer">提前编译</a>（AOT）</li><li><a href="https://zh.wikipedia.org/wiki/%E6%BA%90%E4%BB%A3%E7%A0%81%E8%87%B3%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E5%99%A8" target="_blank" rel="noreferrer">源代码至源代码编译器</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E9%87%8D%E7%BC%96%E8%AF%91" target="_blank" rel="noreferrer">动态重编译</a></li></ul><h3 id="求值策略-evaluation-strategy" tabindex="-1">求值策略（Evaluation strategy） <a class="header-anchor" href="#求值策略-evaluation-strategy" aria-label="Permalink to &quot;求值策略（Evaluation strategy）&quot;">​</a></h3><p>确定<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80" target="_blank" rel="noreferrer">编程语言</a>中<a href="https://zh.wikipedia.org/wiki/%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noreferrer">表达式</a>的求值的一组（通常确定性的）规则。</p><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%8F%8A%E6%97%A9%E6%B1%82%E5%80%BC" target="_blank" rel="noreferrer">及早求值</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC" target="_blank" rel="noreferrer">惰性求值</a></li><li><a href="https://zh.wikipedia.org/wiki/%E9%83%A8%E5%88%86%E6%B1%82%E5%80%BC" target="_blank" rel="noreferrer">部分求值</a></li><li><a href="https://zh.wikipedia.org/wiki/%E8%BF%9C%E7%A8%8B%E6%B1%82%E5%80%BC" target="_blank" rel="noreferrer">远程求值</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%9F%AD%E8%B7%AF%E6%B1%82%E5%80%BC" target="_blank" rel="noreferrer">短路求值</a></li></ul>`,57),r=[p];function o(t,B,i,c,y,A){return a(),n("div",null,r)}const h=s(e,[["render",o]]);export{F as __pageData,h as default};
