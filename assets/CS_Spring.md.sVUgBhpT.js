import{_ as l,o as p,c as e,R as a,k as s,a as n}from"./chunks/framework.RQC-XgH8.js";const o="/Notes/assets/1648975394639-fa7ee6c7-1b21-40cf-abc1-095e7034bd7e.9nqaredJ.gif",t="/Notes/assets/1647764006879-b912438c-b849-4985-bd53-8179202216c1.MbHuj_AO.png",g=JSON.parse('{"title":"Spring","description":"","frontmatter":{"title":"Spring","created_at":"2022-04-03T08:42:16.000Z","updated_at":"2023-10-21T13:14:23.000Z","word_count":11503},"headers":[],"relativePath":"CS/Spring.md","filePath":"CS/Spring.md"}'),r={name:"CS/Spring.md"},c=a('<h2 id="——-spring-——" tabindex="-1">—— <a href="https://spring.io/" target="_blank" rel="noreferrer">Spring</a> —— <a class="header-anchor" href="#——-spring-——" aria-label="Permalink to &quot;—— [Spring](https://spring.io/) ——&quot;">​</a></h2><h2 id="core" tabindex="-1"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core" target="_blank" rel="noreferrer">Core</a> <a class="header-anchor" href="#core" aria-label="Permalink to &quot;[Core](https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core)&quot;">​</a></h2><p>IoC（Inverse of Control，控制反转）：依赖注入（Dependency Injection，DI）。Spring 通过 IoC 容器来管理所有 Java 对象的实例化和初始化，控制对象与对象之间的依赖关系 <br> AOP（Aspect Oriented Programming，面向切面编程）：横向抽取机制，取代了传统纵向继承体系的重复性代码，其应用主要体现在事务处理、日志管理、权限控制、异常处理等方面。 <br> <img src="'+o+`" alt=""></p><h3 id="ioc" tabindex="-1">IoC <a class="header-anchor" href="#ioc" aria-label="Permalink to &quot;IoC&quot;">​</a></h3><ul><li>设值注入（<strong>Setter</strong> Injection）：IoC 容器首先会调用默认的构造方法（无参构造方法）实例化 Bean（Java 对象），然后通过 Java 的反射机制调用这个 Bean 的 setXxx() 方法，将属性值注入到 Bean 中</li><li>构造注入（<strong>Constructor</strong> Injection）：通过 Bean 的带参构造函数，以实现 Bean 的属性注入</li></ul><p><strong>Spring 容器</strong> <br> <strong>BeanFactory 接口</strong> <br> 负责配置、创建、管理 Bean。在初始化容器时，并未实例化 Bean，直到第一次访问某个 Bean 时才实例化目标 Bean</p><p>常用方法</p><ul><li><code>boolean containsBean(String name)</code>：判断 Spring 容器是否包含 id 为 name 的 Bean 实例</li><li><code>T getBean(Class&lt;T&gt; requiredType)</code>：获取 Spring 容器中属于 requiredType 类型的、唯一的 Bean 实例</li><li><code>Object getBean(String name)</code>：返回容器 id 为 name 的 Bean 实例</li><li><code>T getBean(String name, Class requiredType)</code>：返回容器中 id 为 name，并且类型为 requiredType 的 Bean</li><li><code>Class&lt;?&gt; getType(String name)</code>：返回容器中 id 为 name 的 Bean 实例的类型</li></ul><p><strong>ApplicationContext 接口</strong> <br> Spring 上下文，BeanFactory 的子接口。在初始化应用上下文时就实例化所有单实例的 Bean <br> 常用实现类：FileSystemXmlApplicationContext、ClassPathXmlApplicationContext 和 AnnotationConfigApplicationContext</p><p><strong>后置处理器</strong></p><ul><li>BeanPostProcessor Bean 后置处理器 <ul><li>postProcessBeforeInitialization（初始化前执行）</li><li>postProcessAfterInitialization（初始化后执行）</li></ul></li><li>BeanFactoryPostProcessor 容器后置处理器</li></ul><p><strong>XML装配Bean</strong> <br> 配置 applicationContext.xml</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;?</span><span style="color:#E06C75;">xml</span><span style="color:#D19A66;"> version</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;1.0&quot;</span><span style="color:#D19A66;"> encoding</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">?&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">beans</span><span style="color:#D19A66;"> xmlns</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#D19A66;">    xmlns:xsi</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#D19A66;">    xsi:schemaLocation</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.springframework.org/schema/beans</span></span>
<span class="line"><span style="color:#98C379;">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;mailService&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;com.MailService&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!-- 使用设值注入方式装配实例 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;userService&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;com.UserService&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;username&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;mailService&quot;</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;mailService&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">bean</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!-- 使用构造注入装配实例 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;user&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;com.UserService&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">constructor-arg</span><span style="color:#D19A66;"> index</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;0&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;snow&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">constructor-arg</span><span style="color:#D19A66;"> index</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;1&quot;</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;mailService&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">bean</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">  // 短命名空间注入  需要在头文件中加入约束文件</span></span>
<span class="line"><span style="color:#ABB2BF;">  // p 命名空间</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;userService&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;com.UserService&quot;</span><span style="color:#D19A66;"> p:username</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#D19A66;">        p:mailService-ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;mailService&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">bean</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  // c 命名空间</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;user&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;com.UserService&quot;</span><span style="color:#D19A66;"> c:username</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;snow&quot;</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#D19A66;">        c:mailService-ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;mailService&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">bean</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">  // 注入集合</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;javaCollection&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;com.JavaCollection&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!--数组类型--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;users&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">ref</span><span style="color:#D19A66;"> bean</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;userService&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">ref</span><span style="color:#D19A66;"> bean</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;user&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">ref</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">null</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!--List 类型--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;list&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">list</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&gt;张三&lt;/</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&gt;李四&lt;/</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&gt;王五&lt;/</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&gt;赵六&lt;/</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E06C75;">list</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!--Map 类型--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;maps&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">map</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">entry</span><span style="color:#D19A66;"> key</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;JAVA&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;java&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">entry</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">entry</span><span style="color:#D19A66;"> key</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;PHP&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;php&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">entry</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E06C75;">map</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!--Set 类型--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;sets&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">set</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&gt;MySQL&lt;/</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&gt;Redis&lt;/</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E06C75;">set</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">bean</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">  // 注入内部Bean</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;employee&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;net.Employee&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;empNo&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;001&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;empName&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;小王&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;dept&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      &lt;!--内部 Bean--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;net.Dept&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;deptNo&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;004&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;deptName&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;技术部&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;/</span><span style="color:#E06C75;">bean</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">bean</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">  // Bean继承  子Bean可以继承父 Bean 的配置数据，也可重写或添加属于自己的配置信息</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  &lt;!--父Bean--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;parentBean&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;xxx.ParentBean&quot;</span><span style="color:#ABB2BF;"> &gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;age&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;45&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">      &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;sex&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;m&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">bean</span><span style="color:#ABB2BF;">&gt; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  &lt;!--子Bean--&gt;</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;childBean&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;xxx.ChildBean&quot;</span><span style="color:#D19A66;"> parent</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;parentBean&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">bean</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">beans</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br></div></div><p>使用</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> App</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> { </span></span>
<span class="line"><span style="color:#E5C07B;">        ApplicationContext</span><span style="color:#E06C75;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ClassPathXmlApplicationContext</span><span style="color:#ABB2BF;">( </span><span style="color:#98C379;">&quot;applicationContext.xml&quot;</span><span style="color:#ABB2BF;">); </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                                // = new FileSystemXmlApplicationContext(String configLocation);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 获取Bean</span></span>
<span class="line"><span style="color:#E5C07B;">        UserService</span><span style="color:#E06C75;"> userService</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getBean</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;UserService&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">UserService</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 正常调用</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">userService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUserName</span><span style="color:#ABB2BF;">());  </span><span style="color:#7F848E;font-style:italic;">// root</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        //手动销毁 Bean</span></span>
<span class="line"><span style="color:#E5C07B;">        context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><table><thead><tr><th>属性名称</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>Bean 的唯一标识符，Spring IoC 容器对 Bean 的配置和管理通过该属性完成。</td></tr><tr><td>name</td><td>Bean 的名称，通过 name 属性为同一个 Bean 同时指定多个名称，每个名称之间用逗号或分号隔开。Spring 容器可以通过 name 属性配置和管理容器中的 Bean。</td></tr><tr><td>class</td><td>Bean 的具体实现类，它必须是一个完整的类名，即类的全限定名。</td></tr><tr><td>scope</td><td>Bean 的作用域，属性值可以为 singleton（单例）、prototype（原型）、request、session 和 global Session。默认值是 singleton。</td></tr><tr><td>constructor-arg</td><td><code>&lt;bean&gt;</code> 元素的子元素，通过该元素，将构造参数传入，以实现 Bean 的实例化。该元素的 index 属性指定构造参数的序号（从 0 开始），type 属性指定构造参数的类型。</td></tr><tr><td>property</td><td><code>&lt;bean&gt;</code>元素的子元素，用于调用 Bean 实例中的 setter 方法对属性进行赋值，从而完成属性的注入。该元素的 name 属性用于指定 Bean 实例中相应的属性名。</td></tr><tr><td>ref</td><td><code>&lt;property&gt;</code>和 <code>&lt;constructor-arg&gt;</code> 等元素的子元索，用于指定对某个 Bean 实例的引用，即 <code>&lt;bean&gt;</code> 元素中的 id 或 name 属性。</td></tr><tr><td>value</td><td><code>&lt;property&gt;</code> 和 <code>&lt;constractor-arg&gt;</code> 等元素的子元素，用于直接指定一个常量值。</td></tr><tr><td>list</td><td>用于封装 List 或数组类型的属性注入。</td></tr><tr><td>set</td><td>用于封装 Set 类型的属性注入。</td></tr><tr><td>map</td><td>用于封装 Map 类型的属性注入。</td></tr><tr><td>entry</td><td><code>&lt;map&gt;</code> 元素的子元素，用于设置一个键值对。其 key 属性指定字符串类型的键值，ref 或 value 子元素指定其值。</td></tr><tr><td>init-method</td><td>容器加载 Bean 时调用该方法，类似于 Servlet 中的 init() 方法</td></tr><tr><td>destroy-method</td><td>容器删除 Bean 时调用该方法，类似于 Servlet 中的 destroy() 方法。该方法只在 scope=singleton 时有效</td></tr><tr><td>lazy-init</td><td>懒加载，值为 true，容器在首次请求时才会创建 Bean 实例；值为 false，容器在启动时创建 Bean 实例。该方法只在 scope=singleton 时有效</td></tr></tbody></table><p><strong>自动装配 autowired</strong></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>byName</td><td>根据 Property 的 name 自动装配，如果一个 Bean 的 name 和另一个 Bean 中的 Property 的 name 相同，则自动装配这个 Bean 到 Property 中。</td></tr><tr><td>byType</td><td>根据 Property 的数据类型（Type）自动装配，如果一个 Bean 的数据类型兼容另一个 Bean 中 Property 的数据类型，则自动装配。</td></tr><tr><td>constructor</td><td>根据构造方法的参数的数据类型，进行 byType 模式的自动装配。</td></tr><tr><td>autodetect</td><td>如果发现默认的构造方法，则用 constructor 模式，否则用 byType 模式。</td></tr><tr><td>no</td><td>默认情况下，不使用自动装配，Bean 依赖必须通过 ref 元素定义。</td></tr></tbody></table><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">···</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;mailService&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;com.MailService&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">		&lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;userService&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;com.UserService&quot;</span><span style="color:#D19A66;"> autowire</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;byName&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;username&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;root&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        &lt;!-- property name=&quot;mailService&quot; ref=&quot;mailService&quot; / --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">bean</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">···</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>Annotation装配Bean</strong> <br> 定义 Bean</p><ul><li>@Component：描述 Spring 中的 Bean，表示一个组件（Bean），可以作用在任何层次</li><li>@Repository：用于将数据访问层（DAO层）的类标识为 Spring 中的 Bean，功能同 _@_Component</li><li>@Service：通常作用在业务层</li><li>@Controller：通常作用在控制层</li></ul><p>依赖注入</p><ul><li><p>@Autowired：对 Bean 的属性变量、属性的 Set 方法及构造函数进行标注，配合对应的注解处理器完成 Bean 的自动配置工作。默认按照 Bean 的<strong>类型</strong>进行装配。</p></li><li><p>@Resource：与 @Autowired 一样，默认按照 Bean <strong>实例名</strong>称进行装配。</p></li><li><p>@Qualifier：与 _@_Autowired 注解配合使用，会将默认的按 Bean 类型装配修改为按 Bean 的实例名称装配，Bean 的实例名称由 _@_Qualifier 注解的参数指定。</p></li><li><p>@Primary：@Autowired 自动装配找到多个匹配的 Bean时，首选该 Bean</p></li><li><p>@Scope(value = &quot;prototype&quot;, proxyMode = ScopedProxyMode.DEFAULT) ：指定 Bean 的作用域、代理方式</p></li><li><p>@Order(1)：指定 Bean 的加载顺序，值越小优先级越高</p></li><li><p>标注方法</p><ul><li>@PostConstruct：指定 Bean 的初始化方法</li><li>@PreDestroy：指定 Bean 销毁之前的方法</li></ul></li><li><p>@Value：属性占位符需要放到 \${key:defaultValue} 之中，SpEL 表达式要放到 #{ ... } 之中</p></li></ul><p>配置 applicationContext.xml</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;?</span><span style="color:#E06C75;">xml</span><span style="color:#D19A66;"> version</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;1.0&quot;</span><span style="color:#D19A66;"> encoding</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">?&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">beans</span><span style="color:#D19A66;"> xmlns</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#D19A66;">    xmlns:xsi</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#D19A66;">    xmlns:context</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.springframework.org/schema/context&quot;</span></span>
<span class="line"><span style="color:#D19A66;">    xsi:schemaLocation</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.springframework.org/schema/beans</span></span>
<span class="line"><span style="color:#98C379;">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span>
<span class="line"><span style="color:#98C379;">        http://www.springframework.org/schema/context</span></span>
<span class="line"><span style="color:#98C379;">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">context:annotation-config</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  &lt;!--使用context命名空间，通知spring扫描指定目录，进行注解的解析--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">context:component-scan</span><span style="color:#D19A66;"> base-package</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;包名&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">beans</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Component</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UserService</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Autowired</span></span>
<span class="line"><span style="color:#E5C07B;">    MailService</span><span style="color:#E06C75;"> mailService</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Component</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MailService</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Autowired</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">required</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> false</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#E5C07B;">    ZoneId</span><span style="color:#E06C75;"> zoneId </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ZoneId</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">systemDefault</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">PostConstruct</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> init</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Init mail service with zoneId = &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">zoneId</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">PreDestroy</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> shutdown</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Shutdown mail service&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 启动容器</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Configuration</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AppConfig</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 创建第三方Bean</span></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Bean</span></span>
<span class="line"><span style="color:#E5C07B;">        ZoneId</span><span style="color:#61AFEF;"> createZoneId</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E5C07B;"> ZoneId</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Z&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#E5C07B;">        ApplicationContext</span><span style="color:#E06C75;"> context</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> AnnotationConfigApplicationContext</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">AppConfig</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        UserService</span><span style="color:#E06C75;"> userService</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> context</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getBean</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">UserService</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        User</span><span style="color:#E06C75;"> user</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> userService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">login</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;bob@example.com&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;password&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h3 id="aop" tabindex="-1">AOP <a class="header-anchor" href="#aop" aria-label="Permalink to &quot;AOP&quot;">​</a></h3><p>Aspect Oriented Programming，面向切面编程</p><p>作用范围：spring托管的bean的非static方法</p><p><strong>术语</strong></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Joinpoint（连接点）</td><td>指那些被拦截到的点，在 Spring 中，可以被动态代理拦截目标类的方法。</td></tr><tr><td>Pointcut（切入点）</td><td>指要对哪些 Joinpoint 进行拦截，即被拦截的连接点。</td></tr><tr><td>Advice（通知）</td><td>指拦截到 Joinpoint 之后要做的事情，即对切入点增强的内容。</td></tr><tr><td>Target（目标）</td><td>指代理的目标对象。</td></tr><tr><td>Weaving（植入）</td><td>指把增强代码应用到目标上，生成代理对象的过程。</td></tr><tr><td>Proxy（代理）</td><td>指生成的代理对象。</td></tr><tr><td>Aspect（切面）</td><td>切入点和通知的结合。</td></tr></tbody></table><p><strong>Spring AOP 通知类型</strong></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>org.springframework.aop.MethodBeforeAdvice （前置通知）</td><td>在方法之前自动执行的通知称为前置通知，可用于权限管理等功能。</td></tr><tr><td>org.springframework.aop.AfterReturningAdvice （后置通知）</td><td>在方法之后自动执行的通知称为后置通知，可用于关闭流、上传文件、删除临时文件等功能。</td></tr><tr><td>org.aopalliance.intercept.MethodInterceptor （环绕通知）</td><td>在方法前后自动执行的通知称为环绕通知，可用于日志、事务管理等功能。</td></tr><tr><td>org.springframework.aop.ThrowsAdvice （异常通知）</td><td>在方法抛出异常时自动执行的通知称为异常通知，可用于处理异常记录日志等功能。</td></tr><tr><td>org.springframework.aop.IntroductionInterceptor （引介通知）</td><td>在目标类中添加一些新的方法和属性，可用于修改旧版本程序（增强类）。</td></tr></tbody></table><p><strong>XML的声明式</strong></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//切面类</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyAspect</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 前置通知</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> myBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JoinPoint</span><span style="color:#E06C75;font-style:italic;"> joinPoint</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;前置通知，目标：&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">joinPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getTarget</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;方法名称:&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">joinPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSignature</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 后置通知</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> myAfterReturning</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JoinPoint</span><span style="color:#E06C75;font-style:italic;"> joinPoint</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">print</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;后置通知，方法名称：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> joinPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSignature</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 环绕通知</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> Object</span><span style="color:#61AFEF;"> myAround</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ProceedingJoinPoint</span><span style="color:#E06C75;font-style:italic;"> proceedingJoinPoint</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throws</span><span style="color:#E5C07B;"> Throwable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;环绕开始&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 开始</span></span>
<span class="line"><span style="color:#E5C07B;">        Object</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> proceedingJoinPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">proceed</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 执行当前目标方法</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;环绕结束&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 结束</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> obj;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 异常通知</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> myAfterThrowing</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JoinPoint</span><span style="color:#E06C75;font-style:italic;"> joinPoint</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Throwable</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;异常通知&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#98C379;"> &quot;出错了&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 最终通知</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> myAfter</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;最终通知&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>applicationContext.xml 配置</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!--目标类 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;customerDao&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;com.mengma.dao.CustomerDaoImpl&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!--切面类 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myAspect&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;com.mengma.aspectj.xml.MyAspect&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">bean</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!--AOP 编程 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">aop:config</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">aop:aspect</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myAspect&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            &lt;!-- 配置切入点，通知最后增强哪些方法 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">aop:pointcut</span><span style="color:#D19A66;"> expression</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;execution ( * com.mengma.dao.*.* (..))&quot;</span></span>
<span class="line"><span style="color:#D19A66;">                id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myPointCut&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            &lt;!--前置通知，关联通知 Advice和切入点PointCut --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">aop:before</span><span style="color:#D19A66;"> method</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myBefore&quot;</span><span style="color:#D19A66;"> pointeut-ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myPointCut&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            &lt;!--后置通知，在方法返回之后执行，就可以获得返回值returning 属性 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">aop:after-returning</span><span style="color:#D19A66;"> method</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myAfterReturning&quot;</span></span>
<span class="line"><span style="color:#D19A66;">                pointcut-ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myPointCut&quot;</span><span style="color:#D19A66;"> returning</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;returnVal&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            &lt;!--环绕通知 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">aop:around</span><span style="color:#D19A66;"> method</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myAround&quot;</span><span style="color:#D19A66;"> pointcut-ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myPointCut&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            &lt;!--抛出通知：用于处理程序发生异常，可以接收当前方法产生的异常 --&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            &lt;!-- *注意：如果程序没有异常，则不会执行增强 --&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            &lt;!-- * throwing属性：用于设置通知第二个参数的名称，类型Throwable --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">aop:after-throwing</span><span style="color:#D19A66;"> method</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myAfterThrowing&quot;</span></span>
<span class="line"><span style="color:#D19A66;">                pointcut-ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myPointCut&quot;</span><span style="color:#D19A66;"> throwing</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;e&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            &lt;!--最终通知：无论程序发生任何事情，都将执行 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">aop:after</span><span style="color:#D19A66;"> method</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myAfter&quot;</span><span style="color:#D19A66;"> pointcut-ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;myPointCut&quot;</span><span style="color:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E06C75;">aop:aspect</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">aop:config</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p><strong>Annotation 的声明式</strong></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>_@_Aspect</td><td>用于定义一个切面。</td></tr><tr><td>_@_Before</td><td>用于定义前置通知，相当于 BeforeAdvice。</td></tr><tr><td>_@_AfterReturning</td><td>用于定义后置通知，相当于 AfterReturningAdvice。</td></tr><tr><td>_@_Around</td><td>用于定义环绕通知，相当于MethodInterceptor。</td></tr><tr><td>_@_AfterThrowing</td><td>用于定义抛出通知，相当于ThrowAdvice。</td></tr><tr><td>_@_After</td><td>用于定义最终final通知，不管是否异常，该通知都会执行。</td></tr><tr><td>_@_DeclareParents</td><td>用于定义引介通知，相当于IntroductionInterceptor</td></tr></tbody></table><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Component</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Aspect</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Slf4j</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> WebLogAspect</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Pointcut</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;execution( public * me.demo.controller..*.*(..))&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> requestLog</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Pointcut</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;@annotation(me.demo.aspect.LogInOutParam)&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> methodLog</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 前置通知</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Before</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;requestLog() || methodLog()&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doBefore</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JoinPoint</span><span style="color:#E06C75;font-style:italic;"> joinPoint</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    ServletRequestAttributes</span><span style="color:#E06C75;"> requestAttributes</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (ServletRequestAttributes) </span><span style="color:#E5C07B;">RequestContextHolder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRequestAttributes</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    Optional</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ofNullable</span><span style="color:#ABB2BF;">(requestAttributes).</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">(ServletRequestAttributes</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">getRequest)</span></span>
<span class="line"><span style="color:#ABB2BF;">        .</span><span style="color:#61AFEF;">ifPresent</span><span style="color:#ABB2BF;">(request </span><span style="color:#C678DD;">-&gt;</span><span style="color:#E5C07B;"> log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Received {} - {} request {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRemoteAddr</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E5C07B;">            request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMethod</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E5C07B;">            ServletUriComponentsBuilder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fromRequest</span><span style="color:#ABB2BF;">(request).</span><span style="color:#61AFEF;">encode</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#E5C07B;">    MethodSignature</span><span style="color:#E06C75;"> signature</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (MethodSignature) </span><span style="color:#E5C07B;">joinPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSignature</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Ready into {} . {} - ARGS: (name) {} - (value) {}&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">        signature</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeclaringTypeName</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">signature</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E5C07B;">        signature</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getParameterNames</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">Arrays</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">joinPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getArgs</span><span style="color:#ABB2BF;">()));</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 环绕通知</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Around</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;requestLog() || methodLog()&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#E5C07B;"> Object</span><span style="color:#61AFEF;"> doAround</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ProceedingJoinPoint</span><span style="color:#E06C75;font-style:italic;"> proceedingJoinPoint</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">      throws</span><span style="color:#E5C07B;"> Throwable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    StopWatch</span><span style="color:#E06C75;"> stopWatch</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> StopWatch</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">proceedingJoinPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toShortString</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#E5C07B;">    stopWatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    Object</span><span style="color:#E06C75;"> obj</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">      // 执行当前目标方法</span></span>
<span class="line"><span style="color:#ABB2BF;">      obj </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> proceedingJoinPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">proceed</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">      return</span><span style="color:#ABB2BF;"> obj;</span></span>
<span class="line"><span style="color:#ABB2BF;">    } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">      stopWatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">stop</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">      String</span><span style="color:#E06C75;"> methodName</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> proceedingJoinPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSignature</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">      log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{} - {} complete, it takes {}ms&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">proceedingJoinPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getTarget</span><span style="color:#ABB2BF;">(), methodName</span></span>
<span class="line"><span style="color:#ABB2BF;">          , </span><span style="color:#E5C07B;">stopWatch</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLastTaskTimeMillis</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">      if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Objects</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nonNull</span><span style="color:#ABB2BF;">(obj)) {</span></span>
<span class="line"><span style="color:#E5C07B;">        log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{} return result -&gt; {}&quot;</span><span style="color:#ABB2BF;">, methodName,</span></span>
<span class="line"><span style="color:#E5C07B;">            StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">abbreviate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toJSONString</span><span style="color:#ABB2BF;">(obj), </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  // 异常通知</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">AfterThrowing</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;requestLog()&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#D19A66;"> throwing</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;e&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> doAfterThrowing</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">JoinPoint</span><span style="color:#E06C75;font-style:italic;"> joinPoint</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Throwable</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{} - {} execute error {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">joinPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getTarget</span><span style="color:#ABB2BF;">(),</span></span>
<span class="line"><span style="color:#E5C07B;">        joinPoint</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getSignature</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">        , </span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><p>applicationContext.xml 配置</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!--扫描含com.mengma包下的所有注解--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">context:component-scan</span><span style="color:#D19A66;"> base-package</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;com.mengma&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">&lt;!-- 使切面开启自动代理 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">aop:aspectj-autoproxy</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">aop:aspectj-autoproxy</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>AspectJ 切入点语法</p><ul><li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#aop-pointcuts-designators" target="_blank" rel="noreferrer">Supported Pointcut Designators</a></li><li>Spring AOP 常用的切入点指示符（pointcut designators，PCD） <ul><li>可用通配符： <ul><li><code>*</code> 代表一个任意类型的参数</li><li><code>..</code> 代表零个或多个任意类型的参数，在表示类时，必须和 * 联合使用，而在表示入参时则单独使用</li><li><code>+</code> 表示按类型匹配指定类的所有类，必须跟在类名后面，如 com.smart.Car+ 继承或扩展指定类的所有类，同时还包括指定类本身</li><li>运算符：<code>&amp;&amp;、||、！</code></li></ul></li><li>execution：用于匹配执行方法的连接点 <ul><li><code>execution(&lt;修饰符&gt;? &lt;返回值类型&gt; &lt;所属类&gt;?&lt;方法名&gt;(形参类型列表) &lt;声明抛出的异常&gt;?)</code>，? 表示该部分可省略</li><li>如 <code>execution(* com.example.app.service.impl.*.*(..))</code>，匹配 com.example.app.service.impl 包中任意类的任意方法的执行</li></ul></li><li>within：用于限定匹配特定域下的连接点。当使用 Spring AOP 的时候，只能匹配方法执行的连接点。 <ul><li>如 within(com.example.app.service..*)，匹配在 com.example.app.service 包或其子包中的任意连接点</li></ul></li><li>this：用于限定 AOP 代理对象必须是指定类型的实例，匹配该对象的所有连接点 <ul><li>this(com.example.app.service.AccountService)，匹配实现了 com.example.app.service.AccountService 接口的 AOP 代理的所有连接点</li></ul></li><li>target：用于限定目标对象必须是指定类型的实例，匹配该对象的所有连接点 <ul><li>target(com.example.app.service.AccountService)，匹配实现了 com.example.app.service.AccountService 接口的目标对象的所有连接点</li></ul></li><li>args：args(参数类型列表)，用于对连接点的参数类型进行限制，要求参数是指定类型的实例</li><li>bean：bean(Bean的id或name)，用于限定只匹配指定 Bean 实例内方法的连接点，支持使用 * 通配符，注意：bean 切入点表达式是 Spring AOP 额外支持的</li><li>@annotation：用于匹配标注有指定注解的方法</li><li>@within：用于匹配标注有指定注解的类内所有方法 <ul><li>如 @within(feign.Client+)，切入 feign.Client 的实现类</li></ul></li><li>@target：用于匹配标注有指定注解的类的目标对象内所有方法</li><li>@args：用于匹配入参标注有指定注解的方法</li></ul></li></ul><h3 id="spel" tabindex="-1">SpEL <a class="header-anchor" href="#spel" aria-label="Permalink to &quot;SpEL&quot;">​</a></h3><p>Spring Expression Language 是一种功能强大的表达式语言，支持运行时查询和操作对象图 。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 构造解析器</span></span>
<span class="line"><span style="color:#E5C07B;">ExpressionParser</span><span style="color:#E06C75;"> parser </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SpelExpressionParser</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 解析器解析字符串表达式</span></span>
<span class="line"><span style="color:#E5C07B;">Expression</span><span style="color:#E06C75;"> exp </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> parser</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseExpression</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;new String(&#39;hello spel&#39;).toUpperCase()&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取表达式的值</span></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> message </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> exp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getValue</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(message);</span><span style="color:#7F848E;font-style:italic;"> // HELLO SPEL</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="application-event" tabindex="-1">Application Event <a class="header-anchor" href="#application-event" aria-label="Permalink to &quot;Application Event&quot;">​</a></h3><p><strong>内置事件</strong></p><ul><li>上下文更新事件（ContextRefreshedEvent）：在调用ConfigurableApplicationContext 接口中的refresh()方法时被触发。</li><li>上下文开始事件（ContextStartedEvent）：当容器调用ConfigurableApplicationContext的Start()方法开始/重新开始容器时触发该事件。</li><li>上下文停止事件（ContextStoppedEvent）：当容器调用ConfigurableApplicationContext的Stop()方法停止容器时触发该事件。</li><li>上下文关闭事件（ContextClosedEvent）：当ApplicationContext被关闭时触发该事件。容器被关闭时，其管理的所有单例Bean都被销毁。</li><li>请求处理事件（RequestHandledEvent）：在Web应用中，当一个http请求（request）结束触发该事件。</li></ul><p>1 自定义事件，继承 ApplicationEvent</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Data</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> DemoEvent</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> ApplicationEvent</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> msg</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> DemoEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;font-style:italic;"> source</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> msg</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        super</span><span style="color:#ABB2BF;">(source);</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">msg</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> msg;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>2 定义监听器，实现 ApplicationListener 或者通过 @EventListener 注解到方法上</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Component</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> DemoListener</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //使用onApplicationEvent方法对消息进行接受处理</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">EventListener</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> onApplicationEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">DemoEvent</span><span style="color:#E06C75;font-style:italic;"> event</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> msg</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> event</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMsg</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;DemoListener获取到了监听消息:&quot;</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;">msg);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>3 定义发布者，通过 ApplicationEventPublisher</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Component</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> DemoPublisher</span><span style="color:#ABB2BF;">  {</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Autowired</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> ApplicationContext</span><span style="color:#E06C75;"> applicationContext</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> publish</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> msg</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        applicationContext</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">publishEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> DemoEvent</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">,msg));</span><span style="color:#7F848E;font-style:italic;">//使用ApplicationContext对象的publishEvent发布事件</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>启动后运行</p><ul><li>ApplicationRunner</li><li>CommandLineRunner</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">FunctionalInterface</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> interface</span><span style="color:#E5C07B;"> CommandLineRunner</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">... </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="utils" tabindex="-1">Utils <a class="header-anchor" href="#utils" aria-label="Permalink to &quot;Utils&quot;">​</a></h3><h4 id="stringutils" tabindex="-1">StringUtils <a class="header-anchor" href="#stringutils" aria-label="Permalink to &quot;StringUtils&quot;">​</a></h4><ul><li>boolean <s>isEmpty</s>(Object str)：字符串是否为空或者空字符串</li><li>boolean hasLength(CharSequence str)：字符串是否为空，或者长度为 0</li><li>boolean hasText(String str)：字符串是否有内容（不为空，且不全为空格）</li><li>boolean containsWhitespace(String str)：字符串是否包含空格</li><li>String trimWhitespace(String str)：去掉字符串前后的空格</li><li>String trimAllWhitespace(String str)：去掉字符串中所有的空格</li><li>String unqualify(String qualifiedName)：得到以 . 分割的最后一个值（可以用来获取类名或者文件后缀）</li><li>String unqualify(String qualifiedName, char separator)：得到以给定字符分割的最后一个值（可以用来获取文件名 File.separatorChar）</li><li>String getFilename(String path)：获取文件名</li><li>String getFilenameExtension(String path)：获取文件后缀名</li><li>String capitalize(String str)：首字母大写</li><li>String uncapitalize(String str)：取消首字母大写</li><li>boolean substringMatch(CharSequence str, int index, CharSequence substring)：判断从指定索引开始，是否匹配子字符串</li><li>int countOccurrencesOf(String str, String sub)：判断子字符串在字符串中出现的次数</li><li>String replace(String inString, String oldPattern, String newPattern)：在字符串中使用子字符串替换</li><li>String delete(String inString, String pattern)：删除所有匹配的子字符串</li><li>String deleteAny(String inString, String charsToDelete)：删除子字符串中任意出现的字符</li><li>String quote(String str)：在字符串前后增加单引号，比较适合在日志时候使用</li><li>String[] addStringToArray(String[] array, String str)：把一个字符串添加到一个字符串数组中</li><li>String[] concatenateStringArrays(String[] array1, String[]array2)：连接两个字符串数组</li><li>String[] mergeStringArrays(String[] array1, String[] array2)：连接两个字符串数组，去掉重复元素</li><li>String[] sortStringArray(String[] array)：字符串数组排序</li><li>String[] tokenizeToStringArray(String str, String delimiters)：对每一个元素执行 trim 操作，并去掉空字符串</li><li>String[] delimitedListToStringArray(String str, String delimiter)：分割字符串，以 delimiter 作为整体分隔符</li><li><code>Set&lt;String&gt; commaDelimitedListToSet(String str)</code>：使用逗号分割字符串，并放到 set 中去重</li><li><code>String collectionToDelimitedString(Collection&lt;?&gt; coll, String delim, String prefix, String suffix)</code>：将集合中的每个元素使用前缀、后缀、分隔符连接</li><li><code>String collectionToDelimitedString(Collection&lt;?&gt; coll, String delim)</code>：将集合中的每个元素使用指定字符串连接</li><li>String arrayToDelimitedString(Object[] arr, String delim)：数组使用指定字符串连接</li><li>String[] split(String toSplit, String delimiter)：在第一次出现分隔符时分割</li><li>Properties splitArrayElementsIntoProperties(String[] array, String delimiter)：把字符串数组中的每一个字符串按照给定的分隔符装配到一个 Properties 中</li></ul><h4 id="numberutils" tabindex="-1">NumberUtils <a class="header-anchor" href="#numberutils" aria-label="Permalink to &quot;NumberUtils&quot;">​</a></h4><ul><li><code>T convertNumberToTargetClass(Number number, Class&lt;T&gt; targetClass)</code></li><li><code>T parseNumber(String text, Class&lt;T&gt; targetClass)</code></li><li><code>T parseNumber(String text, Class&lt;T&gt; targetClass, NumberFormat numberFormat)</code></li></ul><h4 id="objectutils" tabindex="-1">ObjectUtils <a class="header-anchor" href="#objectutils" aria-label="Permalink to &quot;ObjectUtils&quot;">​</a></h4><ul><li>boolean isCheckedException(Throwable ex)</li><li>boolean isArray(Object obj)</li><li>boolean isEmpty(Object[] array)</li><li>boolean isEmpty(Object obj)</li><li>Object unwrapOptional(Object obj)</li><li>boolean containsElement(Object[] array, Object element)</li><li>A[] addObjectToArray(A[] array, O obj)</li><li>boolean nullSafeEquals(Object o1, Object o2)</li><li>int nullSafeHashCode(Object obj)</li><li>String nullSafeToString(Object obj)</li><li>String nullSafeToString(Object[] array)</li></ul><p>CollectionUtils</p><h4 id="filecopyutils" tabindex="-1">FileCopyUtils <a class="header-anchor" href="#filecopyutils" aria-label="Permalink to &quot;FileCopyUtils&quot;">​</a></h4><p>用于文件和流复制，所有复制方法都使用 4096 字节的块大小，并在完成后关闭所有受影响的流</p><ul><li>int copy(File in, File out)</li><li>void copy(byte[] in, File out)</li><li>int copy(InputStream in, OutputStream out)</li><li>void copy(byte[] in, OutputStream out)</li><li>int copy(Reader in, Writer out)</li><li>void copy(String in, Writer out)</li><li>String copyToString(Reader in)</li><li>byte[] copyToByteArray(File in)</li><li>byte[] copyToByteArray(InputStream in)</li></ul><h4 id="filesystemutils" tabindex="-1">FileSystemUtils <a class="header-anchor" href="#filesystemutils" aria-label="Permalink to &quot;FileSystemUtils&quot;">​</a></h4><ul><li>boolean deleteRecursively(File root)：递归删除</li><li>boolean deleteRecursively(Path root)</li><li>void copyRecursively(File src, File dest)：递归复制</li><li>void copyRecursively(Path src, Path dest)</li></ul><h4 id="beanutils" tabindex="-1">BeanUtils <a class="header-anchor" href="#beanutils" aria-label="Permalink to &quot;BeanUtils&quot;">​</a></h4><ul><li>void copyProperties(Object source, Object target, String... ignoreProperties)：浅克隆（原理：反射）</li><li><code>boolean isSimpleProperty(Class&lt;?&gt; clazz)</code>：判断给定的类型是否表示简单属性：八大基本类型/包装类型、字符串或其它 CharSequence、Number、Enum、Date、URI、URL、Locale、Class 或对应的数组</li><li><code>T instantiateClass(Class&lt;T&gt; clazz)</code>：使用无参构造器实例化</li><li><code>Method findDeclaredMethod(Class&lt;?&gt; clazz, String methodName, Class&lt;?&gt;... paramTypes)</code></li></ul><h4 id="beancopier" tabindex="-1">BeanCopier <a class="header-anchor" href="#beancopier" aria-label="Permalink to &quot;BeanCopier&quot;">​</a></h4><ul><li>类方法：BeanCopier create(Class source, Class target, boolean useConverter)：通过操作字节码生成用于两个 JavaBean 间进行复制的类</li><li>抽象方法：void copy(Object var1, Object var2, Converter var3)：对两个 Bean 间属性名和类型完全相同的变量进行拷贝</li></ul><h4 id="beanmap" tabindex="-1">BeanMap <a class="header-anchor" href="#beanmap" aria-label="Permalink to &quot;BeanMap&quot;">​</a></h4><ul><li>类方法：BeanMap create(Object bean)：JavaBean 对象转 Map 对象，BeanMap.create(bean).keySet();</li><li>实例方法：void putAll(Map t)：Map 对象转 JavaBean 对象，BeanMap.create(bean).putAll(map);</li></ul><h4 id="aoputils" tabindex="-1">AopUtils <a class="header-anchor" href="#aoputils" aria-label="Permalink to &quot;AopUtils&quot;">​</a></h4><ul><li>boolean isAopProxy(Object object)：是否是代理对象</li><li>boolean isJdkDynamicProxy(Object object)：判断是否是 JDK 代理对象</li><li>boolean isCglibProxy(Object object)：判断是否是 cglib 代理对象</li><li><code>Class&lt;?&gt; getTargetClass(Object candidate)</code>：获取对象的真实类型</li><li><code>Method getMostSpecificMethod(Method method, Class&lt;?&gt; targetClass)</code>：获取真实对象上对应的方法</li><li>Object invokeJoinpointUsingReflection(Object target, Method method, Object[] args)：在 target 对象上，使用 args 参数列表执行 method</li></ul><p>ClassUtils <br> AnnotationUtils <br> ResolvableType</p><h4 id="reflectionutils" tabindex="-1">ReflectionUtils <a class="header-anchor" href="#reflectionutils" aria-label="Permalink to &quot;ReflectionUtils&quot;">​</a></h4><ul><li><code>Field findField(Class&lt;?&gt; clazz, String name)</code></li><li><code>Field findField(Class&lt;?&gt; clazz, String name, Class&lt;?&gt; type)</code></li><li>Object getField(Field field, Object target)</li><li>void setField(Field field, Object target, Object value)</li><li><code>Method findMethod(Class&lt;?&gt; clazz, String name)</code></li><li><code>Method findMethod(Class&lt;?&gt; clazz, String name, Class&lt;?&gt;... paramTypes)</code></li><li>Object invokeMethod(Method method, Object target)</li><li>Object invokeMethod(Method method, Object target, Object... args)</li></ul><h4 id="stopwatch" tabindex="-1">StopWatch <a class="header-anchor" href="#stopwatch" aria-label="Permalink to &quot;StopWatch&quot;">​</a></h4><p>秒表，可用于查看多个任务的耗时情况，线程不安全</p><ul><li>构造器：StopWatch(String id)</li><li>void start(String taskName)</li><li>void stop()</li><li>long getTotalTimeMillis()、long getLastTaskTimeMillis()</li><li>TaskInfo[] getTaskInfo()、TaskInfo getLastTaskInfo()</li><li>String shortSummary()</li></ul><p>StreamUtils <br> Base64Utils <br> DigestUtils <br> DomUtils</p><p>PropertyPlaceholderHelper</p><p>数据结构</p><ul><li>LinkedCaseInsensitiveMap 不区分大小写的 Map</li><li>MultiValueMap</li></ul><h2 id="data-access" tabindex="-1"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#spring-data-tier" target="_blank" rel="noreferrer">Data Access</a> <a class="header-anchor" href="#data-access" aria-label="Permalink to &quot;[Data Access](https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#spring-data-tier)&quot;">​</a></h2><h3 id="jdbctemplate" tabindex="-1">JDBCTemplate <a class="header-anchor" href="#jdbctemplate" aria-label="Permalink to &quot;JDBCTemplate&quot;">​</a></h3><p>通过配置文件、注解、Java 配置类等形式获取数据库的相关信息，实现了对 JDBC 开发过程中的驱动加载、连接的开启和关闭、SQL 语句的创建与执行、异常处理、事务处理、数据类型转换等操作的封装</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;?</span><span style="color:#E06C75;">xml</span><span style="color:#D19A66;"> version</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;1.0&quot;</span><span style="color:#D19A66;"> encoding</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">?&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">beans</span><span style="color:#D19A66;"> xmlns</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#D19A66;">       xmlns:xsi</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#D19A66;">       xmlns:context</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.springframework.org/schema/context&quot;</span></span>
<span class="line"><span style="color:#D19A66;">       xsi:schemaLocation</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.springframework.org/schema/beans</span></span>
<span class="line"><span style="color:#98C379;">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span>
<span class="line"><span style="color:#98C379;">    http://www.springframework.org/schema/context</span></span>
<span class="line"><span style="color:#98C379;">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!--开启组件扫描--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">context:component-scan</span><span style="color:#D19A66;"> base-package</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;net.biancheng.c&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">context:component-scan</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!--引入 jdbc.properties 中的配置--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">context:property-placeholder</span><span style="color:#D19A66;"> location</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;classpath:jdbc.properties&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">context:property-placeholder</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  	&lt;!--定义数据源 Bean--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;dataSource&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        &lt;!--数据库连接地址--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;url&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;\${jdbc.url}&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        &lt;!--数据库的用户名--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;username&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;\${jdbc.username}&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        &lt;!--数据库的密码--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;password&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;\${jdbc.password}&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        &lt;!--数据库驱动--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;driverClassName&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;\${jdbc.driver}&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">bean</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!--定义JdbcTemplate Bean--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;jdbcTemplate&quot;</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        &lt;!--将数据源的 Bean 注入到 JdbcTemplate 中--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;dataSource&quot;</span><span style="color:#D19A66;"> ref</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;dataSource&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">bean</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">beans</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>methods</p><ul><li>public int update(String sql) 用于执行新增、更新、删除等语句；</li><li>public int update(String sql,Object... args)</li><li>public void execute(String sql) 可以执行任意 SQL，一般用于执行 DDL 语句；</li><li>public T execute(String sql, PreparedStatementCallback action)</li><li><code>public &lt;T&gt; List&lt;T&gt; query(String sql, RowMapper&lt;T&gt; rowMapper, @Nullable Object... args) </code></li><li>用于执行查询语句；</li><li><code>public &lt;T&gt; T queryForObject(String sql, RowMapper&lt;T&gt; rowMapper, @Nullable Object... args)</code></li><li><code>public int[] batchUpdate(String sql, List&lt;Object[]&gt; batchArgs, final int[] argTypes) </code></li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Repository</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UserDaoImpl</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> UserDao</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Resource</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> JdbcTemplate</span><span style="color:#E06C75;"> jdbcTemplate</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Resource</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> NamedParameterJdbcTemplate</span><span style="color:#E06C75;"> namedParameterJdbcTemplate</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> addUer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">User</span><span style="color:#E06C75;font-style:italic;"> user</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> sql</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;INSERT into \`user\` (\`user\`.user_name,\`user\`.\`status\`) VALUES(?,?);&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> update</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> jdbcTemplate</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(sql, </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUserName</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getStatus</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> update;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> update</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">User</span><span style="color:#E06C75;font-style:italic;"> user</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> sql</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;UPDATE \`user\` SET status=? WHERE user_name=?;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> jdbcTemplate</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(sql, </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getStatus</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUserName</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> delete</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">User</span><span style="color:#E06C75;font-style:italic;"> user</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> sql</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;DELETE FROM \`user\` where user_name=?;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> jdbcTemplate</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">update</span><span style="color:#ABB2BF;">(sql, </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUserName</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> count</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">User</span><span style="color:#E06C75;font-style:italic;"> user</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> sql</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;SELECT COUNT(*) FROM \`user\` where \`status\`=?;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> jdbcTemplate</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">queryForObject</span><span style="color:#ABB2BF;">(sql, </span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getStatus</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> getList</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">User</span><span style="color:#E06C75;font-style:italic;"> user</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> sql</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;SELECT * FROM \`user\` where \`status\`=?;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> jdbcTemplate</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">query</span><span style="color:#ABB2BF;">(sql, </span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> BeanPropertyRowMapper</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;">&gt;(</span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">), </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getStatus</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> batchAddUser</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">[]&gt; </span><span style="color:#E06C75;font-style:italic;">batchArgs</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> sql</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;INSERT into \`user\` (\`user\`.user_name,\`user\`.\`status\`) VALUES(?,?);&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        jdbcTemplate</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">batchUpdate</span><span style="color:#ABB2BF;">(sql, batchArgs);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h3 id="事务-transaction" tabindex="-1">事务（Transaction） <a class="header-anchor" href="#事务-transaction" aria-label="Permalink to &quot;事务（Transaction）&quot;">​</a></h3><p><strong>编程式事务管理</strong> 通过编写代码实现的事务管理 <br> <strong>TransactionDefinition</strong>：定义了一个事务规则——事务隔离、事务传播、事务超时、只读状态 <br> TransactionStatus 表示一个事务</p><p><strong>PlatformTransactionManager</strong>： 具体的事务管理由 PlatformTransactionManager 的实现类DataSourceTransactionManager来完成</p><ul><li>TransactionStatus getTransaction(@Nullable TransactionDefinition definition)：开始事务，transactionDefinition 可从容器中获取</li><li>void commit(TransactionStatus status)：提交事务</li><li>void rollback(TransactionStatus status)：回滚事务</li></ul><p><strong>声明式事务管理</strong> 底层采用了 AOP 技术，只需要在配置文件中进行相关的规则声明 <br> <code>@Transactional</code> 建议标注在实现类（或实现类的方法）上 <br> 可用属性</p><ul><li>transactionManager：指定使用的事务管理器 Bean 的 id</li><li>isolation：用于指定事务的隔离级别，默认为底层事务的隔离级别 Isolation.DEFAULT</li><li>propagation：指定事务传播行为，默认 Propagation.REQUIRED</li><li>readOnly：指定事务是否只读，默认 false</li><li>rollbackFor：指定遇到特定异常时强制回滚事务，默认 ex instanceof RuntimeException || ex instanceof Error （RuntimeException 或 Error）时才回滚，DefaultTransactionAttribute#rollbackOn</li><li>rollbackForClassName：指定遇到特定的多个异常时强制回滚事务。该属性值可以指定多个异常类名</li><li>noRollbackFor：指定遇到特定异常时强制不回滚事务</li><li>noRollbackForClassName：指定遇到特定的多个异常时强制不回滚事务。该属性值可以指定多个异常类名</li><li>timeout：指定事务的超时时长</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>注意事项</p><ul><li>自调用失效：一个类<strong>自身方法之间的调用</strong></li><li>方法是 public 且非静态的</li></ul></div><h2 id="spring-mvc" tabindex="-1"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html" target="_blank" rel="noreferrer">Spring MVC</a> <a class="header-anchor" href="#spring-mvc" aria-label="Permalink to &quot;[Spring MVC](https://docs.spring.io/spring-framework/docs/current/reference/html/web.html)&quot;">​</a></h2><p><strong>MVC</strong></p><ul><li>**模型(Model) **封装了应用程序数据，通常它们将由POJO类组成。</li><li>**视图(View) **负责渲染模型数据，一般来说它生成客户端浏览器可以解释HTML输出。</li><li>**控制器(Controller) **负责处理用户请求并构建适当的模型，并将其传递给视图进行渲染。</li></ul><p>执行流程 <br> <img src="`+t+`" alt=""> <br> Handler</p><ul><li>HandlerMethodReturnValueHandler</li><li>HandlerMethodArgumentResolver</li></ul><h3 id="注解" tabindex="-1">注解 <a class="header-anchor" href="#注解" aria-label="Permalink to &quot;注解&quot;">​</a></h3><p><code>@RequestMapping</code>：用于类或方法，用来转换 Web 请求（访问路径和参数）</p><ul><li><p>常用属性：</p><ul><li>value、path：用于将指定请求的实际地址转换到方法上，value 的属性值可以不带斜杠</li><li>method：用来指定该方法仅仅处理哪些 HTTP 请求方式，包括 GET、POST、HEAD、OPTIONS、PUT、PATCH、DELETE、TRACE，如果没有指定 method 属性值，则请求处理方法可以处理任意的 HTTP 请求方式</li><li>consumes：指定处理<strong>请求的提交内容类型</strong>（Content-Type），如 &quot;application/json&quot;、&quot;text/html&quot;、&quot;application/x-www-form-urlencoded&quot;、&quot;multipart/form-data&quot;（MediaType 提供了常用的媒体类型）</li><li>produces：指定<strong>返回的内容类型</strong>，返回的内容类型必须是 request 请求头（Accept）中所包含的类型，如 &quot;application/json;charset=UTF-8&quot;、&quot;application/json&quot;</li><li>headers：指定请求中必须包含某些指定的 header 值，才能让该方法处理，如 &quot;Accept=application/json&quot;</li><li>params：指定请求中必须包含某些参数值时，才让该方法处理，如 params=&quot;myParam=myValue”，方法仅处理其中名为“myParam”、值为“myValue”的请求</li></ul></li><li><p>组合注解：<code>@GetMapping、@PostMapping、@PutMapping、@DeleteMapping、PatchMapping</code></p></li><li><p>后缀匹配：Spring MVC 中默认将 .* 作为匹配后缀，即映射到 /person 的方法也隐式映射到 /person.*。通过重写 WebMvcConfigurerAdapter 类中的 configurePathMatch 方法可设置不忽略“.”后面的参数，configurer.setUseSuffixPatternMatch(false)（Spring Boot 默认设置为 false）</p></li><li><p>URI 模式：</p><ul><li>? 匹配 1 个字符（但不能是代表路径分隔符的 /）</li><li><ul><li>匹配 0 或多个任意的字符（可以是代表路径分隔符的 /）</li></ul></li><li>** 匹配 0 或多个目录</li><li><code>{varName:regex}</code>，如<code>{spring:[a-z]+} </code>将<strong>正则表达式</strong> [a-z]+ 匹配到的值赋值给名为 spring 的路径变量</li><li>也可以嵌入 <code>\${…} </code>占位符，这些占位符在启动时通过 PropertyPlaceHolderConfigurer 对本地、系统、环境和其它属性源来解析</li><li>最长匹配原则：存在多个路径匹配模式时，Spring MVC 会以最长符合路径模式来匹配一个路径</li></ul><p><br> <code>@CrossOrigin</code>：可用于类或方法，<strong>设置跨域行为</strong>，常用属性：origins（允许域名）、methods、allowedHeaders、exposedHeaders、allowCredentials（是否允许发送 Cookie，<strong>启用后允许域名不能设置为 &#39;*&#39;</strong>）、maxAge（本次预检请求的有效期，单位为秒）</p></li></ul><p><strong>Util</strong></p><ul><li>HttpMethod</li><li>HttpStatus</li><li>UriComponents</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">UriComponents</span><span style="color:#E06C75;"> uriComponents </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> UriComponentsBuilder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">fromHttpUrl</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;https://www.bing.cn&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">path</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;search/{content}&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">queryParam</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;q&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;spring&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">uriVariables</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ImmutableMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">of</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;content&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;abc&quot;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">encode</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">StandardCharsets</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">UTF_8</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>HtmlUtils</li><li>AntPathMatcher</li><li>PathPattern <ul><li><code>?</code> matches one character</li><li><code>*</code> matches zero or more characters within a path segment</li><li><code>**</code> matches zero or more path segments until the end of the path</li><li><code>{spring}</code> matches a path segment and captures it as a variable named &quot;spring&quot;</li><li><code>{spring:[a-z]+}</code> matches the regexp [a-z]+ as a path variable named &quot;spring&quot;</li><li><code>{*spring}</code> matches zero or more path segments until the end of the path and captures it as a variable named &quot;spring&quot;</li></ul></li></ul><p>方法参数</p><table><thead><tr><th>控制器方法参数</th><th>描述</th></tr></thead><tbody><tr><td>WebRequest, NativeWebRequest</td><td>对请求参数、请求、会话属性的通用访问，不直接使用 Servlet API</td></tr><tr><td>javax.servlet.ServletRequest, javax.servlet.ServletResponse</td><td>选择任意特定的请求或响应类型 —— 如：ServletRequest、HttpServletRequest，或 Spring 的 MultipartRequest、MultipartHttpServletRequest</td></tr><tr><td>javax.servlet.http.HttpSession</td><td>强制会话的存在。因此，该参数不可能为 null。 *会话访问不是线程安全的。如果多个请求被允许并发地访问会话，考虑设置 RequestMappingHandlerAdapter 的 synchronizeOnSession 标志为 true</td></tr><tr><td>javax.servlet.http.PushBuilder</td><td>Servlet 4.0 push builder API，用来编程式 HTTP/2 资源推送。注意，每个 Servlet Spec，如果客户端不支持 HTTP/2 特性，注入的 PushBuilder 实例可以为 null</td></tr><tr><td>java.security.Principal</td><td>当前已认证的用户；如果已知，可能是一个特定的 Principal 实现</td></tr><tr><td>HttpMethod</td><td>请求的 HTTP 方式</td></tr><tr><td>java.util.Locale</td><td>当前请求的区域设置，由可用的最具体的 LocaleResolver 确定，实际上是已配置的 LocaleResolver 或 LocaleContextResolver</td></tr><tr><td>java.util.TimeZone + java.time.ZoneId</td><td>当前请求关联的时区，由 LocaleContextResolver 确定</td></tr><tr><td>java.io.InputStream, java.io.Reader</td><td>用于访问由 Servlet API 暴露的原始请求体</td></tr><tr><td>java.io.OutputStream, java.io.Writer</td><td>用于访问由 Servlet API 暴露的原始响应体</td></tr><tr><td>@PathVariable</td><td>用于访问 URI 模板变量</td></tr><tr><td>@MatrixVariable</td><td>用于访问 URI 路径段中的键值对</td></tr><tr><td>@RequestParam</td><td>用来访问 Servlet 请求参数。参数值被转换为声明的方法参数类型。</td></tr><tr><td>@RequestHeader</td><td>用来访问请求报文头。报文头值被转换为声明的方法参数类型</td></tr><tr><td>@CookieValue</td><td>用来访问 Cookie。Cookie 值被转换为声明的方法参数类型</td></tr><tr><td>@RequestBody</td><td>用来访问 HTTP 请求报文体。报文体内容使用 HttpMessageConverters 被转换为声明的方法参数类型</td></tr><tr><td><code>HttpEntity&lt;B&gt;</code></td><td>用来访问请求报文头和报文体。报文体使用 HttpMessageConverters 被转换</td></tr><tr><td>@RequestPart</td><td>用来访问 multipart/form-data 请求的一部分</td></tr><tr><td>java.util.Map, org.springframework.ui.Model, org.springframework.ui.ModelMap</td><td>用来访问用于 HTTP 控制器的模型，作为视图渲染的一部分暴露给模板</td></tr><tr><td>RedirectAttributes</td><td>指定在重定向时使用的属性 —— 用来附加临时存储到重定向之后请求的查询字符串，flash 属性</td></tr><tr><td>@ModelAttribute</td><td>用于访问模型（如果不存在就实例化）中存在的应用数据绑定和校验的属性。</td></tr><tr><td>Errors, BindingResult</td><td>用于访问命令对象（如 @ModelAttribute 参数）校验和数据绑定产生的错误，或 @RequestBody 或 @RequestPart 参数校验产生的错误；Errors 或 BindingResult 参数必须紧跟在被校验的方法参数之后</td></tr><tr><td>SessionStatus + class-level @SessionAttributes</td><td>用于标记表单处理完成以清除通过类级别 @SessionAttributes 注解声明的会话属性</td></tr><tr><td>UriComponentsBuilder</td><td>用于准备一个相对于当前请求的主机、端口、方案、上下文路径和 Servlet 映射的文字部分的 URL，还需要考虑 Forwarded 和 X-Forwarded-* 报文头</td></tr><tr><td>@SessionAttribute</td><td>用于访问任意会话属性</td></tr><tr><td>@RequestAttribute</td><td>用于访问请求属性</td></tr></tbody></table><p>返回值</p><table><thead><tr><th>控制器方法返回值</th><th>描述</th></tr></thead><tbody><tr><td>@ResponseBody</td><td>返回值通过 HttpMessageConverters 转换并写入响应</td></tr><tr><td><code>HttpEntity&lt;B&gt;, ResponseEntity&lt;B&gt;</code></td><td>返回值指定完整的响应，包括通过 HttpMessageConverters 转换并写入响应的 HTTP 报文头和报文体</td></tr><tr><td>HttpHeaders</td><td>用于返回只有报文头没有报文体的响应</td></tr><tr><td>String</td><td>用于 ViewResolver 解析的视图名，并与隐式的模型</td></tr><tr><td>View</td><td>View 实例，与隐式的模型一起用来渲染模型</td></tr><tr><td>java.util.Map, org.springframework.ui.Model</td><td>将被添加到隐式模型的属性，视图名由 RequestToViewNameTranslator 隐式地确定</td></tr><tr><td>@ModelAttribute</td><td>将被添加的模型的属性</td></tr><tr><td>ModelAndView object</td><td>待使用的视图和模型，以及可选的响应状态</td></tr><tr><td>void</td><td>void 返回类型（或 null 返回值）的方法，如果它同时包含 ServletResponse，或者 OutputStream 属性，或者 @ResponseStatus 注解，则认为它已经处理完了响应。</td></tr><tr><td><code>DeferredResult&lt;V&gt;</code></td><td>从任意线程异步地生成任意上述返回值</td></tr><tr><td><code>Callable&lt;V&gt;</code></td><td>在 Spring MVC 托管的线程中异步地生成任意上述返回值</td></tr><tr><td>ListenableFuture, CompletionStage, CompletableFuture</td><td>DeferredResult 的便捷替代方案</td></tr><tr><td>ResponseBodyEmitter, SseEmitter</td><td>在 HttpMessageConverter 的帮助下异步地发出一个对象流以写入响应</td></tr><tr><td>StreamingResponseBody</td><td>异步地写入响应 OutputStream</td></tr></tbody></table><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">RestController</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">RequestMapping</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;/persons&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> PersonController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">GetMapping</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;/{id}&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> Person</span><span style="color:#61AFEF;"> getPerson</span><span style="color:#ABB2BF;">(@</span><span style="color:#E5C07B;">PathVariable</span><span style="color:#E5C07B;"> Long</span><span style="color:#E06C75;font-style:italic;"> id</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">PostMapping</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">ResponseStatus</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">HttpStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">CREATED</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(@</span><span style="color:#E5C07B;">RequestBody</span><span style="color:#E5C07B;"> Person</span><span style="color:#E06C75;font-style:italic;"> person</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // ...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="拦截器-interceptor" tabindex="-1">拦截器（Interceptor） <a class="header-anchor" href="#拦截器-interceptor" aria-label="Permalink to &quot;拦截器（Interceptor）&quot;">​</a></h3><ol><li>自定义拦截器：自定义一个类实现 Hanlderlnterceptor 接口或者继承 HandlerlnterceptorAdapter 抽象类，重写 preHandle 方法（在请求发生前执行），或重写 postHandle 方法（在请求完成后执行）</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyInterceptor</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> HandlerInterceptor</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> preHandle</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;font-style:italic;"> request</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">            HttpServletResponse</span><span style="color:#E06C75;font-style:italic;"> response</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;font-style:italic;"> handler</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;preHandle方法在控制器的处理请求方法调用之前执行&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> postHandle</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;font-style:italic;"> request</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">            HttpServletResponse</span><span style="color:#E06C75;font-style:italic;"> response</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;font-style:italic;"> handler</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">            ModelAndView</span><span style="color:#E06C75;font-style:italic;"> modelAndView</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;postHandle方法在控制器的处理请求方法调用之后，解析视图之前执行&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> afterCompletion</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;font-style:italic;"> request</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E5C07B;">            HttpServletResponse</span><span style="color:#E06C75;font-style:italic;"> response</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;font-style:italic;"> handler</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> ex</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">            throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;afterCompletion方法在控制器的处理请求方法执行完成后执行，即视图渲染结束之后执行&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>注册拦截器：拦截器的配置XML方式</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">mvc:interceptors</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">mvc:interceptor</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!--/** 包括路径及其子路径--&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">mvc:mapping</span><span style="color:#D19A66;"> path</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;/**&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    &lt;!--bean配置的就是拦截器--&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;com.example.MyInterceptor&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">mvc:interceptor</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">mvc:interceptors</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="控制器通知-controller-advice" tabindex="-1">控制器通知 Controller Advice <a class="header-anchor" href="#控制器通知-controller-advice" aria-label="Permalink to &quot;控制器通知 Controller Advice&quot;">​</a></h3><p><code>@ControllerAdvice</code> 或 <code>@RestControllerAdvice</code> 定义统一的处理类，用来拦截 Controller 的方法</p><h4 id="统一异常处理" tabindex="-1">统一异常处理 <a class="header-anchor" href="#统一异常处理" aria-label="Permalink to &quot;统一异常处理&quot;">​</a></h4><ul><li><code>@ExceptionHandler(value = Exception.class)</code> 指定该方法处理的异常类型</li><li><code>@ResponseStatus(HttpStatus.xxx)</code> 指定该方法返回的状态码</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Slf4j</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">RestControllerAdvice</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> GlobalExceptionHandler</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">ExceptionHandler</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">Exception</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#E5C07B;"> ResponseEntity</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> handlerGeneralException</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;font-style:italic;"> exception</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Occur exception {}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">exception</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ResponseEntity</span><span style="color:#ABB2BF;">&lt;&gt;(</span><span style="color:#E5C07B;">exception</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">HttpStatus</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">BAD_REQUEST</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="请求前后增强处理" tabindex="-1">请求前后增强处理 <a class="header-anchor" href="#请求前后增强处理" aria-label="Permalink to &quot;请求前后增强处理&quot;">​</a></h4><p><strong>RequestBodyAdvice</strong>：用于对带有 <code>@RequestBody</code>注解的 Controller 方法，在读取请求 body 之前或者在 body 转换成对象之前做相应的增强（如消息体解密、日志记录）</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Slf4j</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">ControllerAdvice</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> LogRequestBodyAdvice</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> RequestBodyAdvice</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> supports</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MethodParameter</span><span style="color:#E06C75;font-style:italic;"> methodParameter</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Type</span><span style="color:#E06C75;font-style:italic;"> type</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> HttpMessageConverter</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt;&gt; </span><span style="color:#E06C75;font-style:italic;">aClass</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> HttpInputMessage</span><span style="color:#61AFEF;"> beforeBodyRead</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">HttpInputMessage</span><span style="color:#E06C75;font-style:italic;"> httpInputMessage</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">MethodParameter</span><span style="color:#E06C75;font-style:italic;"> methodParameter</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Type</span><span style="color:#E06C75;font-style:italic;"> type</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> HttpMessageConverter</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt;&gt; </span><span style="color:#E06C75;font-style:italic;">aClass</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> IOException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> httpInputMessage;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> Object</span><span style="color:#61AFEF;"> afterBodyRead</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;font-style:italic;"> body</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">HttpInputMessage</span><span style="color:#E06C75;font-style:italic;"> httpInputMessage</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">MethodParameter</span><span style="color:#E06C75;font-style:italic;"> methodParameter</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Type</span><span style="color:#E06C75;font-style:italic;"> type</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> HttpMessageConverter</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt;&gt; </span><span style="color:#E06C75;font-style:italic;">aClass</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Method</span><span style="color:#E06C75;"> method</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> methodParameter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMethod</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}.{}:{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">method</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeclaringClass</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getSimpleName</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">method</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toJSONString</span><span style="color:#ABB2BF;">(body));</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> body;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> Object</span><span style="color:#61AFEF;"> handleEmptyBody</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;font-style:italic;"> body</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">HttpInputMessage</span><span style="color:#E06C75;font-style:italic;"> httpInputMessage</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">MethodParameter</span><span style="color:#E06C75;font-style:italic;"> methodParameter</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Type</span><span style="color:#E06C75;font-style:italic;"> type</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> HttpMessageConverter</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt;&gt; </span><span style="color:#E06C75;font-style:italic;">aClass</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Method</span><span style="color:#E06C75;"> method</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> methodParameter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMethod</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}.{}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">method</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeclaringClass</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getSimpleName</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">method</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> body;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p><strong>ResponseBodyAdvice</strong>：对使用 <code>@ResponseBody</code> 修饰的 Controller 方法，在响应体写出之前做相应的增强</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Slf4j</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">ControllerAdvice</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> LogResponseBodyAdvice</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> ResponseBodyAdvice</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> boolean</span><span style="color:#61AFEF;"> supports</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MethodParameter</span><span style="color:#E06C75;font-style:italic;"> methodParameter</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Class</span><span style="color:#E06C75;font-style:italic;"> aClass</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> Object</span><span style="color:#61AFEF;"> beforeBodyWrite</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#E06C75;font-style:italic;"> body</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">MethodParameter</span><span style="color:#E06C75;font-style:italic;"> methodParameter</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">MediaType</span><span style="color:#E06C75;font-style:italic;"> mediaType</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Class</span><span style="color:#E06C75;font-style:italic;"> aClass</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ServerHttpRequest</span><span style="color:#E06C75;font-style:italic;"> serverHttpRequest</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">ServerHttpResponse</span><span style="color:#E06C75;font-style:italic;"> serverHttpResponse</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Method</span><span style="color:#E06C75;"> method</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> methodParameter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMethod</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> url</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> serverHttpRequest</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getURI</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">toASCIIString</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;{}.{}, url={}, result={}&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">method</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDeclaringClass</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getSimpleName</span><span style="color:#ABB2BF;">(), </span><span style="color:#E5C07B;">method</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">(), url, </span><span style="color:#E5C07B;">JSON</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toJSONString</span><span style="color:#ABB2BF;">(body));</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> body;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="文件上传" tabindex="-1">文件上传 <a class="header-anchor" href="#文件上传" aria-label="Permalink to &quot;文件上传&quot;">​</a></h3><p>需导入文件上传的jar包，commons-fileupload <br> 配置bean：multipartResolver</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">bean</span><span style="color:#D19A66;"> id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;multipartResolver&quot;</span><span style="color:#D19A66;">  class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   &lt;!-- 请求的编码格式，默认为ISO-8859-1 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">   &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;defaultEncoding&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;utf-8&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   &lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">   &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;maxUploadSize&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;10485760&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">   &lt;</span><span style="color:#E06C75;">property</span><span style="color:#D19A66;"> name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;maxInMemorySize&quot;</span><span style="color:#D19A66;"> value</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;40960&quot;</span><span style="color:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">bean</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">RestController</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UpLoadController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    //@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">PostMapping</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;/upload&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> upload</span><span style="color:#ABB2BF;">(@</span><span style="color:#E5C07B;">RequestParam</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;file&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">MultipartFile</span><span style="color:#E06C75;font-style:italic;"> file</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;font-style:italic;"> request</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> filePath</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getPath</span><span style="color:#ABB2BF;">(request);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> saveFile</span><span style="color:#ABB2BF;">(file, filePath);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">PostMapping</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;/multiUpload&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> multiUpload</span><span style="color:#ABB2BF;">(@</span><span style="color:#E5C07B;">RequestParam</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;file&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#E5C07B;">MultipartFile</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">files</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;font-style:italic;"> request</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> filePath</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getPath</span><span style="color:#ABB2BF;">(request);</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">MultipartFile</span><span style="color:#E06C75;"> f</span><span style="color:#C678DD;"> :</span><span style="color:#ABB2BF;"> files){</span></span>
<span class="line"><span style="color:#61AFEF;">            saveFile</span><span style="color:#ABB2BF;">(f, filePath);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#98C379;"> &quot;ok&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> getPath</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;font-style:italic;"> request</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getServletContext</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getRealPath</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/upload&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> saveFile</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MultipartFile</span><span style="color:#E06C75;font-style:italic;"> file</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> filePath</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">file</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isEmpty</span><span style="color:#ABB2BF;">()){</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#98C379;"> &quot;未选择文件&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> filename</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> file</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOriginalFilename</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//获取上传文件原来的名称</span></span>
<span class="line"><span style="color:#E5C07B;">        File</span><span style="color:#E06C75;"> temp</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> File</span><span style="color:#ABB2BF;">(filePath);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">temp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exists</span><span style="color:#ABB2BF;">()){</span></span>
<span class="line"><span style="color:#E5C07B;">            temp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">mkdirs</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#E5C07B;">        File</span><span style="color:#E06C75;"> localFile</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> File</span><span style="color:#ABB2BF;">(filePath</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;">filename);</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            file</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">transferTo</span><span style="color:#ABB2BF;">(localFile); </span><span style="color:#7F848E;font-style:italic;">//把上传的文件保存至本地</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">file</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOriginalFilename</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&quot; 上传成功&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">IOException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#98C379;"> &quot;上传失败&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#98C379;"> &quot;ok&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="文件下载" tabindex="-1">文件下载 <a class="header-anchor" href="#文件下载" aria-label="Permalink to &quot;文件下载&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">RequestMapping</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">value</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;/download&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> downloads</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">HttpServletResponse</span><span style="color:#E06C75;"> response </span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">HttpServletRequest</span><span style="color:#E06C75;"> request) throws Exception{</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   // 下载的地址</span></span>
<span class="line"><span style="color:#E5C07B;">   String</span><span style="color:#E06C75;">  path </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> request</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getServletContext</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getRealPath</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/upload&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">   String</span><span style="color:#E06C75;">  fileName </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;image.jpg&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   //1、设置response 响应头</span></span>
<span class="line"><span style="color:#E5C07B;">   response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">reset</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> //设置页面不缓存,清空buffer</span></span>
<span class="line"><span style="color:#E5C07B;">   response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setCharacterEncoding</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> //字符编码</span></span>
<span class="line"><span style="color:#E5C07B;">   response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setContentType</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;multipart/form-data&quot;</span><span style="color:#ABB2BF;">);</span><span style="color:#7F848E;font-style:italic;"> //二进制传输数据</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   //设置响应头</span></span>
<span class="line"><span style="color:#E5C07B;">   response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Content-Disposition&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#98C379;">           &quot;attachment;fileName=&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> URLEncoder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">encode</span><span style="color:#ABB2BF;">(fileName, </span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">   File</span><span style="color:#E06C75;"> file </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> File</span><span style="color:#E06C75;">(path</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">fileName)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   //2、 读取文件--输入流</span></span>
<span class="line"><span style="color:#E5C07B;">   InputStream</span><span style="color:#E06C75;"> input</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> FileInputStream</span><span style="color:#E06C75;">(file)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   //3、 写出文件--输出流</span></span>
<span class="line"><span style="color:#E5C07B;">   OutputStream</span><span style="color:#E06C75;"> out </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> response</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOutputStream</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">   byte</span><span style="color:#E06C75;">[] buff </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#C678DD;"> byte</span><span style="color:#E06C75;">[</span><span style="color:#D19A66;">1024</span><span style="color:#E06C75;">]</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">   int</span><span style="color:#E06C75;"> index</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">   //4、执行 写出操作</span></span>
<span class="line"><span style="color:#C678DD;">   while</span><span style="color:#E06C75;">((index</span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(buff)</span><span style="color:#E06C75;">)</span><span style="color:#56B6C2;">!=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#E06C75;">){</span></span>
<span class="line"><span style="color:#E5C07B;">       out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(buff, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, index);</span></span>
<span class="line"><span style="color:#E5C07B;">       out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">flush</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">   }</span></span>
<span class="line"><span style="color:#E5C07B;">   out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">   input</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">close</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">   return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="web-reactive" tabindex="-1"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#spring-webflux" target="_blank" rel="noreferrer">Web Reactive</a> <a class="header-anchor" href="#web-reactive" aria-label="Permalink to &quot;[Web Reactive](https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#spring-webflux)&quot;">​</a></h2><h3 id="webclient" tabindex="-1"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-client" target="_blank" rel="noreferrer">WebClient</a> <a class="header-anchor" href="#webclient" aria-label="Permalink to &quot;[WebClient](https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-client)&quot;">​</a></h3><h2 id="spring-boot" tabindex="-1"><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/" target="_blank" rel="noreferrer">Spring Boot</a> <a class="header-anchor" href="#spring-boot" aria-label="Permalink to &quot;[Spring Boot](https://docs.spring.io/spring-boot/docs/current/reference/html/)&quot;">​</a></h2><p>依赖配置</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">&lt;?</span><span style="color:#E06C75;">xml</span><span style="color:#D19A66;"> version</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;1.0&quot;</span><span style="color:#D19A66;"> encoding</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">?&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">project</span><span style="color:#D19A66;"> xmlns</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://maven.apache.org/POM/4.0.0&quot;</span><span style="color:#D19A66;"> xmlns:xsi</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#D19A66;">    xsi:schemaLocation</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">modelVersion</span><span style="color:#ABB2BF;">&gt;4.0.0&lt;/</span><span style="color:#E06C75;">modelVersion</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;com.yiibai&lt;/</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;demo&lt;/</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">&gt;0.0.1-SNAPSHOT&lt;/</span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">packaging</span><span style="color:#ABB2BF;">&gt;jar&lt;/</span><span style="color:#E06C75;">packaging</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">&gt;demo&lt;/</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">&gt;Demo project for Spring Boot&lt;/</span><span style="color:#E06C75;">description</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">parent</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;spring-boot-starter-parent&lt;/</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">&gt;2.2.6.RELEASE&lt;/</span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">relativePath</span><span style="color:#ABB2BF;">/&gt; </span><span style="color:#7F848E;font-style:italic;">&lt;!-- lookup parent from repository --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">parent</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">properties</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">project.build.sourceEncoding</span><span style="color:#ABB2BF;">&gt;UTF-8&lt;/</span><span style="color:#E06C75;">project.build.sourceEncoding</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">project.reporting.outputEncoding</span><span style="color:#ABB2BF;">&gt;UTF-8&lt;/</span><span style="color:#E06C75;">project.reporting.outputEncoding</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">java.version</span><span style="color:#ABB2BF;">&gt;1.8&lt;/</span><span style="color:#E06C75;">java.version</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">properties</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">dependencies</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">dependency</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;spring-boot-starter&lt;/</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E06C75;">dependency</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">dependency</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;spring-boot-starter-test&lt;/</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">&gt;test&lt;/</span><span style="color:#E06C75;">scope</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E06C75;">dependency</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">dependencies</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">build</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;spring-boot-maven-plugin&lt;/</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;/</span><span style="color:#E06C75;">plugin</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;/</span><span style="color:#E06C75;">build</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">project</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>启动类</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">SpringBootApplication</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">RestController</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> DemoApplication</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        SpringApplication</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">DemoApplication</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#ABB2BF;">, args);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">RequestMapping</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">value</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;/&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> hello</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#98C379;"> &quot;Hello World&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>@SpringBootApplication：修饰启动类，组合了以下注解：</p><ul><li>@Configuration：用于声明当前类是一个配置类</li><li>@EnableAutoConfiguration：让 Spring Boot 根据类路径中的 jar 包依赖为当前项目进行自动配置，可以通过使用 exclude 属性关闭特定的自动配置</li><li>@ComponentScan：组件扫描，可自动发现和装配 Bean</li></ul><p>定制 Banner</p><ul><li>关闭 banner：spring.main.banner-mode=off</li><li>自定义 Banner，banner.txt 或 banner.gif(jpg or png can also be used)</li></ul><h3 id="starter-启动器" tabindex="-1">starter（启动器） <a class="header-anchor" href="#starter-启动器" aria-label="Permalink to &quot;starter（启动器）&quot;">​</a></h3><p>starter 中整合了该场景下各种可能用到的依赖，只需要在 Maven 中引入 starter 依赖，SpringBoot 就能自动扫描到要加载的信息并启动相应的默认配置。starter 提供了大量的自动配置。</p><ul><li>spring-boot-starter：核心 starter，包含自动配置、日志和 YAML 配置文件的支持</li><li>spring-boot-starter-web：用于使用 Spring MVC 构建 web 应用，包括 RESTful（默认的内嵌容器是 Tomcat）</li><li>spring-boot-starter-validation：Starter for using Java Bean Validation with Hibernate Validator</li><li>spring-boot-starter-test：用于测试 Spring Boot 应用，支持常用测试类库，包括 JUnit, Hamcrest 和 Mockito</li><li>spring-boot-starter-cache：用于使用 Spring 框架的缓存支持</li><li>spring-boot-starter-aop：用于使用 Spring AOP 和 AspectJ 实现面向切面编程</li></ul><p>spring-boot-starter-parent 是所有 Spring Boot 项目的父级依赖，称为 Spring Boot 的版本仲裁中心，可以对项目内的部分常用依赖进行统一管理。</p><p>自动化配置注册方式</p><table><thead><tr><th></th><th>旧配置方式（2.7.0之前）</th></tr></thead><tbody><tr><td>resources <br> └── META-INF <br> └── spring <br> └── org.springframework.boot.autoconfigure.AutoConfiguration.imports</td><td>resources <br> └── META-INF <br> └── spring.factories</td></tr><tr><td>@AutoConfiguration</td><td>@Configuration</td></tr></tbody></table><h3 id="注解-1" tabindex="-1">注解 <a class="header-anchor" href="#注解-1" aria-label="Permalink to &quot;注解&quot;">​</a></h3><p>配置类</p><ul><li>@Configuration：用于声明当前类是一个配置类</li><li>@Import：修饰配置类，用于向当前配置类中导入其它配置类，以及 ImportSelector、 DeferredImportSelector 或 ImportBeanDefinitionRegistrar 的实现类</li><li>@ImportResource：修饰配置类，用于导入指定的 XML 配置文件</li><li>@PropertySource：修饰配置类，用于加载指定的资源配置文件</li><li>@PropertySources：修饰配置类，用于同时加载多个的资源配置文件</li><li>@ComponentScan：修饰配置类，相当于 <code>&lt;context:component-scan base-package=&quot;...&quot;/&gt;</code>，默认扫描当前包以及子包下所有使用 @Service @Components @Repository @Controller 的类，并注册为 Bean。属性：basePackages、lazyInit</li><li>@ConfigurationProperties：修饰配置类或其内部的 @Bean 方法，用于将<strong>配置文件</strong>的某类名下所有的参数值赋给配置类的属性</li><li>@Profile：修饰配置类或方法，设定当前 context 需要使用的配置环境，可达到在不同情况下选择实例化不同的 Bean</li><li>@AutoConfigureAfter：在指定的配置类初始化后再加载</li><li>@AutoConfigureBefore：在指定的配置类初始化前加载</li><li>@AutoConfigureOrder：数越小越先初始化</li></ul><p>属性注解</p><ul><li><p>@Value：修饰属性、方法或构造器函数，通过使用属性占位符从资源配置文件中加载一个参数值</p></li><li><p>@Bean：修饰方法，将该方法的返回值定义成容器中的一个 Bean</p></li><li><p>@Scope：修饰属性或方法，指定该方法对应的 Bean 的生命域</p></li><li><p>@Lazy：修饰属性、方法或 Bean 类，指定该属性延迟到调用此属性时才注入属性值，或该方法对应的 Bean 延迟初始化（可用来解决循环依赖）</p></li><li><p>@DependsOn：修饰方法，指定在初始化该方法对应的 Bean 之前初始化指定的 Bean</p></li><li><p>@Conditional：满足某个特定的条件才创建该一个特定的 Bean，其属性 value 的类型是 <code>Class&lt;? extends Condition&gt;[]</code></p></li><li><p>@EnableTransactionManagement：开启注解式事务的支持，Spring 容器会自动扫描注解</p></li><li><p>@EnableScheduling：开启计划任务的支持</p></li><li><p>@Scheduled：修饰方法，用于声明该方法是一个计划任务</p><ul><li>fixedRate：隔指定时间调用一次，不管任务是否执行完</li><li>fixedDelay：任务执行完后隔指定时间再调用</li><li>cron： 按表达式执行</li><li>并行任务配置：<code>spring.task.scheduling.pool.size=5</code></li><li>动态定时任务 ScheduledTaskRegistrar</li></ul></li><li><p>@EnableAsync：开启对异步任务的支持，再通过在实际执行的 Bean 的方法中使用 @Async 注解来声明其是一个异步任务</p><ul><li>实现是基于AOP，方法要从类的外部调用（即走代理类）</li><li>注解的方法必须是public，返回值只能为void或者Future</li></ul></li></ul><p>条件注解</p><ul><li>@Conditional</li><li>@ConditionalOnBean：当容器里有指定的 Bean 的条件下</li><li>@ConditionalOnMissingBean：当容器里没有指定 Bean 的情况下</li><li>@ConditionalOnClass：当类路径下有指定的类的条件下</li><li>@ConditionalOnMissingClass：当类路径下没有指定的类的条件下</li><li>@ConditionalOnProperty：基于属性作为判断条件</li><li>@ConditionalOnResource</li><li>@ConditionalOnExpression：基于 SpEL 表达式作为判断条件</li><li>@ConditionalOnWebApplication：当前项目是 Web 项目的条件下</li><li>@ConditionalOnNotWebApplication：当前项目不是 Web 项目的条件下</li></ul><h3 id="common-application-properties" tabindex="-1"><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html" target="_blank" rel="noreferrer">Common Application Properties</a> <a class="header-anchor" href="#common-application-properties" aria-label="Permalink to &quot;[Common Application Properties](https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html)&quot;">​</a></h3><ul><li>可以使用 properties 文件、YAML 文件、环境变量和命令行参数来外部化配置</li><li>属性会以如下的顺序进行设值（即后面读取的<strong>不覆盖</strong>前面读取到的）： <ol><li>命令行参数：如<code> --server.port=9000</code>，转化成一个 property，并将其添加到 Spring Environment 中</li><li>Java 系统属性 System.getProperties()</li><li>操作系统环境变量</li><li>jar 包外部的 Profile-specific 应用属性（application-{profile}.properties 或 YAML 文件）</li><li>jar 包内部的 Profile-specific 应用属性（application-{profile}.properties 或 YAML 文件）</li><li>jar 包外部的应用配置（application.properties 或 YAML 文件）</li><li>jar 包内部的应用配置（application.properties 或 YAML 文件）</li><li>@Configuration 类上的 @PropertySource 注解</li><li>使用 SpringApplication.setDefaultProperties 指定的默认属性</li></ol></li></ul><h4 id="properties-文件配置参数" tabindex="-1"><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-application-property-files" target="_blank" rel="noreferrer">properties 文件配置参数</a> <a class="header-anchor" href="#properties-文件配置参数" aria-label="Permalink to &quot;[properties 文件配置参数](https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-application-property-files)&quot;">​</a></h4><ol><li>项目根目录下的 /config 子目录 <code>file:config/</code></li><li>项目根目录 <code>file:</code></li><li>项目 classpath 下的 /config 包<code>classpath:/config</code></li><li>项目 classpath 根路径 <code>classpath:</code></li></ol><ul><li>指定其它的配置文件名：<code>spring.config.name</code></li><li>指定配置文件的加载路径（目录位置或文件路径列表以逗号分割，目录应以 / 结尾）：<code>spring.config.location</code></li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">ConfigurableApplicationContext</span><span style="color:#E06C75;"> context </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SpringApplicationBuilder</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">TestDefaultFile</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">class</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">properties</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;spring.config.location=classpath:/test-folder/my-config.properties&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">run</span><span style="color:#ABB2BF;">(args);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,172),i=s("ul",null,[s("li",{"port:8080":""},[n("在 properties 文件中可以使用 "),s("code",null,"${属性名:默认值}"),n(" 引用对应属性的值（当在 properties 文件中找不到引用的属性时默认使用的属性），如 port=9090、server.port=$")]),s("li",null,[n("通过 "),s("code",null,"@..@"),n(" 占位符引用 Maven 项目的属性，通过"),s("code",null,"${..}"),n("占位符引用 Gradle 项目的属性")])],-1),B=a(`<p>全注解的方式加载 Spring 配置</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* @Configuration 注解用于定义一个配置类，相当于 Spring 的配置文件</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">* 配置类中包含一个或多个被 @Bean 注解的方法，该方法相当于 Spring 配置文件中的 &lt;bean&gt; 标签定义的组件。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Configuration</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyAppConfig</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 与 &lt;bean id=&quot;personService&quot; class=&quot;PersonServiceImpl&quot;&gt;&lt;/bean&gt; 等价</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 该方法返回值以组件的形式添加到容器中</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     * 方法名是组件 id（相当于 &lt;bean&gt; 标签的属性 id)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Bean</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> PersonService</span><span style="color:#61AFEF;"> personService</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;在容器中添加了一个组件:peronService&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> PersonServiceImpl</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="属性绑定" tabindex="-1">属性绑定 <a class="header-anchor" href="#属性绑定" aria-label="Permalink to &quot;属性绑定&quot;">​</a></h4><p>把配置文件中的值与 JavaBean 中对应的属性进行绑定</p><ul><li><code>@ConfigurationProperties</code>：标注在 JavaBean 的<strong>类名</strong>上，将 properties 属性和一个 Bean 及其属性关联，<strong>松散绑定</strong></li><li><code>@Value(&quot;\${app.name}&quot;)</code>：标注在 JavaBean 的<strong>属性</strong>上，直接将<strong>非静态属性</strong>值注入到 <strong>Bean</strong> 中</li><li><code>@PropertySource</code>** ：**加载指定的配置文件</li></ul><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">ming</span></span>
<span class="line"><span style="color:#E06C75;">  age</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\${random.int}</span><span style="color:#7F848E;font-style:italic;">  # 随机int</span></span>
<span class="line"><span style="color:#E06C75;">  is-lived</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#E06C75;">  birth</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2000-01-01</span></span>
<span class="line"><span style="color:#E06C75;">  info</span><span style="color:#ABB2BF;">: {</span><span style="color:#E06C75;">sex</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">man</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">profession</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">programmer</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#E06C75;">  hobbies</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">    - </span><span style="color:#98C379;">code</span></span>
<span class="line"><span style="color:#ABB2BF;">    - </span><span style="color:#98C379;">music</span></span>
<span class="line"><span style="color:#E06C75;">  pet</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">    species</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">dog</span></span>
<span class="line"><span style="color:#E06C75;">    name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">\${person.name:other}_旺财</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Component</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Data</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">ConfigurationProperties</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">prefix</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;person&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#E5C07B;"> Integer</span><span style="color:#E06C75;"> age</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#E5C07B;"> Boolean</span><span style="color:#E06C75;"> isLived</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">DateTimeFormat</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">pattern</span><span style="color:#56B6C2;"> =</span><span style="color:#98C379;"> &quot;yyyy-MM-dd&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#E5C07B;"> Date</span><span style="color:#E06C75;"> birth</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#E5C07B;"> Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> info</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#E5C07B;"> List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> hobbies</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">  private</span><span style="color:#E5C07B;"> Pet</span><span style="color:#E06C75;"> pet</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#E5C07B;">Data</span></span>
<span class="line"><span style="color:#C678DD;">  public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Pet</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> species</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="静态资源配置" tabindex="-1">静态资源配置 <a class="header-anchor" href="#静态资源配置" aria-label="Permalink to &quot;静态资源配置&quot;">​</a></h3><ul><li>webjars <ul><li>WebMvcConfigurer#addResourceHandlers</li><li>把静态资源打成 jar 包，Spring Boot 会自动加载 /webjars/** 下的所有 jar 包中的静态资源</li></ul></li><li>默认静态资源路径 <ol><li>classpath:/META-INF/resources/</li><li>classpath:/resources/</li><li>classpath:/static/</li><li>classpath:/public/</li></ol></li><li>自定义静态资源<strong>加载路径</strong>：spring.resources.staticLocations</li><li>自定义静态资源<strong>映射</strong>：spring.mvc.static-path-pattern，默认值为/**（表示所有的访问都经过静态资源路径）</li></ul><p>获取资源文件 <code>Resource resource = new ClassPathResource(&quot;application.yml&quot;);</code></p><h3 id="web-开发" tabindex="-1">Web 开发 <a class="header-anchor" href="#web-开发" aria-label="Permalink to &quot;Web 开发&quot;">​</a></h3><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-config" target="_blank" rel="noreferrer">定制 MVC 配置</a>（如拦截器、格式化处理器、视图控制器等）：自定义一个配置类实现 WebMvcConfigurer 接口</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Configuration</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> WebConfig</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> WebMvcConfigurer</span><span style="color:#ABB2BF;">  {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> addInterceptors</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">InterceptorRegistry</span><span style="color:#E06C75;font-style:italic;"> registry</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        registry</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addInterceptor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> XxxInterceptor</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> addCorsMappings</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">CorsRegistry</span><span style="color:#E06C75;font-style:italic;"> registry</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        registry</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addMapping</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/api/**&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">allowedOrigins</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;http://domain2.com&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">allowedMethods</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;PUT&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;DELETE&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">allowedHeaders</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;header1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;header2&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;header3&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">exposedHeaders</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;header1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;header2&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">                .</span><span style="color:#61AFEF;">allowCredentials</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">maxAge</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3600</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> configureMessageConverters</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">HttpMessageConverter</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt;&gt; </span><span style="color:#E06C75;font-style:italic;">converters</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> addFormatters</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">FormatterRegistry</span><span style="color:#E06C75;font-style:italic;"> registry</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> Validator</span><span style="color:#61AFEF;"> getValidator</span><span style="color:#ABB2BF;">();</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="i18n" tabindex="-1">I18n <a class="header-anchor" href="#i18n" aria-label="Permalink to &quot;I18n&quot;">​</a></h3><p><strong>步骤</strong> <br> 1 在resources目录下，编写国际化资源文件</p><ul><li><code>&lt;bundleName&gt;.properties</code>：无语言设置时生效</li><li><code>&lt;bundleName&gt;_en_US.properties</code> ：英语时生效</li><li><code>&lt;bundleName&gt;_zh_CN.properties</code>：中文时生效</li></ul><p>2 自定义的国际资源文件的基本名</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">spring</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  # 资源信息</span></span>
<span class="line"><span style="color:#E06C75;">  messages</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    # 国际化资源文件路径</span></span>
<span class="line"><span style="color:#E06C75;">    basename</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">i18n/&lt;bundleName&gt;,&lt;...&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><br> 3 使用</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">RestController</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> DemoController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Autowired</span></span>
<span class="line"><span style="color:#E5C07B;">    MessageSource</span><span style="color:#E06C75;"> messageSource</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">GetMapping</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;/i18n&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> demo</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> messageSource</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;code&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">LocaleContextHolder</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLocale</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>区域信息解析器自动配置</strong></p><blockquote><p>Spring Boot 在 WebMvcAutoConfiguration 中为区域信息解析器（LocaleResolver）进行了自动配置，它会根据请求头中携带的“Accept-Language”参数，获取相应区域信息（Locale）对象。</p></blockquote><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Bean</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">ConditionalOnMissingBean</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#E06C75;"> {</span><span style="color:#98C379;">&quot;localeResolver&quot;</span><span style="color:#E06C75;">})</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E5C07B;"> LocaleResolver</span><span style="color:#61AFEF;"> localeResolver</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">webProperties</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLocaleResolver</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;"> ==</span><span style="color:#E5C07B;"> org</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">springframework</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">boot</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">autoconfigure</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">web</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">WebProperties</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">LocaleResolver</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">FIXED</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FixedLocaleResolver</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">webProperties</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLocale</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        AcceptHeaderLocaleResolver</span><span style="color:#E06C75;"> localeResolver </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> AcceptHeaderLocaleResolver</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        localeResolver</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setDefaultLocale</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">webProperties</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLocale</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E06C75;"> localeResolver</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>自定义区域信息解析器：实现<code>LocaleResolver</code>，注入spring容器</p>`,24),y=[c,i,B];function u(b,F,A,d,C,m){return p(),e("div",null,y)}const h=l(r,[["render",u]]);export{g as __pageData,h as default};
