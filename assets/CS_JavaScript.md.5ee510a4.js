import{_ as n,c as l,o as e,N as a,x as s}from"./chunks/framework.54f528ff.js";const m=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{"title":"JavaScript","created_at":"2022-02-01T05:44:47.000Z","updated_at":"2023-01-08T09:25:36.000Z","word_count":11756},"headers":[],"relativePath":"CS/JavaScript.md"}'),p={name:"CS/JavaScript.md"},o=a(`<h2 id="——-javascript-——" tabindex="-1">—— <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference" target="_blank" rel="noreferrer">Javascript</a> —— <a class="header-anchor" href="#——-javascript-——" aria-label="Permalink to &quot;—— [Javascript](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference) ——&quot;">​</a></h2><p>1995年，Brendan Eich设计出了一门跨平台、面向对象的脚本语言，它能使网页可交互。 <br> ECMAScript标准：ECMA（European Computer Manufacturers Association）组织定制了JavaScript语言的标准 <br> 脚本语言（script language）：不具备开发操作系统的能力，而是用来编写控制其他大型应用程序（如浏览器）的“脚本”</p><p>一切皆对象，对象为引用值</p><p><strong>注释</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 单行注释（single-line comment）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* 多行注释</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">（multiple-line comment）*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="strict-mode" tabindex="-1">Strict mode <a class="header-anchor" href="#strict-mode" aria-label="Permalink to &quot;Strict mode&quot;">​</a></h2><p><code>&#39;use strict&#39;;</code></p><ul><li>变量必须声明后再使用</li><li>禁止使用 with 语句</li><li>只读属性不可写</li><li>只设置了取值器的属性不可写</li><li>eval、arguments 不可用作标识名</li><li>禁止八进制的前缀0表示法</li><li>禁止删除变量，只能删除属性delete global[prop]</li><li>eval不会在它的外层作用域引入变量</li><li>arguments不会自动反映函数参数的变化</li><li>函数不能有重名的参数</li><li>函数内部不得使用fn.caller、fn.arguments</li><li>禁止使用 arguments.callee、arguments.caller</li><li>禁止this指向全局对象</li><li>增加了保留字</li></ul><h2 id="关键字" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar#%E5%85%B3%E9%94%AE%E5%AD%97" target="_blank" rel="noreferrer">关键字</a> <a class="header-anchor" href="#关键字" aria-label="Permalink to &quot;[关键字](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar#%E5%85%B3%E9%94%AE%E5%AD%97)&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/break" target="_blank" rel="noreferrer">break</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/switch" target="_blank" rel="noreferrer">case</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch" target="_blank" rel="noreferrer">catch</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class" target="_blank" rel="noreferrer">class</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const" target="_blank" rel="noreferrer">const</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/continue" target="_blank" rel="noreferrer">continue</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/debugger" target="_blank" rel="noreferrer">debugger</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/default" target="_blank" rel="noreferrer">default</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete" target="_blank" rel="noreferrer">delete</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/do...while" target="_blank" rel="noreferrer">do</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else" target="_blank" rel="noreferrer">else</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export" target="_blank" rel="noreferrer">export</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class" target="_blank" rel="noreferrer">extends</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch" target="_blank" rel="noreferrer">finally</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for" target="_blank" rel="noreferrer">for</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function" target="_blank" rel="noreferrer">function</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else" target="_blank" rel="noreferrer">if</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noreferrer">import</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in" target="_blank" rel="noreferrer">in</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="noreferrer">instanceof</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="noreferrer">new</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/return" target="_blank" rel="noreferrer">return</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super" target="_blank" rel="noreferrer">super</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/switch" target="_blank" rel="noreferrer">switch</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="noreferrer">this</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/throw" target="_blank" rel="noreferrer">throw</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch" target="_blank" rel="noreferrer">try</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof" target="_blank" rel="noreferrer">typeof</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var" target="_blank" rel="noreferrer">var</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/void" target="_blank" rel="noreferrer">void</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/while" target="_blank" rel="noreferrer">while</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with" target="_blank" rel="noreferrer">with</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/yield" target="_blank" rel="noreferrer">yield</a></li></ul><p>严格模式和非严格模式中均不能使用</p><ul><li>enum</li></ul><p>严格模式中被当成保留关键字</p><ul><li>implements</li><li>interface</li><li>let</li><li>package</li><li>private</li><li>protected</li><li>public</li><li>static</li></ul><p>模块代码中被当成保留关键字：</p><ul><li>await</li></ul><p>之前版本中的ECMAScript（1到3）中的保留关键字：</p><ul><li>abstract</li><li>boolean</li><li>byte</li><li>char</li><li>double</li><li>final</li><li>float</li><li>goto</li><li>int</li><li>long</li><li>native</li><li>short</li><li>synchronized</li><li>transient</li><li>volatile</li></ul><p>直接量null、true和false同样不能被当成标识使用</p><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p>标识符（Identifier）：大小写英文、数字、$、_ 的组合，且不能用数字开头。 <br> 声明</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var" target="_blank" rel="noreferrer">var</a>：声明一个变量，可选初始化一个值。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let" target="_blank" rel="noreferrer">let</a>：声明一个块作用域的局部变量，可选初始化一个值。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const" target="_blank" rel="noreferrer">const</a>：声明一个块作用域的只读常量。</li></ul><p><strong>Hoisting (提升）</strong>： JavaScript 将所有声明提升到当前作用域顶部，提升后的变量将返回 undefined 值。 <br> 用 let 或 const 声明的不会被赋予初始值 <br> 只有函数声明会被提升到顶部，而函数表达式不会被提升</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* 函数声明 */</span></span>
<span class="line"><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// &quot;bar&quot;</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;bar&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/* 函数表达式 */</span></span>
<span class="line"><span style="color:#61AFEF;">baz</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 类型错误：baz 不是一个函数</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">baz</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;bar2&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p>原始数据类型（<a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noreferrer">Primitive data types</a>）一种既非<a href="https://developer.mozilla.org/en-US/docs/Glossary/object" target="_blank" rel="noreferrer">对象</a>也无<a href="https://developer.mozilla.org/en-US/docs/Glossary/method" target="_blank" rel="noreferrer">方法</a>的数据。共有7种：<a href="https://developer.mozilla.org/en-US/docs/Glossary/string" target="_blank" rel="noreferrer">string</a>，<a href="https://developer.mozilla.org/en-US/docs/Glossary/number" target="_blank" rel="noreferrer">number</a>，<a href="https://developer.mozilla.org/en-US/docs/Glossary/bigint" target="_blank" rel="noreferrer">bigint</a>，<a href="https://developer.mozilla.org/en-US/docs/Glossary/boolean" target="_blank" rel="noreferrer">boolean</a>，<a href="https://developer.mozilla.org/en-US/docs/Glossary/null" target="_blank" rel="noreferrer">null</a>（空值），<a href="https://developer.mozilla.org/en-US/docs/Glossary/undefined" target="_blank" rel="noreferrer">undefined</a>（未定义），<a href="https://developer.mozilla.org/en-US/docs/Glossary/symbol" target="_blank" rel="noreferrer">symbol</a></p><p>除了 null 和 undefined之外，所有基本类型都有其对应的包装对象</p><ul><li>String</li><li>Number</li><li>BigInt</li><li>Boolean</li><li>Symbol</li></ul><p>对象类型（Object types）</p><h3 id="number" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number" target="_blank" rel="noreferrer">Number</a> <a class="header-anchor" href="#number" aria-label="Permalink to &quot;[Number](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number)&quot;">​</a></h3><p>整数</p><ul><li>二进制整数以0b（或0B）开头，只能包含数字0和1。</li><li>八进制的整数以 0O或0o 开头，只能包括数字0-7。</li><li>十六进制整数以 0x或0X 开头，可以包含数字（0-9）和字母 a~f 或 A~F。</li></ul><p>浮点数：<code>[(+|-)][digits][.digits][(E|e)[(+|-)]digits]</code></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_constructor_number.asp" target="_blank" rel="noreferrer">constructor</a></td><td>返回对创建此对象的 Number 函数的引用。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_max_value.asp" target="_blank" rel="noreferrer">MAX_VALUE</a></td><td>可表示的最大的数。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_min_value.asp" target="_blank" rel="noreferrer">MIN_VALUE</a></td><td>可表示的最小的数。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_nan_number.asp" target="_blank" rel="noreferrer">NaN</a></td><td>非数字值。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_negative_infinity.asp" target="_blank" rel="noreferrer">NEGATIVE_INFINITY</a></td><td>负无穷大，溢出时返回该值。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_positive_infinity.asp" target="_blank" rel="noreferrer">POSITIVE_INFINITY</a></td><td>正无穷大，溢出时返回该值。</td></tr><tr><td>EPSILON</td><td>极小的常量，表示 1 与大于 1 的最小浮点数之间的差</td></tr><tr><td>MIN_SAFE_INTEGER</td><td>最小的安全整数 (-(2^53 - 1))</td></tr><tr><td>MAX_SAFE_INTEGER</td><td>最大的安全整数（2^53 - 1）</td></tr></tbody></table><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#61AFEF;">isNaN</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat" target="_blank" rel="noreferrer">Number.parseFloat()</a></td><td>把字符串参数解析成浮点数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt" target="_blank" rel="noreferrer">Number.parseInt()</a></td><td>把字符串解析成特定基数对应的整型数字</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite" target="_blank" rel="noreferrer">Number.isFinite()</a></td><td>判断传递的值是否为有限数字。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger" target="_blank" rel="noreferrer">Number.isInteger()</a></td><td>判断传递的值是否为整数。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN" target="_blank" rel="noreferrer">Number.isNaN()</a></td><td>判断传递的值是否为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="noreferrer">NaN.</a></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger" target="_blank" rel="noreferrer">Number.isSafeInteger()</a></td><td>判断传递的值是否为安全整数。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_tostring_number.asp" target="_blank" rel="noreferrer">toString</a></td><td>把数字转换为字符串，使用指定的基数。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_tolocalestring_number.asp" target="_blank" rel="noreferrer">toLocaleString</a></td><td>把数字转换为字符串，使用本地数字格式顺序。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_tofixed.asp" target="_blank" rel="noreferrer">toFixed</a></td><td>把数字转换为字符串，结果的小数点后有指定位数的数字。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_toexponential.asp" target="_blank" rel="noreferrer">toExponential</a></td><td>把对象的值转换为指数计数法。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_toprecision.asp" target="_blank" rel="noreferrer">toPrecision</a></td><td>把数字格式化为指定的长度。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_valueof_number.asp" target="_blank" rel="noreferrer">valueOf</a></td><td>返回一个 Number 对象的基本数字值。</td></tr></tbody></table><p>自定义方法</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">Number</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">[</span><span style="color:#98C379;">&#39;add&#39;</span><span style="color:#ABB2BF;">](</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 10</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">8</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="bigint" tabindex="-1">BigInt <a class="header-anchor" href="#bigint" aria-label="Permalink to &quot;BigInt&quot;">​</a></h4><p>表示整数，没有位数的限制，任何位数的整数都可以精确表示 <br> 可以使用各种进制表示，都要加上<strong>后缀n</strong> <br> 不能使用正号（+），为了不破坏 asm.js 就规定+1n会报错</p><ul><li>BigInt.prototype.toString()</li><li>BigInt.prototype.valueOf()</li><li>BigInt.prototype.toLocaleString()</li><li>BigInt.asUintN(width, BigInt)： 给定的 BigInt 转为 0 到 2^width - 1 之间对应的值。</li><li>BigInt.asIntN(width, BigInt)：给定的 BigInt 转为 -2^width - 1 到 2^width - 1 - 1 之间对应的值。</li><li>BigInt.parseInt(string[, radix])：将一个字符串转换成指定进制的 BigInt。</li></ul><h3 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h3><p>字符串：以单引号&#39;或双引号&quot;括起来的任意文本，不可变的（immutable） <br> Unicode 表示法</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\u{20BB7}</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &quot;𠮷&quot;</span></span>
<span class="line"><span style="color:#98C379;">&quot;</span><span style="color:#56B6C2;">\\u{41}\\u{42}\\u{43}</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &quot;ABC&quot;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">hello</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">hell</span><span style="color:#ABB2BF;">\\</span><span style="color:#E06C75;">u</span><span style="color:#ABB2BF;">{6</span><span style="color:#E5C07B;">F</span><span style="color:#ABB2BF;">} </span><span style="color:#7F848E;font-style:italic;">// 123</span></span>
<span class="line"><span style="color:#98C379;">&#39;</span><span style="color:#56B6C2;">\\u{1F680}</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;</span><span style="color:#56B6C2;">\\uD83D\\uDE80</span><span style="color:#98C379;">&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>多行模板字符串</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">\` Hi </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">expression</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">.</span></span>
<span class="line"><span style="color:#98C379;"> What&#39;s up? \`</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>标签模板（tagged template） 函数调用的一种特殊形式</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">alert</span><span style="color:#98C379;">\`hello\`</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等同于</span></span>
<span class="line"><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#98C379;">.</span><span style="color:#61AFEF;">raw</span><span style="color:#98C379;">\`Hi</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">n\`</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Hi</span><span style="color:#56B6C2;">\\\\\\\\</span><span style="color:#98C379;">n&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>constructor</td><td>对创建该对象的函数的引用</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_length_string.asp" target="_blank" rel="noreferrer">length</a></td><td>字符串的长度</td></tr><tr><td>prototype</td><td>允许您向对象添加属性和方法</td></tr></tbody></table><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt" target="_blank" rel="noreferrer">charAt</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt" target="_blank" rel="noreferrer">charCodeAt</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt" target="_blank" rel="noreferrer">codePointAt</a></td><td>返回字符串指定位置的字符或者字符编码。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf" target="_blank" rel="noreferrer">indexOf</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf" target="_blank" rel="noreferrer">lastIndexOf</a></td><td>分别返回字符串中指定子串的位置或最后位置。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith" target="_blank" rel="noreferrer">startsWith</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith" target="_blank" rel="noreferrer">endsWith</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/includes" target="_blank" rel="noreferrer">includes</a></td><td>返回字符串是否以指定字符串开始、结束或包含指定字符串。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/concat" target="_blank" rel="noreferrer">concat</a></td><td>连接两个字符串并返回新的字符串。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode" target="_blank" rel="noreferrer">fromCharCode</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint" target="_blank" rel="noreferrer">fromCodePoint</a></td><td>从指定的Unicode值序列构造一个字符串。String类方法</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="noreferrer">split</a></td><td>通过将字符串分离成一个个子串来把一个String对象分裂到一个字符串数组中。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/slice" target="_blank" rel="noreferrer">slice</a></td><td>从一个字符串提取片段并作为新字符串返回。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring" target="_blank" rel="noreferrer">substring</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substr" target="_blank" rel="noreferrer">substr</a></td><td>分别通过指定起始和结束位置，起始位置和长度来返回字符串的指定子集。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match" target="_blank" rel="noreferrer">match</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noreferrer">replace</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search" target="_blank" rel="noreferrer">search</a></td><td>通过正则表达式来工作.</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase" target="_blank" rel="noreferrer">toLowerCase</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase" target="_blank" rel="noreferrer">toUpperCase</a></td><td>分别返回字符串的小写表示和大写表示。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/normalize" target="_blank" rel="noreferrer">normalize</a></td><td>按照指定的一种 Unicode 正规形式将当前字符串正规化。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/repeat" target="_blank" rel="noreferrer">repeat</a></td><td>将字符串内容重复指定次数后返回。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trim" target="_blank" rel="noreferrer">trim</a></td><td>去掉字符串开头和结尾的空白字符。</td></tr><tr><td><a href="https://wangdoc.com/es6/string-methods.html#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9Apadstart%EF%BC%8Cpadend" target="_blank" rel="noreferrer">padStart()，padEnd()</a></td><td>字符串补全长度的功能</td></tr><tr><td><a href="https://wangdoc.com/es6/string-methods.html#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9Atrimstart%EF%BC%8Ctrimend" target="_blank" rel="noreferrer">trimStart()，trimEnd()</a></td><td></td></tr><tr><td><a href="https://wangdoc.com/es6/string-methods.html#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9Amatchall" target="_blank" rel="noreferrer">matchAll()</a></td><td></td></tr><tr><td><a href="https://wangdoc.com/es6/string-methods.html#%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%EF%BC%9Areplaceall" target="_blank" rel="noreferrer">replaceAll()</a></td><td></td></tr></tbody></table><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-charcodeat.html" target="_blank" rel="noreferrer">charCodeAt()</a></td><td>返回在指定的位置的字符的 Unicode 编码。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-fromcharcode.html" target="_blank" rel="noreferrer">fromCharCode()</a></td><td>将 Unicode 编码转为字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-substr.html" target="_blank" rel="noreferrer">substr()</a></td><td>从起始索引号提取字符串中指定数目的字符。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-substring.html" target="_blank" rel="noreferrer">substring()</a></td><td>提取字符串中两个指定的索引号之间的字符。</td></tr></tbody></table><p><strong>HTML 包装方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-anchor.html" target="_blank" rel="noreferrer">anchor()</a></td><td>创建 HTML 锚。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-big.html" target="_blank" rel="noreferrer">big()</a></td><td>用大号字体显示字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-blink.html" target="_blank" rel="noreferrer">blink()</a></td><td>显示闪动字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-bold.html" target="_blank" rel="noreferrer">bold()</a></td><td>使用粗体显示字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-fixed.html" target="_blank" rel="noreferrer">fixed()</a></td><td>以打字机文本显示字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-fontcolor.html" target="_blank" rel="noreferrer">fontcolor()</a></td><td>使用指定的颜色来显示字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-fontsize.html" target="_blank" rel="noreferrer">fontsize()</a></td><td>使用指定的尺寸来显示字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-italics.html" target="_blank" rel="noreferrer">italics()</a></td><td>使用斜体显示字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-link.html" target="_blank" rel="noreferrer">link()</a></td><td>将字符串显示为链接。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-small.html" target="_blank" rel="noreferrer">small()</a></td><td>使用小字号来显示字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-strike.html" target="_blank" rel="noreferrer">strike()</a></td><td>用于显示加删除线的字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-sub.html" target="_blank" rel="noreferrer">sub()</a></td><td>把字符串显示为下标。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-sup.html" target="_blank" rel="noreferrer">sup()</a></td><td>把字符串显示为上标。</td></tr></tbody></table><h3 id="boolean" tabindex="-1">Boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to &quot;Boolean&quot;">​</a></h3><p>true，false</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_constructor_boolean.asp" target="_blank" rel="noreferrer">constructor</a></td><td>返回对创建此对象的 Boolean 函数的引用</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_prototype_boolean.asp" target="_blank" rel="noreferrer">prototype</a></td><td>使您有能力向对象添加属性和方法。</td></tr></tbody></table><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_tosource_boolean.asp" target="_blank" rel="noreferrer">toSource()</a></td><td>返回该对象的源代码。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_toString_boolean.asp" target="_blank" rel="noreferrer">toString()</a></td><td>把逻辑值转换为字符串，并返回结果。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_valueOf_boolean.asp" target="_blank" rel="noreferrer">valueOf()</a></td><td>返回 Boolean 对象的原始值。</td></tr></tbody></table><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">Boolean</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#61AFEF;">Boolean</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#61AFEF;">Boolean</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#61AFEF;">Boolean</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#61AFEF;">Boolean</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#61AFEF;">Boolean</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#61AFEF;">Boolean</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;false&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#61AFEF;">Boolean</span><span style="color:#ABB2BF;">([]) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#61AFEF;">Boolean</span><span style="color:#ABB2BF;">({}) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#61AFEF;">Boolean</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {}) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#61AFEF;">Boolean</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/foo/</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3.14</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;Hello&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">];  </span><span style="color:#7F848E;font-style:italic;">// 推荐</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Array</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3.14</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;Hello&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">myList</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;home&#39;</span><span style="color:#ABB2BF;">, , </span><span style="color:#98C379;">&#39;school&#39;</span><span style="color:#ABB2BF;">, , ]; </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//等同</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">myList</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;home&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;school&#39;</span><span style="color:#ABB2BF;">]; </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Array</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrayLength</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Array</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arrayLength</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等同</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [];</span></span>
<span class="line"><span style="color:#E5C07B;">arr</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arrayLength</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, ...[</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">], </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 1 2 3 4 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_constructor_array.asp" target="_blank" rel="noreferrer">constructor</a></td><td>返回对创建此对象的数组函数的引用。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_length_array.asp" target="_blank" rel="noreferrer">length</a></td><td>设置或返回数组中元素的数目。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_prototype_array.asp" target="_blank" rel="noreferrer">prototype</a></td><td>使您有能力向对象添加属性和方法。</td></tr></tbody></table><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/jsref/jsref-concat-array.html" target="_blank" rel="noreferrer">concat()</a></td><td>连接两个或更多的数组，并返回结果。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-copywithin.html" target="_blank" rel="noreferrer">copyWithin()</a></td><td>从数组的指定位置拷贝元素到数组的另一个指定位置中。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-entries.html" target="_blank" rel="noreferrer">entries()</a></td><td>返回数组的可迭代对象。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-every.html" target="_blank" rel="noreferrer">every()</a></td><td>检测数值元素的每个元素是否都符合条件。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-fill.html" target="_blank" rel="noreferrer">fill()</a></td><td>使用一个固定值来填充数组。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-filter.html" target="_blank" rel="noreferrer">filter()</a></td><td>检测数值元素，并返回符合条件所有元素的数组。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-find.html" target="_blank" rel="noreferrer">find()</a></td><td>返回符合传入测试（函数）条件的数组元素。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-findindex.html" target="_blank" rel="noreferrer">findIndex()</a></td><td>返回符合传入测试（函数）条件的数组元素索引。</td></tr><tr><td>flat()</td><td>将嵌套的数组“拉平”，变成一维的数组</td></tr><tr><td>flatMap()</td><td>对原数组的每个成员执行一个函数</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-foreach.html" target="_blank" rel="noreferrer">forEach()</a></td><td>数组每个元素都执行一次回调函数。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-from.html" target="_blank" rel="noreferrer">from()</a></td><td>通过给定的对象中创建一个数组。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-includes.html" target="_blank" rel="noreferrer">includes()</a></td><td>判断一个数组是否包含一个指定的值。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-indexof-array.html" target="_blank" rel="noreferrer">indexOf()</a></td><td>搜索数组中的元素，并返回它所在的位置。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-isarray.html" target="_blank" rel="noreferrer">isArray()</a></td><td>判断对象是否为数组。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-join.html" target="_blank" rel="noreferrer">join()</a></td><td>把数组的所有元素放入一个字符串。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-keys.html" target="_blank" rel="noreferrer">keys()</a></td><td>返回数组的可迭代对象，包含原始数组的键(key)。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-lastindexof-array.html" target="_blank" rel="noreferrer">lastIndexOf()</a></td><td>搜索数组中的元素，并返回它最后出现的位置。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-map.html" target="_blank" rel="noreferrer">map()</a></td><td>通过指定函数处理数组的每个元素，并返回处理后的数组。</td></tr><tr><td>of()</td><td>将一组值，转换为数组</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-pop.html" target="_blank" rel="noreferrer">pop()</a></td><td>删除数组的最后一个元素并返回删除的元素。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-push.html" target="_blank" rel="noreferrer">push()</a></td><td>向数组的末尾添加一个或更多元素，并返回新的长度。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-reduce.html" target="_blank" rel="noreferrer">reduce()</a></td><td>将数组元素计算为一个值（从左到右）。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-reduceright.html" target="_blank" rel="noreferrer">reduceRight()</a></td><td>将数组元素计算为一个值（从右到左）。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-reverse.html" target="_blank" rel="noreferrer">reverse()</a></td><td>反转数组的元素顺序。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-shift.html" target="_blank" rel="noreferrer">shift()</a></td><td>删除并返回数组的第一个元素。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-slice-array.html" target="_blank" rel="noreferrer">slice()</a></td><td>选取数组的一部分，并返回一个新数组。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-some.html" target="_blank" rel="noreferrer">some()</a></td><td>检测数组元素中是否有元素符合指定条件。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-sort.html" target="_blank" rel="noreferrer">sort()</a></td><td>对数组的元素进行排序。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-splice.html" target="_blank" rel="noreferrer">splice()</a></td><td>从数组中添加或删除元素。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-tostring-array.html" target="_blank" rel="noreferrer">toString()</a></td><td>把数组转换为字符串，并返回结果。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-unshift.html" target="_blank" rel="noreferrer">unshift()</a></td><td>向数组的开头添加一个或更多元素，并返回新的长度。</td></tr><tr><td><a href="https://www.runoob.com/jsref/jsref-valueof-array.html" target="_blank" rel="noreferrer">valueOf()</a></td><td>返回数组对象的原始值。</td></tr></tbody></table><p>排序示例</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">origin</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [...];</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">list</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">origin</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">slice</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sort</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;">{</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]</span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">?</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]</span><span style="color:#56B6C2;">-</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]</span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">?</span><span style="color:#D19A66;">1</span><span style="color:#C678DD;">:</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;});</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">( </span><span style="color:#E5C07B;">origin</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;">==</span><span style="color:#E5C07B;">list</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">() );</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>array.forEach(function(currentValue [, index, arr]) [, thisValue])</p><h3 id="date" tabindex="-1">Date <a class="header-anchor" href="#date" aria-label="Permalink to &quot;Date&quot;">​</a></h3><p>以国际标准时间（UTC）1970年1月1日00:00:00作为时间的零点，可以表示的时间范围是前后各1亿天（单位为毫秒） <br> Date对象月份值从0开始</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_constructor_date.asp" target="_blank" rel="noreferrer">constructor</a></td><td>返回对创建此对象的 Date 函数的引用。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_prototype_date.asp" target="_blank" rel="noreferrer">prototype</a></td><td>使您有能力向对象添加属性和方法。</td></tr></tbody></table><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_Date.asp" target="_blank" rel="noreferrer">Date()</a></td><td>返回当日的日期和时间。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getDate.asp" target="_blank" rel="noreferrer">getDate()</a></td><td>从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getDay.asp" target="_blank" rel="noreferrer">getDay()</a></td><td>从 Date 对象返回一周中的某一天 (0 ~ 6)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getMonth.asp" target="_blank" rel="noreferrer">getMonth()</a></td><td>从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getFullYear.asp" target="_blank" rel="noreferrer">getFullYear()</a></td><td>从 Date 对象以四位数字返回年份。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getHours.asp" target="_blank" rel="noreferrer">getHours()</a></td><td>返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getMinutes.asp" target="_blank" rel="noreferrer">getMinutes()</a></td><td>返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getSeconds.asp" target="_blank" rel="noreferrer">getSeconds()</a></td><td>返回 Date 对象的秒数 (0 ~ 59)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getMilliseconds.asp" target="_blank" rel="noreferrer">getMilliseconds()</a></td><td>返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getTime.asp" target="_blank" rel="noreferrer">getTime()</a></td><td>返回 1970 年 1 月 1 日至今的毫秒数。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getTimezoneOffset.asp" target="_blank" rel="noreferrer">getTimezoneOffset()</a></td><td>返回本地时间与格林威治标准时间 (GMT) 的分钟差。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCDate.asp" target="_blank" rel="noreferrer">getUTCDate()</a></td><td>根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCDay.asp" target="_blank" rel="noreferrer">getUTCDay()</a></td><td>根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCMonth.asp" target="_blank" rel="noreferrer">getUTCMonth()</a></td><td>根据世界时从 Date 对象返回月份 (0 ~ 11)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCFullYear.asp" target="_blank" rel="noreferrer">getUTCFullYear()</a></td><td>根据世界时从 Date 对象返回四位数的年份。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCHours.asp" target="_blank" rel="noreferrer">getUTCHours()</a></td><td>根据世界时返回 Date 对象的小时 (0 ~ 23)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCMinutes.asp" target="_blank" rel="noreferrer">getUTCMinutes()</a></td><td>根据世界时返回 Date 对象的分钟 (0 ~ 59)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCSeconds.asp" target="_blank" rel="noreferrer">getUTCSeconds()</a></td><td>根据世界时返回 Date 对象的秒钟 (0 ~ 59)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getUTCMilliseconds.asp" target="_blank" rel="noreferrer">getUTCMilliseconds()</a></td><td>根据世界时返回 Date 对象的毫秒(0 ~ 999)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_parse.asp" target="_blank" rel="noreferrer">parse()</a></td><td>返回1970年1月1日午夜到指定日期（字符串）的毫秒数。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_setDate.asp" target="_blank" rel="noreferrer">setDate()</a></td><td>设置 Date 对象中月的某一天 (1 ~ 31)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_setMonth.asp" target="_blank" rel="noreferrer">setMonth()</a></td><td>设置 Date 对象中月份 (0 ~ 11)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_setFullYear.asp" target="_blank" rel="noreferrer">setFullYear()</a></td><td>设置 Date 对象中的年份（四位数字）。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_setHours.asp" target="_blank" rel="noreferrer">setHours()</a></td><td>设置 Date 对象中的小时 (0 ~ 23)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_setMinutes.asp" target="_blank" rel="noreferrer">setMinutes()</a></td><td>设置 Date 对象中的分钟 (0 ~ 59)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_setSeconds.asp" target="_blank" rel="noreferrer">setSeconds()</a></td><td>设置 Date 对象中的秒钟 (0 ~ 59)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_setMilliseconds.asp" target="_blank" rel="noreferrer">setMilliseconds()</a></td><td>设置 Date 对象中的毫秒 (0 ~ 999)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_setTime.asp" target="_blank" rel="noreferrer">setTime()</a></td><td>以毫秒设置 Date 对象。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_setUTCDate.asp" target="_blank" rel="noreferrer">setUTCDate()</a></td><td>根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_setUTCMonth.asp" target="_blank" rel="noreferrer">setUTCMonth()</a></td><td>根据世界时设置 Date 对象中的月份 (0 ~ 11)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_setUTCFullYear.asp" target="_blank" rel="noreferrer">setUTCFullYear()</a></td><td>根据世界时设置 Date 对象中的年份（四位数字）。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_setutchours.asp" target="_blank" rel="noreferrer">setUTCHours()</a></td><td>根据世界时设置 Date 对象中的小时 (0 ~ 23)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_setUTCMinutes.asp" target="_blank" rel="noreferrer">setUTCMinutes()</a></td><td>根据世界时设置 Date 对象中的分钟 (0 ~ 59)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_setUTCSeconds.asp" target="_blank" rel="noreferrer">setUTCSeconds()</a></td><td>根据世界时设置 Date 对象中的秒钟 (0 ~ 59)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_setUTCMilliseconds.asp" target="_blank" rel="noreferrer">setUTCMilliseconds()</a></td><td>根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_tosource_boolean.asp" target="_blank" rel="noreferrer">toSource()</a></td><td>返回该对象的源代码。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_toString_date.asp" target="_blank" rel="noreferrer">toString()</a></td><td>把 Date 对象转换为字符串。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_toTimeString.asp" target="_blank" rel="noreferrer">toTimeString()</a></td><td>把 Date 对象的时间部分转换为字符串。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_toDateString.asp" target="_blank" rel="noreferrer">toDateString()</a></td><td>把 Date 对象的日期部分转换为字符串。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_toUTCString.asp" target="_blank" rel="noreferrer">toUTCString()</a></td><td>根据世界时，把 Date 对象转换为字符串。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_toLocaleString.asp" target="_blank" rel="noreferrer">toLocaleString()</a></td><td>根据本地时间格式，把 Date 对象转换为字符串。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_toLocaleTimeString.asp" target="_blank" rel="noreferrer">toLocaleTimeString()</a></td><td>根据本地时间格式，把 Date 对象的时间部分转换为字符串。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_toLocaleDateString.asp" target="_blank" rel="noreferrer">toLocaleDateString()</a></td><td>根据本地时间格式，把 Date 对象的日期部分转换为字符串。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_utc.asp" target="_blank" rel="noreferrer">UTC()</a></td><td>根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_valueOf_date.asp" target="_blank" rel="noreferrer">valueOf()</a></td><td>返回 Date 对象的原始值。</td></tr></tbody></table><h3 id="regexp" tabindex="-1">RegExp <a class="header-anchor" href="#regexp" aria-label="Permalink to &quot;RegExp&quot;">​</a></h3><ul><li>直接量语法：/pattern/flags</li><li>创建 RegExp 对象的语法：new RegExp(pattern, flags);</li></ul><p>pattern ：一个字符串，指定了正则表达式的模式或其他正则表达式。 <br> flags ：一个可选的字符串，包含修饰符</p><table><thead><tr><th>修饰符</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_regexp_i.asp" target="_blank" rel="noreferrer">i</a></td><td>不区分大小写搜索</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_regexp_g.asp" target="_blank" rel="noreferrer">g</a></td><td>全局搜索</td></tr><tr><td>m</td><td>多行搜索</td></tr><tr><td>u</td><td>Unicode 模式，用来正确处理大于\\uFFFF的 Unicode 字符</td></tr><tr><td>y</td><td>粘连”（sticky）修饰符</td></tr><tr><td>s</td><td>允许 . 匹配换行符</td></tr></tbody></table><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_regexp_global.asp" target="_blank" rel="noreferrer">global</a></td><td>RegExp 对象是否具有标志 g。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_regexp_ignorecase.asp" target="_blank" rel="noreferrer">ignoreCase</a></td><td>RegExp 对象是否具有标志 i。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_lastindex_regexp.asp" target="_blank" rel="noreferrer">lastIndex</a></td><td>一个整数，标示开始下一次匹配的字符位置。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_multiline_regexp.asp" target="_blank" rel="noreferrer">multiline</a></td><td>RegExp 对象是否具有标志 m。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_source_regexp.asp" target="_blank" rel="noreferrer">source</a></td><td>正则表达式的源文本。</td></tr><tr><td>flags</td><td>包含了已经设置的所有修饰符，按字母排序</td></tr><tr><td>unicode</td><td>是否设置了u修饰符</td></tr><tr><td>sticky</td><td>是否设置了y修饰符</td></tr></tbody></table><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec" target="_blank" rel="noreferrer">exec</a></td><td>查找匹配的RegExp方法，返回一个数组（未匹配到则返回 null）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test" target="_blank" rel="noreferrer">test</a></td><td>测试是否匹配的RegExp方法，返回 true 或 false。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match" target="_blank" rel="noreferrer">match</a></td><td>一个在字符串中执行查找匹配的String方法，它返回一个数组或 null</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll" target="_blank" rel="noreferrer">matchAll</a></td><td>查找所有匹配的String方法，返回一个迭代器（iterator）。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search" target="_blank" rel="noreferrer">search</a></td><td>一个在字符串中测试匹配的String方法，返回匹配到的位置索引，或-1。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noreferrer">replace</a></td><td>使用替换字符串替换掉匹配到的子字符串。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="noreferrer">split</a></td><td>分隔一个字符串</td></tr></tbody></table><p>具名组匹配（Named Capture Groups）</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">RE_DATE</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /(?&lt;year&gt;\\d</span><span style="color:#D19A66;">{4}</span><span style="color:#E06C75;">)-(?&lt;month&gt;\\d</span><span style="color:#D19A66;">{2}</span><span style="color:#E06C75;">)-(?&lt;day&gt;\\d</span><span style="color:#D19A66;">{2}</span><span style="color:#E06C75;">)/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">matchObj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">RE_DATE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exec</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;1999-12-31&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">year</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">matchObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">groups</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">year</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 1999</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">month</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">matchObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">groups</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">month</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 12</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">day</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">matchObj</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">groups</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">day</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 31</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">re</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /(?&lt;year&gt;\\d</span><span style="color:#D19A66;">{4}</span><span style="color:#E06C75;">)-(?&lt;month&gt;\\d</span><span style="color:#D19A66;">{2}</span><span style="color:#E06C75;">)-(?&lt;day&gt;\\d</span><span style="color:#D19A66;">{2}</span><span style="color:#E06C75;">)/</span><span style="color:#C678DD;">u</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#98C379;">&#39;2015-01-02&#39;</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">re</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// &#39;02/01/2015&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在正则表达式内部引用某个“具名组匹配”  使用\\k&lt;组名&gt;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">RE_TWICE</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#E06C75;">(?&lt;word&gt;</span><span style="color:#D19A66;">[a-z]+</span><span style="color:#E06C75;">)!</span><span style="color:#C678DD;">\\k&lt;</span><span style="color:#E06C75;">word</span><span style="color:#C678DD;">&gt;</span><span style="color:#E06C75;">!</span><span style="color:#C678DD;">\\1$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">RE_TWICE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;abc!abc!abc&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">RE_TWICE</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;abc!abc!ab&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>\\p{...} \\P{...} 匹配符合 Unicode 某种属性的所有字符</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 匹配所有空格</span></span>
<span class="line"><span style="color:#ABB2BF;">\\</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">White_Space</span><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w</span></span>
<span class="line"><span style="color:#ABB2BF;">[\\</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">Alphabetic</span><span style="color:#ABB2BF;">}\\</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">Mark</span><span style="color:#ABB2BF;">}\\</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">Decimal_Number</span><span style="color:#ABB2BF;">}\\</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">Connector_Punctuation</span><span style="color:#ABB2BF;">}\\</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">Join_Control</span><span style="color:#ABB2BF;">}]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#56B6C2;">^</span><span style="color:#ABB2BF;">\\</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">Alphabetic</span><span style="color:#ABB2BF;">}\\</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">Mark</span><span style="color:#ABB2BF;">}\\</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">Decimal_Number</span><span style="color:#ABB2BF;">}\\</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">Connector_Punctuation</span><span style="color:#ABB2BF;">}\\</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">Join_Control</span><span style="color:#ABB2BF;">}]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 匹配 Emoji</span></span>
<span class="line"><span style="color:#E06C75;">/</span><span style="color:#56B6C2;">\\p</span><span style="color:#E06C75;">{Emoji_Modifier_Base}</span><span style="color:#56B6C2;">\\p</span><span style="color:#E06C75;">{Emoji_Modifier}</span><span style="color:#D19A66;">?</span><span style="color:#ABB2BF;">|</span><span style="color:#56B6C2;">\\p</span><span style="color:#E06C75;">{Emoji_Presentation}</span><span style="color:#ABB2BF;">|</span><span style="color:#56B6C2;">\\p</span><span style="color:#E06C75;">{Emoji}</span><span style="color:#D19A66;">\\uFE0F</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">gu</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 匹配所有的箭头字符</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">regexArrows</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> /</span><span style="color:#C678DD;">^</span><span style="color:#56B6C2;">\\p</span><span style="color:#E06C75;">{Block=Arrows}</span><span style="color:#D19A66;">+</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#C678DD;">u</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">regexArrows</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">test</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}  </span><span style="color:#7F848E;font-style:italic;">// 推荐</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Object</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">isObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Object</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);    </span><span style="color:#7F848E;font-style:italic;">// Object()函数</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">isObject</span><span style="color:#ABB2BF;">([]) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#61AFEF;">isObject</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>属性描述对象（attributes object）</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  value: </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">,	</span><span style="color:#E06C75;">属性值</span></span>
<span class="line"><span style="color:#ABB2BF;">  writable: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,		</span><span style="color:#E06C75;">否可写</span></span>
<span class="line"><span style="color:#ABB2BF;">  enumerable: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,	</span><span style="color:#E06C75;">是否可遍历</span></span>
<span class="line"><span style="color:#ABB2BF;">  configurable: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,	</span><span style="color:#E06C75;">可配置性</span></span>
<span class="line"><span style="color:#ABB2BF;">  get: </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">,		</span><span style="color:#E06C75;">属性的取值函数</span><span style="color:#ABB2BF;">（</span><span style="color:#E06C75;">getter</span><span style="color:#ABB2BF;">）</span></span>
<span class="line"><span style="color:#ABB2BF;">  set: </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">属性的存值函数</span><span style="color:#ABB2BF;">（</span><span style="color:#E06C75;">setter</span><span style="color:#ABB2BF;">）</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>静态方法</strong></p><ul><li><p><strong>静态方法</strong></p></li><li><p>遍历对象的属性</p><ul><li>Object.keys() 返回可枚举的自身的（而不是继承的）所有属性名</li><li>Object.getOwnPropertyNames() 返回所有自身的（而不是继承的）属性名</li><li>Object.values()：返回对象自身的（不含继承的）所有可遍历（enumerable）属性的键值</li><li>Object.entries()：返回对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。</li><li>Object.fromEntries()：Object.entries()的逆操作，用于将一个键值对数组转为对象</li></ul></li><li><p>对象属性模型的方法</p><ul><li>Object.getOwnPropertyDescriptor()：获取某个属性的描述对象。</li><li>Object.getOwnPropertyDescriptors()：返回指定对象所有自身属性（非继承属性）的描述对象</li><li>Object.defineProperty(object, propertyName, attributesObject)：通过描述对象，定义某个属性。</li><li>Object.defineProperties()：通过描述对象，定义多个属性。</li></ul></li><li><p>控制对象状态的方法</p><ul><li>Object.preventExtensions()：防止对象扩展，使对象无法再添加新的属性</li><li>Object.isExtensible()：判断对象是否可扩展。</li><li>Object.seal()：禁止对象配置。使对象既无法添加新属性，也无法删除旧属性。实质是把属性的configurable设为false</li><li>Object.isSealed()：判断一个对象是否可配置。</li><li>Object.freeze()：冻结一个对象。使对象无法添加或删除属性、也无法改变属性的值，对象实际上变成了常量。</li><li>Object.isFrozen()：判断一个对象是否被冻结。</li></ul></li></ul><p>方法局限性</p><ul><li><p>可以通过改变原型对象，来为对象增加属性。</p></li><li><p>只能冻结属性指向的对象，而不能冻结对象本身的内容</p></li><li><p>原型链相关方法</p><ul><li>Object.create()：指定原型对象和属性，返回一个新的对象。</li><li>Object.getPrototypeOf()：获取对象的Prototype对象。</li><li>Object.setPrototypeOf(a, b) 将对象a的原型，设置为对象b</li></ul></li><li><p>Object.is()：比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致</p></li><li><p>Object.assign()：对象合并，将源对象（source）的所有可枚举属性，复制（浅拷贝，同名属性的替换）到目标对象（target）</p></li></ul><p>**实例方法 **定义在Object原型对象Object.prototype上的方法</p><ul><li>Object.prototype.valueOf()：返回当前对象对应的值。</li><li>Object.prototype.toString()：返回当前对象对应的字符串形式。</li><li>Object.prototype.toLocaleString()：返回当前对象对应的本地字符串形式。</li><li>Object.prototype.hasOwnProperty()：判断某个属性是否为当前对象自身的属性，还是继承自原型对象的属性。</li><li>Object.prototype.isPrototypeOf()：判断当前对象是否为另一个对象的原型。</li><li>Object.prototype.propertyIsEnumerable()：判断某个属性是否可枚举。</li><li>Object.prototype.<strong>proto</strong>：用来读取或设置当前对象的原型对象（prototype），浏览器特有</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">is</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Object</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">valueOf</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 3</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39; &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;world&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// &quot;hello world&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><strong>存取器（accessor）</strong> <br> 取值函数get不能接受参数，存值函数set只能接受一个参数</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 写法一：属性p的configurable和enumerable都为false</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">({}, </span><span style="color:#98C379;">&#39;p&#39;</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;getter&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;setter: &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 写法二：属性p的configurable和enumerable都为true，更常用</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">get</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">p</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;getter&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">set</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">p</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;setter: &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// &quot;getter&quot;</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// &quot;setter: 123&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>原型链”（prototype chain）：对象到原型，再到原型的原型…… <br> Object.prototype --&gt; null</p><p>prototype <br> constructor：默认指向prototype对象所在的构造函数。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">P</span><span style="color:#ABB2BF;">() {}</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">P</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">P</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">p</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;constructor&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="oop" tabindex="-1">OOP <a class="header-anchor" href="#oop" aria-label="Permalink to &quot;OOP&quot;">​</a></h2><p>构造函数</p><ul><li>函数内使用了<code>this</code>关键字，代表了所要生成的对象实例。</li><li>生成对象须使用<code>new</code>命令。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Student</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">grade</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">grade</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">grade</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 默认值为0</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hello</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">alert</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Hello, &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Student</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;jack&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//为对象构造器添加新属性</span></span>
<span class="line"><span style="color:#E5C07B;">Student</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">nationality</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;English&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果构造函数内部有return语句，且return后面跟着一个对象，new命令会返回return语句指定的对象；否则，返回this对象。</p><p><strong>new 命令的原理</strong></p><ol><li>创建一个空对象，作为将要返回的对象实例。</li><li>将这个空对象的原型，指向构造函数的prototype属性。</li><li>将这个空对象赋值给函数内部的this关键字。</li><li>开始执行构造函数内部的代码。</li></ol><p>new.target 如果当前函数是new命令调用，new.target指向当前函数，否则为undefined</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;请使用 new 命令调用！&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">f</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// Uncaught Error: 请使用 new 命令调用！</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>创建对象</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E06C75;">birth</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1990</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 字面量法——推荐</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">firstName</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;Bill&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    [</span><span style="color:#98C379;">&#39;last&#39;</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> </span><span style="color:#98C379;">&#39;Name&#39;</span><span style="color:#ABB2BF;">]:</span><span style="color:#98C379;">&quot;Gates&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">birth</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">tags</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;js&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;web&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;mobile&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;has-Car&#39;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">   </span><span style="color:#7F848E;font-style:italic;">// 属性名包含特殊字符，必用&#39;&#39;括起来</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">fullName</span><span style="color:#ABB2BF;"> : </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">firstName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; &quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">lastName</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">age</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">      return new </span><span style="color:#61AFEF;">Date</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getFullYear</span><span style="color:#ABB2BF;">() - this.birth;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 通过new</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Object</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">firstName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Bill&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">lastName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Gates&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>访问属性</p><ul><li>objectName.property // person.age</li><li>objectName[&quot;property&quot;] // person[&quot;age&quot;]</li><li>objectName[expression] // x = &quot;age&quot;; person[x]</li></ul><p>访问属性方法没有使用 ()，则将返回其定义</p><p>对象的拷贝</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">extend</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">to</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">from</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">in</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">from</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hasOwnProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;">)) </span><span style="color:#C678DD;">continue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOwnPropertyDescriptor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">from</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">property</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">to</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ES2017</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">copyObject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">orig</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPrototypeOf</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">orig</span><span style="color:#ABB2BF;">),</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOwnPropertyDescriptors</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">orig</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="class" tabindex="-1">class <a class="header-anchor" href="#class" aria-label="Permalink to &quot;class&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">toValue</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等同于</span></span>
<span class="line"><span style="color:#E5C07B;">Point</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">constructor</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">toString</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">toValue</span><span style="color:#ABB2BF;">() {},</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h3><p><strong>自定义原型继承</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">inherits</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">Child</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">Parent</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">F</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {};</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">F</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Parent</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">Child</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">F</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">Child</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Child</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>class继承</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Foo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">grade</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;font-style:italic;">super</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);   </span><span style="color:#7F848E;font-style:italic;">// 必须用super调用父类的构造方法!</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">grade</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">grade</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">classMethod</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Bar</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Foo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">classMethod</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;font-style:italic;">super</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">classMethod</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;, too&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Bar</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">classMethod</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">// &quot;hello, too&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>JavaScript 属性值的继承是在运行时通过检索对象的原型链来实现的。因为对象只有一个原型与之关联，所以 JavaScript 无法动态地从多个原型链中继承。</p><p><strong>Mixin（混入）</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">M1</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hello</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">M2</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">world</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;world&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">S</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">M1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">M2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 继承 M1</span></span>
<span class="line"><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">M1</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 继承链上加入 M2</span></span>
<span class="line"><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">assign</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">M2</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 指定构造函数</span></span>
<span class="line"><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">S</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">S</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">hello</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// &#39;hello&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">s</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">world</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// &#39;world&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mix</span><span style="color:#ABB2BF;">(...</span><span style="color:#E06C75;font-style:italic;">mixins</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Mix</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">mixin</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">mixins</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">copyProperties</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mixin</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// 拷贝实例属性</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">mixin</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">mixins</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">copyProperties</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Mix</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">mixin</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 拷贝静态属性</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">copyProperties</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Mix</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">mixin</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 拷贝原型属性</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Mix</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">copyProperties</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">source</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">ownKeys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> ( </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;constructor&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;prototype&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;name&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">desc</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOwnPropertyDescriptor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">source</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">defineProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">desc</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">DistributedEdit</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">extends</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">mix</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Loggable</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Serializable</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p><strong>singleton</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 类实现</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Singleton</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;benz&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">static</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getInstance</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">Singleton</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">Singleton</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Singleton</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Singleton</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Singleton</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInstance</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Singleton</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInstance</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">)      </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 闭包实现</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Singleton</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">SingletonTemp</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;benz&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">SingletonTemp</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">instance</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Singleton</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="流程控制" tabindex="-1">流程控制 <a class="header-anchor" href="#流程控制" aria-label="Permalink to &quot;流程控制&quot;">​</a></h2>`,125),r=s("ul",null,[s("li",null,"if - else"),s("li",{case:""},"switch"),s("li",null,"while | do···while"),s("li",null,"for ([initialExpression]; [condition]; [incrementExpression])"),s("li",null,"for (variable in object) 循环一个对象所有可枚举的属性"),s("li",null,"for (variable of object) （遍历iterable类型的集合）"),s("li",null,"break | continue [label]"),s("li",null,[s("s",null,"with (对象) {语句;}")])],-1),t=a(`<div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">p1</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">p2</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">with</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">p1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">p2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">p3</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">6</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 等同于</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">p1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">p2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">p3</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#E06C75;">p3</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 6</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="解构-destructuring-赋值" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noreferrer">解构（Destructuring）赋值</a> <a class="header-anchor" href="#解构-destructuring-赋值" aria-label="Permalink to &quot;[解构（Destructuring）赋值](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, , </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> [</span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, [</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">], </span><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">], </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 2</span></span>
<span class="line"><span style="color:#E06C75;">d</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 4</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">tail</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#E06C75;">tail</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// [2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">z</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// &quot;a&quot;</span></span>
<span class="line"><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#E06C75;">z</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//指定默认值</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;b&#39;</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">]; </span><span style="color:#7F848E;font-style:italic;">// x=&#39;a&#39;, y=&#39;b&#39;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">];    </span><span style="color:#7F848E;font-style:italic;">// x=2; y=2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 交换变量</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//变量必须与属性同名，才能取到正确的值</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;小明&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">age</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">gender</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;male&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">address</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;Beijing&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">street</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;No.1 Road&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">zipcode</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;100001&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">address</span><span style="color:#ABB2BF;">: {</span><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">zip</span><span style="color:#ABB2BF;">}} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &#39;小明&#39;</span></span>
<span class="line"><span style="color:#E06C75;">city</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// &#39;Beijing&#39;</span></span>
<span class="line"><span style="color:#E06C75;">zip</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#E06C75;">address</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// Uncaught ReferenceError: address is not defined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">original</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 浅拷贝</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">copy</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> { ...</span><span style="color:#E06C75;">original</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;"> }; </span><span style="color:#7F848E;font-style:italic;">// copy =&gt; { a: 1, b: 2, c: 3 }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// rest 赋值运算符</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E5C07B;">noA</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">copy</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// noA =&gt; { b: 2, c: 3 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 给新的变量名赋值</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">o</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">42</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">q</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">q</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">bar</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">o</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 给新的变量命名并提供默认值</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">aa</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">:</span><span style="color:#E06C75;">bb</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">} </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><p>只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//fibs是一个 Generator 函数，原生具有 Iterator 接口</span></span>
<span class="line"><span style="color:#C678DD;">function*</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fibs</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">yield</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    [</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">first</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">second</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">third</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fourth</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fifth</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sixth</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fibs</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">sixth</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="异常" tabindex="-1">异常 <a class="header-anchor" href="#异常" aria-label="Permalink to &quot;异常&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#7F848E;font-style:italic;">// 供测试的代码块</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">expression</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 抛出异常</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">[ </span><span style="color:#E06C75;">catch</span><span style="color:#ABB2BF;"> [</span><span style="color:#E06C75;">e</span><span style="color:#ABB2BF;">] {</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#7F848E;font-style:italic;">// 处理错误的代码块</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span></span>
<span class="line"><span style="color:#E06C75;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">     </span><span style="color:#7F848E;font-style:italic;">// 无论 try / catch 结果如何都执行的代码块</span></span>
<span class="line"><span style="color:#ABB2BF;">} ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>Error 对象属性</strong></p><ul><li>name 设置或返回错误名</li><li>message 设置或返回错误消息（一条字符串） | 错误名 | 描述 | | --- | --- | | EvalError | 已在 eval() 函数中发生的错误 | | RangeError | 已发生超出数字范围的错误 | | ReferenceError | 已发生非法引用 | | SyntaxError | 已发生语法错误 | | TypeError | 已发生类型错误 | | URIError | 在 encodeURI() 中已发生的错误 |</li></ul><p>自定义错误</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">UserError</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">message</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">message</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;默认信息&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;UserError&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">UserError</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Error</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">UserError</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">constructor</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">UserError</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">UserError</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;这是自定义的错误！&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="function" tabindex="-1">Function <a class="header-anchor" href="#function" aria-label="Permalink to &quot;Function&quot;">​</a></h2><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 函数声明（Function Declaration）</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> [</span><span style="color:#61AFEF;">functionName</span><span style="color:#ABB2BF;">](</span><span style="color:#E06C75;font-style:italic;">parameters</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#7F848E;font-style:italic;">//Code</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 函数表达式（Function Expression）</span></span>
<span class="line"><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">|</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">let</span><span style="color:#ABB2BF;">] </span><span style="color:#61AFEF;">functionName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">parameters</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#7F848E;font-style:italic;">//Code</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><table><thead><tr><th>属性/方法</th><th></th></tr></thead><tbody><tr><td>name</td><td>函数名</td></tr><tr><td>length</td><td>没有指定默认值的参数个数</td></tr><tr><td>toString()</td><td>返回一个字符串，内容是函数的源码</td></tr><tr><td>arguments</td><td>调用时函数的参数</td></tr><tr><td>caller</td><td>调用当前函数的那个函数</td></tr></tbody></table><p>关键字arguments，它只在函数内部起作用，并且指向当前函数的调用者传入的所有参数。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sumAll</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">115</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">44</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">88</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">sumAll</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">sum</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">sum</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">arguments</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">sum</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>默认参数 <br> <strong>可变参数</strong></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">a</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">b</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;font-style:italic;">rest</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;a = &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;b = &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">rest</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// a = 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// b = 2</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Array [ 3, 4, 5 ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">foo</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 结果:</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// a = 1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// b = undefined</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Array []</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="绑定-this" tabindex="-1">绑定 this <a class="header-anchor" href="#绑定-this" aria-label="Permalink to &quot;绑定 this&quot;">​</a></h3><p>指定函数内部this的指向（即函数执行时所在的作用域），然后在所指定的作用域中，调用该函数</p><ul><li>Function.prototype.call(thisValue, arg1, arg2, ...)：方法分别接受参数。</li><li>Function.prototype.apply(thisValue, [arg1, arg2, ...])： 方法接受数组形式的参数。</li><li>Function.prototype.bind() ：将函数体内的this绑定到某个对象，然后返回一个新函数</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">counter</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">inc</span><span style="color:#ABB2BF;">: </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">100</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">func</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">counter</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">inc</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">bind</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">func</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 101</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>自调用函数</strong> <br> 立即调用的函数表达式（Immediately-Invoked Function Expression，IIFE） <br> 圆括号()是一种运算符，跟在函数名之后，表示调用该函数</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Hello!!&quot;</span><span style="color:#ABB2BF;">;      </span><span style="color:#7F848E;font-style:italic;">//调用自身</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="闭包-closure" tabindex="-1">闭包（closure） <a class="header-anchor" href="#闭包-closure" aria-label="Permalink to &quot;闭包（closure）&quot;">​</a></h3><p>有权访问父作用域的函数，即使在父函数关闭之后</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">counter</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> () {</span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">counter</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;}</span></span>
<span class="line"><span style="color:#ABB2BF;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">();    </span><span style="color:#7F848E;font-style:italic;">// 计数器目前是 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="arrow-function-箭头函数" tabindex="-1">Arrow Function（箭头函数） <a class="header-anchor" href="#arrow-function-箭头函数" aria-label="Permalink to &quot;Arrow Function（箭头函数）&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">y</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> { </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">y</span><span style="color:#ABB2BF;"> };  </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// const x = (x, y) =&gt; x * y    如果函数是单个语句，则只能省略 return 关键字和大括号。</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>PS</p><ul><li>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</li><li>不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</li><li>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</li><li>不可以使用yield命令</li></ul><h3 id="iterator" tabindex="-1">Iterator <a class="header-anchor" href="#iterator" aria-label="Permalink to &quot;Iterator&quot;">​</a></h3><p>必须暴露一个属性作为“默认迭代器”，且使用特殊的 Symbol.iterator 作为键。这个默认迭代器属性必须引用一个迭代器工厂函数，调用这个工厂函数必须返回一个新迭代器。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">num</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">iterator</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可迭代对象</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&#39;foo&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;bar&#39;</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 迭代器工厂函数</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">iterator</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// f values() { [native code] }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 迭代器</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">iter</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arr</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">iterator</span><span style="color:#ABB2BF;">]();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">iter</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// ArrayIterator {}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 执行迭代</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// { done: false, value: &#39;foo&#39; }</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// { done: false, value: &#39;bar&#39; }</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">iter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()); </span><span style="color:#7F848E;font-style:italic;">// { done: true, value: undefined }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>实现可迭代接口（Iterable）</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Counter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">limit</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">limit</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">limit</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    [</span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">iterator</span><span style="color:#ABB2BF;">]() {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">limit</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">limit</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">limit</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#E06C75;">count</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">                } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">done</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;"> };</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        };</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="generator" tabindex="-1">Generator <a class="header-anchor" href="#generator" aria-label="Permalink to &quot;Generator&quot;">​</a></h3><p>function关键字与函数名之间有一个星号 <br> 函数体内部使用yield表达式，定义不同的内部状态</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">gen</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function*</span><span style="color:#ABB2BF;"> () {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">yield</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">yield</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">yield</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">myIterable</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#E06C75;">myIterable</span><span style="color:#ABB2BF;">[</span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">iterator</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">gen</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">[...</span><span style="color:#E06C75;">myIterable</span><span style="color:#ABB2BF;">] </span><span style="color:#7F848E;font-style:italic;">// [1, 2, 3]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Generator.prototype.return() 返回给定的值，并且终结遍历 Generator 函数</p><p>async函数：将 Generator 函数的星号（*）替换成async，将yield替换成await</p><ul><li>返回一个 Promise 对象。</li><li>内部return语句返回的值，会成为then方法回调函数的参数。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 指定 50 毫秒以后，输出hello world</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">timeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">ms</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">ms</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">asyncPrint</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">ms</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">timeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">ms</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">asyncPrint</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;hello world&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li><a href="https://wangdoc.com/es6/async-iterator.html#for-awaitof" target="_blank" rel="noreferrer">for await...of</a></li></ul><h3 id="math" tabindex="-1">Math <a class="header-anchor" href="#math" aria-label="Permalink to &quot;Math&quot;">​</a></h3><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_e.asp" target="_blank" rel="noreferrer">E</a></td><td>返回算术常量 e，即自然对数的底数（约等于2.718）。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_ln2.asp" target="_blank" rel="noreferrer">LN2</a></td><td>返回 2 的自然对数（约等于0.693）。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_ln10.asp" target="_blank" rel="noreferrer">LN10</a></td><td>返回 10 的自然对数（约等于2.302）。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_log2e.asp" target="_blank" rel="noreferrer">LOG2E</a></td><td>返回以 2 为底的 e 的对数（约等于 1.414）。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_log10e.asp" target="_blank" rel="noreferrer">LOG10E</a></td><td>返回以 10 为底的 e 的对数（约等于0.434）。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_pi.asp" target="_blank" rel="noreferrer">PI</a></td><td>返回圆周率（约等于3.14159）。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_sqrt1_2.asp" target="_blank" rel="noreferrer">SQRT1_2</a></td><td>返回返回 2 的平方根的倒数（约等于 0.707）。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_sqrt2.asp" target="_blank" rel="noreferrer">SQRT2</a></td><td>返回 2 的平方根（约等于 1.414）。</td></tr></tbody></table><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/abs" target="_blank" rel="noreferrer">abs()</a></td><td>绝对值</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sin" target="_blank" rel="noreferrer">sin()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/cos" target="_blank" rel="noreferrer">cos()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/tan" target="_blank" rel="noreferrer">tan()</a></td><td>标准三角函数;参数为弧度</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/asin" target="_blank" rel="noreferrer">asin()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/acos" target="_blank" rel="noreferrer">acos()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atan" target="_blank" rel="noreferrer">atan()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2" target="_blank" rel="noreferrer">atan2()</a></td><td>反三角函数; 返回值为弧度</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh" target="_blank" rel="noreferrer">sinh()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh" target="_blank" rel="noreferrer">cosh()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh" target="_blank" rel="noreferrer">tanh()</a></td><td>双曲三角函数; 参数为弧度.</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh" target="_blank" rel="noreferrer">asinh()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh" target="_blank" rel="noreferrer">acosh()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh" target="_blank" rel="noreferrer">atanh()</a></td><td>反双曲三角函数;返回值为弧度.</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/pow" target="_blank" rel="noreferrer">pow()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/exp" target="_blank" rel="noreferrer">exp()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1" target="_blank" rel="noreferrer">expm1()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log10" target="_blank" rel="noreferrer">log10()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p" target="_blank" rel="noreferrer">log1p()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log2" target="_blank" rel="noreferrer">log2()</a></td><td>指数与对数函数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/floor" target="_blank" rel="noreferrer">floor()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil" target="_blank" rel="noreferrer">ceil()</a></td><td>返回小于等于参数的最大整数；返回大于等于参数的最小整数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/min" target="_blank" rel="noreferrer">min()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max" target="_blank" rel="noreferrer">max()</a></td><td>返回一个以逗号间隔的数字参数列表中的较小或较大值(分别地)</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random" target="_blank" rel="noreferrer">random()</a></td><td>返回0和1之间的随机数。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/round" target="_blank" rel="noreferrer">round()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/fround" target="_blank" rel="noreferrer">fround()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc" target="_blank" rel="noreferrer">trunc()</a>,</td><td>四舍五入和截断函数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt" target="_blank" rel="noreferrer">sqrt()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt" target="_blank" rel="noreferrer">cbrt()</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot" target="_blank" rel="noreferrer">hypot()</a></td><td>平方根，立方根，所有参数平方和的平方根 <br> 两个参数平方和的平方根</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sign" target="_blank" rel="noreferrer">sign()</a></td><td>数字的符号, 说明数字是否为正、负、零。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32" target="_blank" rel="noreferrer">clz32()</a>, <br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32" target="_blank" rel="noreferrer">imul()</a></td><td>在32位2进制表示中，开头的0的数量. <br> 返回传入的两个参数相乘结果的类C的32位_表现形式_</td></tr></tbody></table><h3 id="顶层函数-全局函数" tabindex="-1">顶层函数（全局函数） <a class="header-anchor" href="#顶层函数-全局函数" aria-label="Permalink to &quot;顶层函数（全局函数）&quot;">​</a></h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_decodeURI.asp" target="_blank" rel="noreferrer">decodeURI()</a></td><td>解码某个编码的 URI。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_decodeURIComponent.asp" target="_blank" rel="noreferrer">decodeURIComponent()</a></td><td>解码一个编码的 URI 组件。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_encodeuri.asp" target="_blank" rel="noreferrer">encodeURI()</a></td><td>把字符串编码为 URI。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_encodeURIComponent.asp" target="_blank" rel="noreferrer">encodeURIComponent()</a></td><td>把字符串编码为 URI 组件。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_escape.asp" target="_blank" rel="noreferrer">escape()</a></td><td>对字符串进行编码。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_eval.asp" target="_blank" rel="noreferrer">eval()</a></td><td>计算 JavaScript 字符串，并把它作为脚本代码来执行。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/uneval" target="_blank" rel="noreferrer">uneval()</a></td><td>创建的一个Object的源代码的字符串表示</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_getClass.asp" target="_blank" rel="noreferrer">getClass()</a></td><td>返回一个 JavaObject 的 JavaClass。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_isFinite.asp" target="_blank" rel="noreferrer">isFinite()</a></td><td>检查某个值是否为有穷大的数。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_isNaN.asp" target="_blank" rel="noreferrer">isNaN()</a></td><td>检查某个值是否是数字。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_number.asp" target="_blank" rel="noreferrer">Number()</a></td><td>把对象的值转换为数字。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_parseFloat.asp" target="_blank" rel="noreferrer">parseFloat()</a></td><td>解析一个字符串并返回一个浮点数。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_parseInt.asp" target="_blank" rel="noreferrer">parseInt()</a></td><td>解析一个字符串并返回一个整数。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_string.asp" target="_blank" rel="noreferrer">String()</a></td><td>把对象的值转换为字符串。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_unescape.asp" target="_blank" rel="noreferrer">unescape()</a></td><td>对由 escape() 编码的字符串进行解码。</td></tr></tbody></table><h3 id="顶层属性-全局属性" tabindex="-1">顶层属性（全局属性） <a class="header-anchor" href="#顶层属性-全局属性" aria-label="Permalink to &quot;顶层属性（全局属性）&quot;">​</a></h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_infinity.asp" target="_blank" rel="noreferrer">Infinity</a></td><td>代表正的无穷大的数值。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_java.asp" target="_blank" rel="noreferrer">java</a></td><td>代表 java.* 包层级的一个 JavaPackage。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_nan.asp" target="_blank" rel="noreferrer">NaN</a></td><td>指示某个值是不是数字值。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_Packages.asp" target="_blank" rel="noreferrer">Packages</a></td><td>根 JavaPackage 对象。</td></tr><tr><td><a href="https://www.w3school.com.cn/jsref/jsref_undefined.asp" target="_blank" rel="noreferrer">undefined</a></td><td>指示未定义的值。</td></tr></tbody></table><h3 id="console" tabindex="-1">console <a class="header-anchor" href="#console" aria-label="Permalink to &quot;console&quot;">​</a></h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>assert()</td><td>第一个参数是表达式，第二个参数是字符串。只有当第一个参数为false，才会输出第二个参数，否则不会有任何结果。</td></tr><tr><td>clear()</td><td>清除当前控制台的所有输出，将光标回置到第一行。</td></tr><tr><td>count()</td><td>用于计数，输出它被调用了多少次。</td></tr><tr><td>countReset()</td><td>重置指定标签的计数器值</td></tr><tr><td>debug()</td><td>打印一条 &quot;debug&quot; 级别的消息</td></tr><tr><td>dir()</td><td>显示一个由特定的 Javascript 对象列表组成的可交互列表</td></tr><tr><td>dirxml()</td><td>打印 XML/HTML 元素表示的指定对象，否则显示 JavaScript 对象视图</td></tr><tr><td>error()</td><td>输出信息时，在最前面加一个红色的叉，表示出错，同时会显示错误发生的堆栈。</td></tr><tr><td>group()</td><td>用于将显示的信息分组，可以把信息进行折叠和展开。</td></tr><tr><td>groupCollapsed()</td><td>与console.group方法很类似，唯一的区别是该组的内容，在第一次显示时是收起的（collapsed），而不是展开的。</td></tr><tr><td>groupEnd()</td><td>结束内联分组</td></tr><tr><td>info()</td><td>console.log 别名，输出信息</td></tr><tr><td>log()</td><td>输出信息</td></tr><tr><td>table()</td><td>将复合类型的数据转为表格显示。</td></tr><tr><td>time()</td><td>计时开始</td></tr><tr><td>timeEnd()</td><td>计时结束</td></tr><tr><td>trace()</td><td>追踪函数的调用过程</td></tr><tr><td>warn()</td><td>输出警告信息</td></tr></tbody></table><h3 id="json" tabindex="-1">JSON <a class="header-anchor" href="#json" aria-label="Permalink to &quot;JSON&quot;">​</a></h3><ul><li>序列化：<code>JSON.stringify(object, ?replacer, ?space)</code></li><li>反序列化：<code>JSON.parse()</code></li></ul><h2 id="异步" tabindex="-1">异步 <a class="header-anchor" href="#异步" aria-label="Permalink to &quot;异步&quot;">​</a></h2><h3 id="定时器-timer" tabindex="-1">定时器（Timer） <a class="header-anchor" href="#定时器-timer" aria-label="Permalink to &quot;定时器（Timer）&quot;">​</a></h3><p>向任务队列添加定时任务</p><ul><li>setTimeout(func|code, delay=0)：指定某个函数或某段代码，在多少毫秒之后执行。返回一个整数，表示定时器的编号，可用来取消这个定时器</li><li>setInterval（）：指定某个任务每隔一段时间就执行一次，也就是无限次的定时执行</li></ul><p>——</p><ul><li>clearTimeout(TimerID)：取消对应的定时器</li><li>clearInterval(TimerID)</li></ul><h3 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h3><p>起到代理作用（proxy），充当异步操作与回调函数之间的中介，使得异步操作具备同步操作的接口。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">promise</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">resolve</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">reject</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// ... some code</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#7F848E;font-style:italic;">/* 异步操作成功 */</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">reject</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">error</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>状态</p><ul><li>pending：初始的状态，即正在执行</li><li>fulfilled：成功的完成了操作。</li><li>rejected：失败，没有完成操作。</li><li>settled： fulfilled 或 rejected 二者中的任意一个状态</li></ul><p><strong>方法</strong></p><ul><li>Promise.prototype.then()：为 Promise 实例添加状态改变时的回调函数</li><li>Promise.prototype.catch()：指定发生错误时的回调函数</li><li>Promise.prototype.finally()</li><li>Promise.all()：将多个 Promise 实例，包装成一个新的 Promise 实例</li><li>Promise.race()</li><li>Promise.allSettled()</li><li>Promise.any()</li><li>Promise.resolve()</li><li>Promise.reject()</li><li>Promise.try()</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 传统写法</span></span>
<span class="line"><span style="color:#61AFEF;">step1</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">value1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">step2</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value1</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value2</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">step3</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value2</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value3</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#61AFEF;">step4</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">value3</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value4</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#ABB2BF;">      });</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Promise 的写法</span></span>
<span class="line"><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">step1</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">step2</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">step3</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">step4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;Symbol&quot;">​</a></h2><p>ES6 引入了一种新的原始数据类型，表示独一无二的值。通过Symbol函数生成 <br> 可以显式转为字符串 <br> Symbol.keyFor()：返回一个已登记的 Symbol 类型值的key</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;bar&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;bar&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;bar&quot;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;bar&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">for</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;foo&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keyFor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s1</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// &quot;foo&quot;</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Symbol</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;foo&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">Symbol</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keyFor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">s2</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><a href="https://wangdoc.com/es6/symbol.html#%E5%86%85%E7%BD%AE%E7%9A%84-symbol-%E5%80%BC" target="_blank" rel="noreferrer">内置的 Symbol 值</a></p><ul><li><a href="https://wangdoc.com/es6/symbol.html#symbolhasinstance" target="_blank" rel="noreferrer">Symbol.hasInstance</a></li><li><a href="https://wangdoc.com/es6/symbol.html#symbolisconcatspreadable" target="_blank" rel="noreferrer">Symbol.isConcatSpreadable</a> 表示该对象用于Array.prototype.concat()时，是否可以展开</li><li><a href="https://wangdoc.com/es6/symbol.html#symbolspecies" target="_blank" rel="noreferrer">Symbol.species</a> 指向一个构造函数。创建衍生对象时，会使用该属性</li><li><a href="https://wangdoc.com/es6/symbol.html#symbolmatch" target="_blank" rel="noreferrer">Symbol.match</a> 当执行str.match(myObject)时，如果该属性存在，会调用它，返回该方法的返回值</li><li><a href="https://wangdoc.com/es6/symbol.html#symbolreplace" target="_blank" rel="noreferrer">Symbol.replace</a> 当该对象被String.prototype.replace方法调用时，会返回该方法的返回值</li><li><a href="https://wangdoc.com/es6/symbol.html#symbolsearch" target="_blank" rel="noreferrer">Symbol.search</a></li><li><a href="https://wangdoc.com/es6/symbol.html#symbolsplit" target="_blank" rel="noreferrer">Symbol.split</a></li><li><a href="https://wangdoc.com/es6/symbol.html#symboliterator" target="_blank" rel="noreferrer">Symbol.iterator</a> 指向该对象的默认遍历器方法</li><li><a href="https://wangdoc.com/es6/symbol.html#symboltoprimitive" target="_blank" rel="noreferrer">Symbol.toPrimitive</a> 对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值</li><li><a href="https://wangdoc.com/es6/symbol.html#symboltostringtag" target="_blank" rel="noreferrer">Symbol.toStringTag</a></li><li><a href="https://wangdoc.com/es6/symbol.html#symbolunscopables" target="_blank" rel="noreferrer">Symbol.unscopables</a> 该对象指定了使用with关键字时，哪些属性会被with环境排除</li></ul><h2 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h2><ul><li>Set.prototype.constructor：构造函数，默认就是Set函数。</li><li>Set.prototype.size：返回Set实例的成员总数。</li></ul><p>——</p><ul><li>Set.prototype.add(value)：添加某个值，返回 Set 结构本身。</li><li>Set.prototype.delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。</li><li>Set.prototype.has(value)：返回一个布尔值，表示该值是否为Set的成员。</li><li>Set.prototype.clear()：清除所有成员，没有返回值。</li><li>Set.prototype.keys()：返回键名的遍历器</li><li>Set.prototype.values()：返回键值的遍历器</li><li>Set.prototype.entries()：返回键值对的遍历器</li><li>Set.prototype.forEach()：使用回调函数遍历每个成员</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro has-diff"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Set</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 空Set</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Set</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">]); </span><span style="color:#7F848E;font-style:italic;">// 含1, 2, 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 去除数组的重复成员</span></span>
<span class="line"><span style="color:#ABB2BF;">[...</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Set</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">array</span><span style="color:#ABB2BF;">)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 并集</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">union</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Set</span><span style="color:#ABB2BF;">([...</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">, ...</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 交集</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">intersect</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Set</span><span style="color:#ABB2BF;">([...</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// （a 相对于 b 的）差集</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">difference</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Set</span><span style="color:#ABB2BF;">([...</span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">filter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">b</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">)));</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>WeakSet</strong> <br> 成员只能是对象（弱引用） <br> 不能遍历</p><ul><li>WeakSet.prototype.add(value)：向 WeakSet 实例添加一个新成员。</li><li>WeakSet.prototype.delete(value)：清除 WeakSet 实例的指定成员。</li><li>WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。</li></ul><h2 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h2><ul><li>size 属性</li></ul><p>——</p><ul><li>Map.prototype.set(key, value)</li><li>Map.prototype.get(key)</li><li>Map.prototype.has(key)</li><li>Map.prototype.delete(key)</li><li>Map.prototype.clear()</li><li>Map.prototype.keys()：返回键名的遍历器。</li><li>Map.prototype.values()：返回键值的遍历器。</li><li>Map.prototype.entries()：返回所有成员的遍历器。</li><li>Map.prototype.forEach()：遍历 Map 的所有成员。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">map</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Map</span><span style="color:#ABB2BF;">([</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;one&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;two&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  [</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;three&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">[...</span><span style="color:#E06C75;">map</span><span style="color:#ABB2BF;">]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// [[1,&#39;one&#39;], [2, &#39;two&#39;], [3, &#39;three&#39;]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">of</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">m</span><span style="color:#ABB2BF;">) { </span><span style="color:#7F848E;font-style:italic;">// 遍历Map</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;=&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">]);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">map</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">forEach</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">map</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Key: %s, Value: %s&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 对象转为 Map</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">map</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Map</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">entries</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><strong>WeakMap</strong> <br> 键所对应的对象，可能会在将来消失。有助于防止内存泄漏 <br> method：get()、set()、has()、delete()</p><h2 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;Proxy&quot;">​</a></h2><p>用于修改某些操作的默认行为，对外界的访问进行过滤和改写，属于一种“元编程”（meta programming） <br> <strong>new Proxy(target, handler)</strong></p><ul><li>get(target, propKey, receiver)：拦截对象属性的读取，比如proxy.foo和proxy[&#39;foo&#39;]。</li><li>set(target, propKey, value, receiver)：拦截对象属性的设置，比如proxy.foo = v或proxy[&#39;foo&#39;] = v，返回一个布尔值。</li><li>has(target, propKey)：拦截propKey in proxy的操作，返回一个布尔值。</li><li>deleteProperty(target, propKey)：拦截delete proxy[propKey]的操作，返回一个布尔值。</li><li>ownKeys(target)：拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。</li><li>getOwnPropertyDescriptor(target, propKey)：拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。</li><li>defineProperty(target, propKey, propDesc)：拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。</li><li>preventExtensions(target)：拦截Object.preventExtensions(proxy)，返回一个布尔值。</li><li>getPrototypeOf(target)：拦截Object.getPrototypeOf(proxy)，返回一个对象。</li><li>isExtensible(target)：拦截Object.isExtensible(proxy)，返回一个布尔值。</li><li>setPrototypeOf(target, proto)：拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。</li><li>apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。</li><li>construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args)。</li><li>Proxy.revocable()：返回一个可取消的 Proxy 实例</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//只要读写的属性名的第一个字符是下划线，一律抛错，从而达到禁止读写内部属性的目的</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">handler</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">invariant</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;get&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">value</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">invariant</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;set&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">invariant</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">action</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;_&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">throw</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Error</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Invalid attempt to </span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">action</span><span style="color:#C678DD;">}</span><span style="color:#98C379;"> private &quot;</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">&quot; property\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">target</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {};</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">proxy</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">handler</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">proxy</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">_prop</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;c&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// Error: Invalid attempt to set private &quot;_prop&quot; property</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="reflect" tabindex="-1">Reflect <a class="header-anchor" href="#reflect" aria-label="Permalink to &quot;Reflect&quot;">​</a></h2><p>大部分与Object对象的同名方法的作用都是相同的，而且它与Proxy对象的方法是一一对应的</p><ul><li>Reflect.apply(target, thisArg, args)</li><li>Reflect.construct(target, args)</li><li>Reflect.get(target, name, receiver)</li><li>Reflect.set(target, name, value, receiver)</li><li>Reflect.defineProperty(target, name, desc)</li><li>Reflect.deleteProperty(target, name)</li><li>Reflect.has(target, name)</li><li>Reflect.ownKeys(target)</li><li>Reflect.isExtensible(target)</li><li>Reflect.preventExtensions(target)</li><li>Reflect.getOwnPropertyDescriptor(target, name)</li><li>Reflect.getPrototypeOf(target)</li><li>Reflect.setPrototypeOf(target, prototype)</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/* 每一个Proxy对象的拦截操作（get、delete、has），内部都调用对应的Reflect方法，保证原生行为能够正常执行。</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">添加的工作，就是将每一个操作输出一行日志 */</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">loggedObj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Proxy</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">, {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;get&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">deleteProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;delete&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">deleteProperty</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;has&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Reflect</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">has</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">target</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="module" tabindex="-1">Module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;Module&quot;">​</a></h2><p>export</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// profile.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">area</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">radius</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">PI</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">radius</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">radius</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 写法一</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">m</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 写法二</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">m</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">m</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 写法三</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> {</span><span style="color:#E06C75;">n</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">m</span><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;">：</span><span style="color:#E06C75;">指定默认输出</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 接口改名</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">foo</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">myFoo</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;my_module&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 整体输出</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;my_module&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>import</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// main.js</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">lastName</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">as</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">surname</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./profile.js&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">*</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./profile.js&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">import</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">specifier</span><span style="color:#ABB2BF;">)    </span><span style="color:#7F848E;font-style:italic;">// 支持动态加载模块</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Assignment_Operators" target="_blank" rel="noreferrer">赋值运算符(assignment operator)</a></p><table><thead><tr><th>名字</th><th>简写的操作符</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Assignment" target="_blank" rel="noreferrer">赋值(Assignment)</a></td><td>x = y</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Addition_assignment" target="_blank" rel="noreferrer">加法赋值(Addition assignment)</a></td><td>x += y</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Subtraction_assignment" target="_blank" rel="noreferrer">减法赋值(Subtraction assignment)</a></td><td>x -= y</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Multiplication_assignment" target="_blank" rel="noreferrer">乘法赋值(Multiplication assignment)</a></td><td>x *= y</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Division_assignment" target="_blank" rel="noreferrer">除法赋值(Division assignment)</a></td><td>x /= y</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Remainder_assignment" target="_blank" rel="noreferrer">求余赋值(Remainder assignment)</a></td><td>x %= y</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Exponentiation_assignment" target="_blank" rel="noreferrer">求幂赋值(Exponentiation assignment)</a></td><td>x **= y</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Left_shift_assignment" target="_blank" rel="noreferrer">左移位赋值(Left shift assignment)</a></td><td>x &lt;&lt;= y</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Right_shift_assignment" target="_blank" rel="noreferrer">右移位赋值(Right shift assignment)</a></td><td>x &gt;&gt;= y</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Unsigned_right_shift_assignment" target="_blank" rel="noreferrer">无符号右移位赋值(Unsigned right shift assignment)</a></td><td>x &gt;&gt;&gt;= y</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_AND_assignment" target="_blank" rel="noreferrer">按位与赋值(Bitwise AND assignment)</a></td><td>x &amp;= y</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_XOR_assignment" target="_blank" rel="noreferrer">按位异或赋值(Bitwise XOR assignment)</a></td><td>x ^= y</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_OR_assignment" target="_blank" rel="noreferrer">按位或赋值(Bitwise OR assignment)</a></td><td>x</td></tr></tbody></table><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noreferrer">比较运算符(Comparison operators)</a></p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality" target="_blank" rel="noreferrer">等于 Equal</a> (==)</td><td>如果两边操作数相等时返回true。</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Inequality" target="_blank" rel="noreferrer">不等于 Not equal</a> (!=)</td><td>如果两边操作数不相等时返回true</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity" target="_blank" rel="noreferrer">全等 Strict equal</a> (===)</td><td>两边操作数相等且类型相同时返回true。</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Nonidentity" target="_blank" rel="noreferrer">不全等 Strict not equal</a> (!==)</td><td>两边操作数不相等或类型不同时返回true。</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Greater_than_operator" target="_blank" rel="noreferrer">大于 Greater than</a> (&gt;)</td><td>左边的操作数大于右边的操作数返回true</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Greater_than_or_equal_operator" target="_blank" rel="noreferrer">大于等于 Greater than or equal</a> (&gt;=)</td><td>左边的操作数大于或等于右边的操作数返回true</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Less_than_operator" target="_blank" rel="noreferrer">小于 Less than</a> (&lt;)</td><td>左边的操作数小于右边的操作数返回true</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Less_than_or_equal_operator" target="_blank" rel="noreferrer">小于等于 Less than or equal</a> (&lt;=)</td><td>左边的操作数小于或等于右边的操作数返回true</td></tr></tbody></table><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noreferrer">算数运算符(Arithmetic operators)</a> <br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noreferrer">位运算符(Bitwise operators)</a> <br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noreferrer">逻辑运算符(Logical operators)</a> <br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%90%E7%AE%97%E7%AC%A6" target="_blank" rel="noreferrer">字符串运算符(String operators)</a> <br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#conditional_operator" target="_blank" rel="noreferrer">条件（三元）运算符(Conditional operator)</a> <br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#comma_operator" target="_blank" rel="noreferrer">逗号运算符(Comma operator)</a> <br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#delete" target="_blank" rel="noreferrer">一元运算符(Unary operators)</a></p><ul><li>delete：属性或者元素会变成 undefined，成功会返回true</li><li>typeof operand</li><li>void (expression)</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#%E5%85%B3%E7%B3%BB%E6%93%8D%E4%BD%9C%E7%AC%A6" target="_blank" rel="noreferrer">关系运算符(Relational operator)</a></p><ul><li>propNameOrNumber in objectName</li><li>objectName instanceof objectType</li></ul><h3 id="优先级" tabindex="-1">优先级 <a class="header-anchor" href="#优先级" aria-label="Permalink to &quot;优先级&quot;">​</a></h3><table><thead><tr><th>Operator type</th><th>Individual operators</th></tr></thead><tbody><tr><td>member</td><td>. []</td></tr><tr><td>call / create instance</td><td>() new</td></tr><tr><td>negation/increment</td><td>! ~ - + ++ -- typeof void delete</td></tr><tr><td>multiply/divide</td><td>* / %</td></tr><tr><td>addition/subtraction</td><td>+ -</td></tr><tr><td>bitwise shift</td><td>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td></tr><tr><td>relational</td><td>&lt; &lt;= &gt; &gt;= in instanceof</td></tr><tr><td>equality</td><td>== != === !==</td></tr><tr><td>bitwise-and</td><td>&amp;</td></tr><tr><td>bitwise-xor</td><td>^</td></tr><tr><td>bitwise-or</td><td>|</td></tr><tr><td>logical-and</td><td>&amp;&amp;</td></tr><tr><td>logical-or</td><td>||</td></tr><tr><td>conditional</td><td>?:</td></tr><tr><td>assignment</td><td>= += -= *= /= %= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= ^= |=</td></tr><tr><td>comma</td><td>,</td></tr></tbody></table><p><strong>链判断运算符 （?.）</strong></p><ul><li>obj?.prop // 对象属性</li><li>obj?.[expr] // 同上</li><li>func?.(...args) // 函数或对象方法的调用</li><li>短路机制</li></ul><p><strong>Null 判断运算符 ??</strong> <br> 行为类似||，运算符左侧的值为null或undefined时，才会返回右侧的值</p><h2 id="others" tabindex="-1">Others <a class="header-anchor" href="#others" aria-label="Permalink to &quot;Others&quot;">​</a></h2><p><strong>JS Event Loop 事件循环机制</strong> <br> 任务执行顺序：</p><ol><li>同步任务；</li><li>微任务队列（promise.then、process.nextTick(node)）；</li><li>宏任务队列（script、setTimeOut、setInterval）</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">setImmediate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">log</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">log</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/****************** microTask 分割线 ********************/</span></span>
<span class="line"><span style="color:#E5C07B;">Promise</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">resolve</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">then</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">log</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// microTask 分割线</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/****************** 下次 event loop tick 分割线 ********************/</span></span>
<span class="line"><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextTick</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">log</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/****************** 同步任务和异步任务的分割线 ********************/</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">5</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 打印 5 4 3 2 1 或者 5 4 3 1 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>函数防抖（debounce）</strong> <br> 指触发事件后在规定时间内函数只能执行一次，如果在规定时间内又触发了事件，则会重新计算函数执行时间。 <br> 应用场景</p><ul><li>搜索框搜索输入。只需用户最后一次输入完，再发送请求</li><li>窗口大小Resize。只需窗口调整完成后，计算窗口大小。防止重复渲染。</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 规定延迟时间（delay）内只执行最开始触发的函数</span></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">canRun</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;scroll&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 判断是否已空闲，如果在执行中，则直接return</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">canRun</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">canRun</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;函数节流&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">canRun</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">300</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>函数节流（throttle）</strong> <br> 限制一个函数在规定时间内只能执行一次。 <br> 应用场景</p><ul><li>滚动加载，加载更多或滚到底部监听</li><li>谷歌搜索框，搜索联想功能</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;scroll&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">clearTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 清除未执行的代码，重置回初始化状态</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">timer</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">setTimeout</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;函数防抖&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }, </span><span style="color:#D19A66;">300</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,124),c=[o,r,t];function B(i,y,b,d,F,A){return e(),l("div",null,c)}const f=n(p,[["render",B]]);export{m as __pageData,f as default};
