import{_ as s,c as n,o as a,a5 as l}from"./chunks/framework.CgY2496V.js";const p="/Notes/assets/1683080254664-42117d05-e1f5-4bf9-a252-940ecad3fe4a.9_vOmLrI.png",e="/Notes/assets/1683080324293-1abda312-9903-4445-94d5-72e9606dd144.BUZJd3fk.png",o="/Notes/assets/1683102539617-059da21e-c307-4000-9486-dee9e4a59675.Cuc_llCm.png",r="/Notes/assets/1705241863646-3c99fae3-a327-4258-92fa-c93541fcc9ea.B010BNDK.svg",d=JSON.parse('{"title":"Java Advance","description":"","frontmatter":{"title":"Java Advance","created_at":"2022-04-03T08:46:14.000Z","updated_at":"2024-01-14T14:48:42.000Z","word_count":10275},"headers":[],"relativePath":"CS/Java Advance.md","filePath":"CS/Java Advance.md"}'),t={name:"CS/Java Advance.md"},c=l(`<h2 id="并发-concurrent" tabindex="-1">并发 Concurrent <a class="header-anchor" href="#并发-concurrent" aria-label="Permalink to &quot;并发 Concurrent&quot;">​</a></h2><p><strong>并发安全</strong>：是保证程序的正确性，使得并发处理结果符合预期 <br> 并发安全需要保证：</p><ul><li><strong>可见性</strong> - 一个线程修改了某个共享变量，其状态能够立即被其他线程知晓，即把线程本地状态反映到主内存上，volatile 就是负责保证可见性的。</li><li><strong>原子性</strong> - 相关操作不会中途被其他线程干扰，一般通过同步机制（加锁：sychronized、Lock）实现。</li><li><strong>有序性</strong> - 是保证线程内串行语义，避免指令重排等</li></ul><p>原子操作（atomic operation）：不可被中断的一个或一系列操作</p><h3 id="线程-thread" tabindex="-1">线程（Thread） <a class="header-anchor" href="#线程-thread" aria-label="Permalink to &quot;线程（Thread）&quot;">​</a></h3><p>类方法</p><ul><li>Thread currentThread()：返回当前正在执行的线程对象</li><li>void sleep(long millis)：让当前正在执行的线程暂停 millis 毫秒，并进入阻塞状态（线程睡眠）</li><li>void yield()：暂停当前正在执行的线程对象，转入就绪状态（线程让步）</li></ul><p>实例方法</p><ul><li>void start()：使该线程开始执行，Java 虚拟机调用该线程的 run 方法，只能被处于新建状态的线程调用，否则会引发 IllegalThreadStateException 异常</li><li>void run()：如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回</li><li>void setName(String name)：为线程设置名字，在默认情况下，主线程的名字为 main，用户启动的多个线程的名字依次为 Thread-0、Thread-1、Thread-2、...、Thread-n 等</li><li>String getName()：返回调用该方法的线程名字</li><li>void join()：等待调用该方法的线程执行完成，而当前正在执行的线程进入阻塞状态（联合线程）（该方法声明抛出了 InterruptedException 异常）</li><li>void setDaemon(boolean on)：on 为&quot;true&quot;时，将该线程设置成守护线程（程序退出时会被回收），该方法必须在 start() 之前调用，否则会引发 IllegalThreadStateException 异常</li><li>boolean isDaemon()：判断该线程是否为守护线程</li><li>int getPriority()：返回线程的优先级</li><li>void setPriority(int newPriority)：更改线程的优先级（范围是 1~10 之间）</li><li>boolean isAlive()：测试线程是否处于活动状态</li></ul><table><thead><tr><th>变量和类型</th><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>static int</td><td><a href="https://www.apiref.com/java11-zh/java.base/java/lang/Thread.html#MAX_PRIORITY" target="_blank" rel="noreferrer">MAX_PRIORITY</a></td><td>线程可以拥有的最大优先级。</td></tr><tr><td>static int</td><td><a href="https://www.apiref.com/java11-zh/java.base/java/lang/Thread.html#MIN_PRIORITY" target="_blank" rel="noreferrer">MIN_PRIORITY</a></td><td>线程可以拥有的最低优先级。</td></tr><tr><td>static int</td><td><a href="https://www.apiref.com/java11-zh/java.base/java/lang/Thread.html#NORM_PRIORITY" target="_blank" rel="noreferrer">NORM_PRIORITY</a></td><td>分配给线程的默认优先级。</td></tr></tbody></table><p>实现多线程</p><ul><li>继承 <code>Thread</code>类或 <code>Runnable</code>接口，实现<code>run</code>方法</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 定义 Thread 类的子类</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyThread</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 重写 Thread 类中的 run() 方法，线程执行体</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义 Runnable 接口的实现类</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyRunnable</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Runnable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 重写 Runnable 接口中的 run() 方法，线程执行体</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Demo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {                </span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#E06C75;"> mt</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyThread</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 创建 Thread 子类的对象</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#E06C75;"> mr</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> MyRunnable</span><span style="color:#ABB2BF;">(), </span><span style="color:#98C379;">&quot;线程名&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 将 target 作为运行目标来创建创建 Thread 类的对象</span></span>
<span class="line"><span style="color:#E5C07B;">        mt</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 调用线程对象的 start() 方法来启动该线程</span></span>
<span class="line"><span style="color:#E5C07B;">        mr</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 使用匿名内部类的方式创建</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 使用匿名内部类的方式创建</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Runnable</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">            public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 使用Lambda表达式</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(()</span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">          for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 100</span><span style="color:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> i);</span></span>
<span class="line"><span style="color:#ABB2BF;">          }</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span><span style="color:#98C379;">&quot;Lambda&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p><code>interface Callable&lt;V&gt;</code> <br> 提供了一个 call() 方法（可以有返回值，可以声明抛出异常）作为<strong>线程执行体</strong></p><ul><li>V call()：计算结果，如果无法计算结果，则抛出一个异常</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Task</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Callable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> call</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#61AFEF;"> longTimeCalculation</span><span style="color:#ABB2BF;">(); </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>interface Future&lt;V&gt;</code> <br> Future接口代表 Callable 接口里 call() 方法的返回值，表示异步计算的结果 <br> 常用方法</p><ul><li><code>V get()</code>：返回 Callable 任务里 call() 方法的返回值，如果计算时抛出异常将会抛出 ExecutionException 异常，如果当前的线程在等待时被中断将会抛出 InterruptedException 异常（调用该方法将导致程序阻塞，必须等到子线程结束后才会得到返回值）</li><li><code>V get(long timeout, TimeUnit unit)</code>：返回 Callable 任务里 call() 方法的返回值，该方法让程序最多阻塞 timeout 和 unit 指定的时间，如果经过指定时间后 Callable 任务依然没有返回值，将会抛出 TimeoutException 异常</li><li><code>boolean cancel(boolean maylnterruptlfRunning)</code>：试图取消该 Future 里关联的 Callable 任务</li><li><code>boolean isCancelled()</code>：如果在 Callable 任务正常完成前被取消，则返回 true</li><li><code>boolean isDone()</code>：如果 Callable 任务已完成（由于正常终止、异常或取消），则返回 true</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E5C07B;">ExecutorService</span><span style="color:#E06C75;"> executor </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> Executors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newFixedThreadPool</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义任务:</span></span>
<span class="line"><span style="color:#E5C07B;">Callable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> task </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Task</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 提交任务并获得Future:</span></span>
<span class="line"><span style="color:#E5C07B;">Future</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> future </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> executor</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">submit</span><span style="color:#ABB2BF;">(task);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 从Future获取异步执行返回的结果:</span></span>
<span class="line"><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> result </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> future</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span><span style="color:#7F848E;font-style:italic;"> // 可能阻塞</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>class FutureTask&lt;V&gt;</code> <br> FutureTask类实现了<code>RunnableFuture&lt;V&gt;</code> 接口（<code>RunnableFuture&lt;V&gt;</code> 接口继承了<code>Runnable</code> 接口和<code>Future&lt;V&gt; </code>接口） <br> 构造器：<code>FutureTask(Callable&lt;V&gt; callable)</code>、<code>FutureTask(Runnable runnable, V result)</code>（指定成功完成时 get 返回给定的结果为 result）</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> CallableDemo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        Callable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Long</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">callable</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyThread</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        FutureTask</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Long</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">future</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> FutureTask</span><span style="color:#ABB2BF;">&lt;&gt;(callable);</span></span>
<span class="line"><span style="color:#C678DD;">        new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(future, </span><span style="color:#98C379;">&quot;Callable 线程&quot;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;任务耗时：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">future</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">/</span><span style="color:#D19A66;"> 1000000</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;毫秒&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#ABB2BF;"> | </span><span style="color:#E5C07B;">ExecutionException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyThread</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Callable</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Long</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> ticket </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 10000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#E5C07B;"> Long</span><span style="color:#61AFEF;"> call</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            long</span><span style="color:#E06C75;"> begin</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (ticket </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; 卖出了第 &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> ticket </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; 张票&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                ticket--;</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">            long</span><span style="color:#E06C75;"> end</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nanoTime</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> (end </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> begin);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p><strong>创建线程的三种方式对比</strong></p><ul><li>继承 Thread 类 <ol><li>线程类已经继承了 Thread 类，不能再继承其它父类</li><li>访问当前线程直接使用 this</li><li>多个线程之间<strong>无法共享线程类中的实例变量</strong></li></ol></li><li>实现 Runnable、Callable 接口的方式创建多线程 <ol><li>线程类只是实现了 Runnable 接口，还可以继承其它类</li><li>访问当前线程须使用 Thread. currentThread() 方法</li><li>所创建的 Runnable 对象只是<strong>线程的 target</strong>，而多个线程<strong>可以共享同一个 target 对象的实例变量</strong>，所以适合多个相同线程来处理同一份资源的情况</li></ol></li></ul><h3 id="并发核心机制" tabindex="-1">并发核心机制 <a class="header-anchor" href="#并发核心机制" aria-label="Permalink to &quot;并发核心机制&quot;">​</a></h3><p>synchronized 利用锁的机制来实现互斥同步的。 <br> 可以保证在同一个时刻，只有一个线程可以执行某个方法或者某个代码块</p><ul><li><strong>同步实例方法</strong> - 对于普通同步方法，锁是当前实例对象</li><li><strong>同步静态方法</strong> - 对于静态同步方法，锁是当前类的 Class 对象</li><li><strong>同步代码块</strong> - 对于同步方法块，锁是 synchonized 括号里配置的对象</li></ul><p>volatile 是轻量级的 synchronized，它在多处理器开发中保证了共享变量的“可见性”</p><ul><li><strong>线程可见性</strong></li><li><strong>禁止指令重排序</strong></li><li><strong>不保证原子性</strong></li></ul><h4 id="cas" tabindex="-1">CAS <a class="header-anchor" href="#cas" aria-label="Permalink to &quot;CAS&quot;">​</a></h4><p>Compare and Swap，<strong>比较并替换</strong></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 如果AtomicInteger的当前值是prev，那么就更新为next，否则就什么也不干</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> int</span><span style="color:#61AFEF;"> incrementAndGet</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">AtomicInteger</span><span style="color:#E06C75;"> var) {</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> prev</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    do</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        prev </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> var</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">        next </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> prev </span><span style="color:#56B6C2;">+</span><span style="color:#D19A66;"> 1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">while</span><span style="color:#E06C75;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">var</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSet</span><span style="color:#ABB2BF;">(prev, next)</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#E06C75;"> next</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>存在问题</p><ul><li>ABA 问题</li><li>循环时间长开销大</li><li>只能保证一个共享变量的原子性</li></ul><p>原子类 <br> java.util.concurrent.atomic</p><ul><li>增加值并返回新值：int addAndGet(int delta)</li><li>加1后返回新值：int incrementAndGet()</li><li>获取当前值：int get()</li><li>用CAS方式设置：int compareAndSet(int expect, int update)</li></ul><p>基本类型</p><ul><li>AtomicBoolean - 布尔类型原子类</li><li>AtomicInteger - 整型原子类</li><li>AtomicLong - 长整型原子类</li></ul><p>引用类型</p><ul><li>AtomicReference - 引用类型原子类</li><li>AtomicMarkableReference - 带有标记位的引用类型原子类</li><li>AtomicStampedReference - 带有版本号的引用类型原子类 解决了 ABA 问题</li></ul><p>数组类型</p><ul><li>AtomicIntegerArray - 整形数组原子类</li><li>AtomicLongArray - 长整型数组原子类</li><li>AtomicReferenceArray - 引用类型数组原子类</li></ul><p>属性更新器类型</p><ul><li>AtomicIntegerFieldUpdater - 整型字段的原子更新器。</li><li>AtomicLongFieldUpdater - 长整型字段的原子更新器。</li><li>AtomicReferenceFieldUpdater - 原子更新引用类型里的字段</li></ul><p>原子化的累加器 <br> DoubleAccumulator、DoubleAdder、LongAccumulator 、 LongAdder</p><p>自旋锁 指线程反复检查锁变量是否可用，直到成功为止</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> AtomicReferenceDemo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> ticket </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        SpinLock</span><span style="color:#E06C75;"> lock</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SpinLock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        ExecutorService</span><span style="color:#E06C75;"> executorService</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Executors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newFixedThreadPool</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 5</span><span style="color:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="color:#E5C07B;">            executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> MyThread</span><span style="color:#ABB2BF;">(lock));</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shutdown</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> SpinLock</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#E5C07B;"> AtomicReference</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> atomicReference </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> AtomicReference</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> lock</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">atomicReference</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSet</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">, current)) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> unlock</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#E06C75;"> current</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            atomicReference</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">compareAndSet</span><span style="color:#ABB2BF;">(current, </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyThread</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Runnable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#E5C07B;"> SpinLock</span><span style="color:#E06C75;"> lock</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#61AFEF;"> MyThread</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">SpinLock</span><span style="color:#E06C75;font-style:italic;"> lock</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">lock</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> lock;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (ticket </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">                if</span><span style="color:#ABB2BF;"> (ticket </span><span style="color:#56B6C2;">&gt;</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; 卖出了第 &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> ticket </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; 张票&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                    ticket--;</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#E5C07B;">                lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><h4 id="threadlocal-t" tabindex="-1"><code>ThreadLocal&lt;T&gt;</code> <a class="header-anchor" href="#threadlocal-t" aria-label="Permalink to &quot;\`ThreadLocal&lt;T&gt;\`&quot;">​</a></h4><ul><li>代表一个线程局部变量</li><li>当运行于多线程环境的某个对象使用 ThreadLocal 维护变量时，ThreadLocal <strong>为每一个使用该变量的线程分配一个独立的变量副本</strong>，从而解决多线程中对同一变量的访问冲突</li></ul><p>实例方法</p><ul><li>protected T initialValue()：返回此线程局部变量的当前线程的“初始值”</li><li>T get()：返回此线程局部变量中当前线程副本中的值</li><li>void remove()：移除此线程局部变量中当前线程的值</li><li>void set(T value)：设置此线程局部变量中当前线程副本中的值</li><li>子类 InheritableThreadLocal：在创建子线程时，子线程会接收所有<strong>可继承的线程局部变量的初始值</strong>，以获得父线程所具有的值</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ThreadLocalDemo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#E5C07B;"> ThreadLocal</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> threadLocal </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> ThreadLocal</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">        protected</span><span style="color:#E5C07B;"> Integer</span><span style="color:#61AFEF;"> initialValue</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        ExecutorService</span><span style="color:#E06C75;"> executorService</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Executors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newFixedThreadPool</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="color:#E5C07B;">            executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">execute</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> MyThread</span><span style="color:#ABB2BF;">());</span></span>
<span class="line"><span style="color:#ABB2BF;">        }  </span><span style="color:#7F848E;font-style:italic;">// 全部输出 count = 10</span></span>
<span class="line"><span style="color:#E5C07B;">        executorService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shutdown</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyThread</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Runnable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> count</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> threadLocal</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 10</span><span style="color:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="color:#C678DD;">                try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                    count++;</span></span>
<span class="line"><span style="color:#E5C07B;">                    Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                    e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            threadLocal</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(count);</span></span>
<span class="line"><span style="color:#E5C07B;">            threadLocal</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; : &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> count);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h3 id="线程通信" tabindex="-1">线程通信 <a class="header-anchor" href="#线程通信" aria-label="Permalink to &quot;线程通信&quot;">​</a></h3><p><strong>Object 类</strong>中用于操作线程通信的实例方法</p><ol><li>wait()：调用该方法的当前线程会<strong>释放</strong>对<strong>该同步监视器</strong>（调用者）的锁定，JVM 把该线程存放到<strong>等待池</strong>中，等待其他的线程唤醒该线程（该方法声明抛出了 InterruptedException 异常）（为了防止虚假唤醒，此方法<strong>应始终在循环中使用</strong>，即被唤醒后需要再次判断是否满足唤醒条件）</li><li>notify()：调用该方法的当前线程唤醒在等待池中的任意一个线程，并把该线程转到<strong>锁池</strong>中等待获取锁</li><li>notifyAll()：调用该方法的当前线程唤醒在等待池中的所有线程，并把该线程转到<strong>锁池</strong>中等待获取锁</li></ol><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>这些方法必须在<strong>同步块</strong>中使用，且只能被同步监视器对象来调用，否则会引发 IllegalMonitorStateException 异常</p></div><p>使用 volatile 标志位控制线程终止</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> ThreadStopDemo2</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        MyTask</span><span style="color:#E06C75;"> task</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> MyTask</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#E06C75;"> thread</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Thread</span><span style="color:#ABB2BF;">(task, </span><span style="color:#98C379;">&quot;MyTask&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        TimeUnit</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">MILLISECONDS</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">        task</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">cancel</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> MyTask</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Runnable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> boolean</span><span style="color:#E06C75;"> flag </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">        private</span><span style="color:#C678DD;"> volatile</span><span style="color:#C678DD;"> long</span><span style="color:#E06C75;"> count </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 0L</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; 线程启动&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (flag) {</span></span>
<span class="line"><span style="color:#E5C07B;">                System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(count++);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; 线程终止&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         * 通过 volatile 标志位来控制线程终止</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#C678DD;">        public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> cancel</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            flag </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p><strong>生产者与消费者模式</strong> <br> <strong>管程法</strong></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Test</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		BufferContainer</span><span style="color:#E06C75;"> container</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> BufferContainer</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">15</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">		new</span><span style="color:#61AFEF;"> Productor</span><span style="color:#ABB2BF;">(container).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		new</span><span style="color:#61AFEF;"> Consumer</span><span style="color:#ABB2BF;">(container).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">		System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Program End&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Productor</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">	BufferContainer</span><span style="color:#E06C75;"> container</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#61AFEF;"> Productor</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">BufferContainer</span><span style="color:#E06C75;font-style:italic;"> container</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">container</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> container;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">;++i) {</span></span>
<span class="line"><span style="color:#E5C07B;">			container</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">push</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Food</span><span style="color:#ABB2BF;">(i));</span></span>
<span class="line"><span style="color:#E5C07B;">			System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;生产：&quot;</span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;">i</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&quot;食品&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Consumer</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">	BufferContainer</span><span style="color:#E06C75;"> container</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#61AFEF;"> Consumer</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">BufferContainer</span><span style="color:#E06C75;font-style:italic;"> container</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">container</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> container;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">;i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;">50</span><span style="color:#ABB2BF;">;++i) {</span></span>
<span class="line"><span style="color:#E5C07B;">			System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;消费：&quot;</span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;">container</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">pop</span><span style="color:#ABB2BF;">().</span><span style="color:#E5C07B;">id</span><span style="color:#56B6C2;">+</span><span style="color:#98C379;">&quot;食品&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> BufferContainer</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">	int</span><span style="color:#E06C75;"> size</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;">num</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">	Food</span><span style="color:#E06C75;">[] food</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#61AFEF;"> BufferContainer</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> size</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">size</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> size;</span></span>
<span class="line"><span style="color:#ABB2BF;">		food</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#E5C07B;"> Food</span><span style="color:#ABB2BF;">[size];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E06C75;">	</span></span>
<span class="line"><span style="color:#C678DD;">	synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> push</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Food</span><span style="color:#E06C75;font-style:italic;"> a</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;"> (num</span><span style="color:#56B6C2;">&gt;=</span><span style="color:#ABB2BF;">size) {</span></span>
<span class="line"><span style="color:#C678DD;">			try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">		food[num]</span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;">a;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">		num++;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#C678DD;">	synchronized</span><span style="color:#E5C07B;"> Food</span><span style="color:#61AFEF;"> pop</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;">(num</span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">			try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#ABB2BF;">		num--;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		return</span><span style="color:#ABB2BF;"> food[num];</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Food</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">	int</span><span style="color:#E06C75;"> id</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#61AFEF;"> Food</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> id</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">id</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> id;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br></div></div><p><strong>信号灯法</strong></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Test</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		Light</span><span style="color:#E06C75;"> light</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Light</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		new</span><span style="color:#61AFEF;"> Man</span><span style="color:#ABB2BF;">(light).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">		new</span><span style="color:#61AFEF;"> Car</span><span style="color:#ABB2BF;">(light).</span><span style="color:#61AFEF;">start</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Man</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">	Light</span><span style="color:#E06C75;"> light</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">	</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#61AFEF;"> Man</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Light</span><span style="color:#E06C75;font-style:italic;"> light</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">light</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> light;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;++i)</span></span>
<span class="line"><span style="color:#E5C07B;">			light</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">green</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Car</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> Thread</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E5C07B;">	Light</span><span style="color:#E06C75;"> light</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#61AFEF;"> Car</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Light</span><span style="color:#E06C75;font-style:italic;"> light</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">light</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> light;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">	@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">	public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		for</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;i</span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;">20</span><span style="color:#ABB2BF;">;++i)</span></span>
<span class="line"><span style="color:#E5C07B;">			light</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">red</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Light</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#C678DD;">	boolean</span><span style="color:#E06C75;"> color</span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">// 红灯false，绿灯true</span></span>
<span class="line"><span style="color:#E06C75;">	</span></span>
<span class="line"><span style="color:#C678DD;">	synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> red</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;">(color)</span></span>
<span class="line"><span style="color:#C678DD;">			try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">		System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Car pass&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		color</span><span style="color:#56B6C2;">=!</span><span style="color:#ABB2BF;">color;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#E06C75;">	</span></span>
<span class="line"><span style="color:#C678DD;">	synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> green</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">		if</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">color)</span></span>
<span class="line"><span style="color:#C678DD;">			try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">				this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			} </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">				e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">			}</span></span>
<span class="line"><span style="color:#E5C07B;">		System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Man pass&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		color</span><span style="color:#56B6C2;">=!</span><span style="color:#ABB2BF;">color;</span></span>
<span class="line"><span style="color:#E5C07B;">		this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br></div></div><p>java.util.concurrent.locks 包中，Condition 接口中的 await()、signal()、signalAll() 方法替代了 Object 监视器方法的使用</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> TaskQueue</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">    Queue</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> queue </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> LinkedList</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> addTask</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> s</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(s);</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notifyAll</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> getTask</span><span style="color:#ABB2BF;">()</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> InterruptedException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isEmpty</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">wait</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> TaskQueue</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Lock</span><span style="color:#E06C75;"> lock </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReentrantLock</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获得一个绑定了Lock实例的Condition实例</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Condition</span><span style="color:#E06C75;"> condition </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newCondition</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> Queue</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> queue </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> LinkedList</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> addTask</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> s</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(s);</span></span>
<span class="line"><span style="color:#E5C07B;">            condition</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">signalAll</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> getTask</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isEmpty</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#E5C07B;">                condition</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">await</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E5C07B;"> queue</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">condition</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">await</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">TimeUnit</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SECOND</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 被其他线程唤醒</span></span>
<span class="line"><span style="color:#E06C75;">} </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 指定时间内没有被其他线程唤醒</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><h3 id="并发锁" tabindex="-1">并发锁 <a class="header-anchor" href="#并发锁" aria-label="Permalink to &quot;并发锁&quot;">​</a></h3><p>锁机制（Lock、sychronized）：对共享数据做互斥同步，这样在同一个时刻，只有一个线程可以执行某个方法或者某个代码块，那么操作必然是原子性的，线程安全的</p><ul><li><strong>公平锁</strong> - <strong>多线程按照申请锁的顺序来获取锁</strong>。</li><li><strong>非公平锁</strong> - <strong>多线程不按照申请锁的顺序来获取锁</strong> 。可能会出现优先级反转（后来者居上）或者饥饿现象（某线程总是抢不过别的线程，导致始终无法执行）。</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>synchronized 只支持非公平锁。 <br> ReentrantLock 、ReentrantReadWriteLock，默认是非公平锁，但支持公平锁</p></div><ul><li>**独享锁（**互斥锁） - <strong>锁一次只能被一个线程所持有</strong>。</li><li>**共享锁（**读写锁） - <strong>锁可被多个线程所持有</strong></li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>synchronized 、ReentrantLock 只支持独享锁。 <br> ReentrantReadWriteLock 其写锁是独享锁，其读锁是共享锁。读锁是共享锁使得并发读是非常高效的，读写，写读 ，写写的过程是互斥的</p></div><p>处理并发同步的策略</p><ul><li>乐观锁：乐观思想，即不加锁的并发操作也没什么问题。对于同一个数据的并发操作，是不会发生修改的。在更新数据的时候，会采用不断尝试更新的方式更新数据。适合读多写少的场景</li><li>悲观锁：悲观思想，即不加锁的并发操作一定会出问题。适合写操作频繁的场景。</li></ul><p>控制粒度的粗细 <br> 控制粒度越细，阻塞开销越小，并发性也就越高</p><ul><li><strong>偏向锁</strong> - 指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁。降低获取锁的代价。</li><li><strong>轻量级锁</strong> - 指当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。</li><li><strong>重量级锁</strong> - 指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。重量级锁会让其他申请的线程进入阻塞，性能降低。</li></ul><table><thead><tr><th></th><th>内置锁</th><th>显示锁</th></tr></thead><tbody><tr><td>申请和释放</td><td>由 JVM 所控制</td><td>可以由程序所控制</td></tr><tr><td>响应中断</td><td>不能</td><td>能</td></tr><tr><td>超时机制</td><td>没有</td><td>有</td></tr><tr><td>公平锁</td><td>不支持</td><td>支持</td></tr><tr><td>共享</td><td>独享</td><td>基于 Condition 灵活的控制同步条件</td></tr><tr><td>读写分离</td><td>不支持</td><td>支持</td></tr></tbody></table><p><strong>可重入锁：线程可以重复获取同一把锁</strong>。即同一个线程在外层方法获取了锁，在进入内层方法会自动获取锁。<strong>在一定程度上避免死锁</strong></p><ul><li>同步方法：使用 <code>synchronized</code>关键字来修饰某个方法，就相当于<strong>给调用该方法的对象</strong>加了锁</li></ul><p><code>synchronized</code>是Java语言层面提供的语法，不需要考虑异常</p><ul><li>同步锁：java.util.concurrent.locks 包中，Lock 可替代 synchronized 方法和语句的使用</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> add</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> n) {</span></span>
<span class="line"><span style="color:#C678DD;">    synchronized</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">this</span><span style="color:#E06C75;">) { </span><span style="color:#7F848E;font-style:italic;">// 锁住this</span></span>
<span class="line"><span style="color:#E06C75;">        count </span><span style="color:#56B6C2;">+=</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#7F848E;font-style:italic;">// 解锁</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// equal to</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> synchronized</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> add</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> n) { </span><span style="color:#7F848E;font-style:italic;">// 锁住this</span></span>
<span class="line"><span style="color:#E06C75;">    count </span><span style="color:#56B6C2;">+=</span><span style="color:#E06C75;"> n</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">} </span><span style="color:#7F848E;font-style:italic;">// 解锁</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Counter</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Lock</span><span style="color:#E06C75;"> lock </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReentrantLock</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> count</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> n</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            count </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> n;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tryLock</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">TimeUnit</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SECONDS</span><span style="color:#ABB2BF;">)</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        ...</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">finally</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        lock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p><strong>ReentrantReadWriteLock</strong> 可重入读写锁，使用同ReentrantLock</p><ul><li>只允许一个线程写入；允许多个线程在没有写入时同时读取</li><li>适合读多写少的场景</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 泛型无界缓存</span></span>
<span class="line"><span style="color:#C678DD;">static</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> UnboundedCache</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> Map</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">K</span><span style="color:#ABB2BF;">,</span><span style="color:#E5C07B;"> V</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> cacheMap </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> WeakHashMap</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> ReadWriteLock</span><span style="color:#E06C75;"> cacheLock </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ReentrantReadWriteLock</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> V</span><span style="color:#61AFEF;"> get</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">K</span><span style="color:#E06C75;font-style:italic;"> key</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        cacheLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readLock</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        V</span><span style="color:#E06C75;"> value</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            value </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> cacheMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(key);</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;%s 读数据 %s:%s&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">(), key, value);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            cacheLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readLock</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> value;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> V</span><span style="color:#61AFEF;"> put</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">K</span><span style="color:#E06C75;font-style:italic;"> key</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">V</span><span style="color:#E06C75;font-style:italic;"> value</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        cacheLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLock</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            cacheMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(key, value);</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;%s 写入数据 %s:%s&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentThread</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">(), key, value);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            cacheLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLock</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> value;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#E5C07B;"> V</span><span style="color:#61AFEF;"> remove</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">K</span><span style="color:#E06C75;font-style:italic;"> key</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        cacheLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLock</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E5C07B;"> cacheMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">remove</span><span style="color:#ABB2BF;">(key);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            cacheLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLock</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> clear</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        cacheLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLock</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">lock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">cacheMap</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">clear</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            cacheLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLock</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">unlock</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><p><strong>StampedLock</strong> 把读锁细分为乐观读和悲观读，进一步提升并发效率</p><ul><li>支持三种模式：写锁、悲观读锁、乐观读</li><li>不可重入锁</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Point</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> StampedLock</span><span style="color:#E06C75;"> stampedLock </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> StampedLock</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> double</span><span style="color:#E06C75;"> x</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> double</span><span style="color:#E06C75;"> y</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> move</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">double</span><span style="color:#E06C75;font-style:italic;"> deltaX</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">double</span><span style="color:#E06C75;font-style:italic;"> deltaY</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> stamp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> stampedLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">writeLock</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 获取写锁</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">            x </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> deltaX;</span></span>
<span class="line"><span style="color:#ABB2BF;">            y </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> deltaY;</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            stampedLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlockWrite</span><span style="color:#ABB2BF;">(stamp); </span><span style="color:#7F848E;font-style:italic;">// 释放写锁</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> double</span><span style="color:#61AFEF;"> distanceFromOrigin</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> stamp</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> stampedLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">tryOptimisticRead</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 获得一个乐观读锁</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 注意下面两行代码不是原子操作</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 假设x,y = (100,200)</span></span>
<span class="line"><span style="color:#C678DD;">        double</span><span style="color:#E06C75;"> currentX</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> x;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 此处已读取到x=100，但x,y可能被写线程修改为(300,400)</span></span>
<span class="line"><span style="color:#C678DD;">        double</span><span style="color:#E06C75;"> currentY</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> y;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 此处已读取到y，如果没有写入，读取是正确的(100,200)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果有写入，读取是错误的(100,400)</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">stampedLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(stamp)) { </span><span style="color:#7F848E;font-style:italic;">// 检查乐观读锁后是否有其他写锁发生</span></span>
<span class="line"><span style="color:#ABB2BF;">            stamp </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> stampedLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">readLock</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">// 获取一个悲观读锁</span></span>
<span class="line"><span style="color:#C678DD;">            try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">                currentX </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> x;</span></span>
<span class="line"><span style="color:#ABB2BF;">                currentY </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> y;</span></span>
<span class="line"><span style="color:#ABB2BF;">            } </span><span style="color:#C678DD;">finally</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                stampedLock</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">unlockRead</span><span style="color:#ABB2BF;">(stamp); </span><span style="color:#7F848E;font-style:italic;">// 释放悲观读锁</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sqrt</span><span style="color:#ABB2BF;">(currentX </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> currentX </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> currentY </span><span style="color:#56B6C2;">*</span><span style="color:#ABB2BF;"> currentY);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>AQS <br> AbstractQueuedSynchronizer，队列同步器，其主要作用是处理同步。提供了对独享锁与共享锁的支持</p><ul><li>使用一个整型的 volatile 变量state 维护同步状态。状态的意义由子类赋予。</li><li>维护了一个 Node 类型的双链表来完成同步状态的管理，用来存储获取锁失败的线程。</li></ul><h3 id="线程池" tabindex="-1">线程池 <a class="header-anchor" href="#线程池" aria-label="Permalink to &quot;线程池&quot;">​</a></h3><p>一种多线程处理形式，处理过程中将任务添加到队列，然后在创建线程后自动启动这些任务</p><ul><li><strong>降低资源消耗</strong> - 通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度</strong> - 当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong> - 线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</li></ul><p>Executor - 运行任务的简单接口</p><ul><li>ExecutorService - 扩展了 Executor <ul><li>支持有返回值的线程 - sumbit、invokeAll、invokeAny 方法中都支持传入Callable 对象。</li><li>支持管理线程生命周期 - shutdown、shutdownNow、isShutdown 等方法。</li></ul></li><li>ScheduledExecutorService - 扩展了 ExecutorService 接口。支持定期执行任务。</li><li>AbstractExecutorService - ExecutorService 接口的默认实现。</li><li>ThreadPoolExecutor - Executor 框架最核心的类，它继承了 AbstractExecutorService 类。</li><li>ScheduledThreadPoolExecutor - ScheduledExecutorService 接口的实现，一个可定时调度任务的线程池。</li></ul><p>Executors <br> 创建线程池的静态方法</p><ul><li>ExecutorService newCachedThreadPool()：一个具有缓存功能的线程池，系统根据需要创建线程（<strong>无界线程池</strong>，已有 60 秒钟未被使用的线程会被终止并从缓存中移除） <br> <code>new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;())</code></li><li>ExecutorService newFixedThreadPool(int nThreads)：一个可重用的、<strong>具有固定核心线程数的线程池</strong> <br> （使用无界队列，<strong>队列堆积太多</strong>数据导致 OOM） <br> <code>new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;())</code></li><li>ExecutorService newSingleThreadExecutor()：一个<strong>单线程的线程池</strong> <br> <code>new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;()</code>)</li><li>ScheduledExecutorService newScheduledThreadPool(int corePoolSize)：一个线程池，可在指定延迟后执行或定期执行线程任务 <br> <code>new ThreadPoolExecutor(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS, new DelayedWorkQueue())</code></li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Main</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 创建一个固定大小的线程池:</span></span>
<span class="line"><span style="color:#E5C07B;">        ExecutorService</span><span style="color:#E06C75;"> es</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> Executors</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">newFixedThreadPool</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 6</span><span style="color:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="color:#E5C07B;">            es</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">submit</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#61AFEF;"> Task</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> i));</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 关闭线程池:</span></span>
<span class="line"><span style="color:#E5C07B;">        es</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">shutdown</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> Task</span><span style="color:#C678DD;"> implements</span><span style="color:#E5C07B;"> Runnable</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> final</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> Task</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> name</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> run</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;start task &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> name);</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;end task &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> name);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>ForkJoinPool <br> 线程池的实现类，将一个任务拆分成多个“小任务”并行计算，再把多个“小任务”的结果合成总的计算结果</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Main</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 创建2000个随机数组成的数组:</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">array</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> long</span><span style="color:#ABB2BF;">[</span><span style="color:#D19A66;">2000</span><span style="color:#ABB2BF;">];</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> expectedSum</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">        for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E5C07B;"> array</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="color:#ABB2BF;">            array[i] </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> random</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">            expectedSum </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> array[i];</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Expected sum: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> expectedSum);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // fork/join:</span></span>
<span class="line"><span style="color:#E5C07B;">        ForkJoinTask</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Long</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">task</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SumTask</span><span style="color:#ABB2BF;">(array, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> startTime</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentTimeMillis</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        Long</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> ForkJoinPool</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">commonPool</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">invoke</span><span style="color:#ABB2BF;">(task);</span></span>
<span class="line"><span style="color:#C678DD;">        long</span><span style="color:#E06C75;"> endTime</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> System</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">currentTimeMillis</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Fork/join sum: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> result </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; in &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> (endTime </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> startTime) </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; ms.&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E5C07B;"> Random</span><span style="color:#E06C75;"> random </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> Random</span><span style="color:#E06C75;">(</span><span style="color:#D19A66;">0</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> long</span><span style="color:#61AFEF;"> random</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#E5C07B;"> random</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">nextInt</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E5C07B;"> SumTask</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> RecursiveTask</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Long</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#C678DD;"> final</span><span style="color:#C678DD;"> int</span><span style="color:#E06C75;"> THRESHOLD </span><span style="color:#56B6C2;">=</span><span style="color:#D19A66;"> 500</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;">[] array</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> start</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> end</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">    SumTask</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">array</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> start</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;font-style:italic;"> end</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">array</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> array;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">start</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> start;</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">end</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> end;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    @</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#E5C07B;"> Long</span><span style="color:#61AFEF;"> compute</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (end </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> start </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#ABB2BF;"> THRESHOLD) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">            // 如果任务足够小,直接计算:</span></span>
<span class="line"><span style="color:#C678DD;">            long</span><span style="color:#E06C75;"> sum</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 0</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> start; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> end; i++) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                sum </span><span style="color:#56B6C2;">+=</span><span style="color:#E5C07B;"> this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">[i];</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">                // 故意放慢计算速度:</span></span>
<span class="line"><span style="color:#C678DD;">                try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">                    Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">                } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">                }</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#ABB2BF;"> sum;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 任务太大,一分为二:</span></span>
<span class="line"><span style="color:#C678DD;">        int</span><span style="color:#E06C75;"> middle</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> (end </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> start) </span><span style="color:#56B6C2;">/</span><span style="color:#D19A66;"> 2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">format</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;split %d~%d ==&gt; %d~%d, %d~%d&quot;</span><span style="color:#ABB2BF;">, start, end, start, middle, middle, end));</span></span>
<span class="line"><span style="color:#E5C07B;">        SumTask</span><span style="color:#E06C75;"> subtask1</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SumTask</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">, start, middle);</span></span>
<span class="line"><span style="color:#E5C07B;">        SumTask</span><span style="color:#E06C75;"> subtask2</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> SumTask</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">array</span><span style="color:#ABB2BF;">, middle, end);</span></span>
<span class="line"><span style="color:#61AFEF;">        invokeAll</span><span style="color:#ABB2BF;">(subtask1, subtask2);</span></span>
<span class="line"><span style="color:#E5C07B;">        Long</span><span style="color:#E06C75;"> subresult1</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> subtask1</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        Long</span><span style="color:#E06C75;"> subresult2</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> subtask2</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">        Long</span><span style="color:#E06C75;"> result</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> subresult1 </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> subresult2;</span></span>
<span class="line"><span style="color:#E5C07B;">        System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;result = &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> subresult1 </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; + &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> subresult2 </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot; ==&gt; &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> result);</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> result;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div><h3 id="completablefuture" tabindex="-1">CompletableFuture <a class="header-anchor" href="#completablefuture" aria-label="Permalink to &quot;CompletableFuture&quot;">​</a></h3><ul><li><code>implements Future&lt;T&gt;, CompletionStage&lt;T&gt;</code></li><li>组合式异步编程，可以传入回调对象，当异步任务完成或者发生异常时，自动调用回调对象的回调方法</li></ul><p>静态方法</p><ul><li><code>CompletableFuture&lt;Void&gt; runAsync(Runnable runnable)</code></li><li><code>CompletableFuture&lt;Void&gt; runAsync(Runnable runnable, Executor executor)</code></li><li><code>CompletableFuture&lt;U&gt; supplyAsync(Supplier&lt;U&gt; supplier)</code>：使用公共的线程池 ForkJoinPool 执行异步任务</li><li><code>CompletableFuture&lt;U&gt; supplyAsync(Supplier&lt;U&gt; supplier, Executor executor)</code>：使用指定的线程池执行异步任务</li><li>组合多个 CompletableFuture <ul><li><code>CompletableFuture&lt;Void&gt; allOf(CompletableFuture&lt;?&gt;... cfs)</code>：等待数组中的所有 CompletableFuture 对象都执行完毕</li><li><code>CompletableFuture&lt;Object&gt; anyOf(CompletableFuture&lt;?&gt;... cfs)</code>：只要数组有任何一个 CompletableFuture 对象执行完毕就不再等待，返回由第一个执行完毕的 CompletableFuture 对象的返回值构成的 CompletableFuture</li></ul></li></ul><p>实例方法</p><ul><li>T join()：阻塞直到返回完成时的结果值，如果遇到异常则抛出 unchecked exception</li><li>定义处理 CompletableFuture 的返回结果，即回调函数 <ul><li><code>CompletableFuture&lt;Void&gt; thenRun(Runnable action)</code></li><li><code>CompletableFuture&lt;Void&gt; thenAccept(Consumer&lt;? super T&gt; action)</code></li><li><code>CompletableFuture&lt;U&gt; thenApply(Function&lt;? super T, ? extends U&gt; fn)</code></li></ul></li><li>组合两个 CompletableFuture <ul><li><code>CompletableFuture&lt;U&gt; thenCompose(Function&lt;? super T, ? extends CompletionStage&lt;U&gt;&gt; fn)</code>：对两个异步操作进行流水线，第一个操作完成后，将其结果作为参数传递给第二个操作</li><li><code>CompletableFuture&lt;V&gt; thenCombine(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? super T,? super U,? extends V&gt; fn)</code>：当两个 CompletableFuture 对象完成计算后，将结果合并</li></ul></li><li>异常处理（如果异常发生，res 参数将是 null，否则 ex 将是 null） <ul><li><code>ConnectionFuture&lt;T&gt; exceptionally(Function&lt;Throwable, ? extends T&gt; fn)</code>：仅在异常时回调，可在异常时返回特定值用于回退</li><li><code>ConnectionFuture&lt;T&gt; whenComplete(BiConsumer&lt;? super T, ? super Throwable&gt; action)</code>：无论异常是否发生都会被调用</li><li><code>ConnectionFuture&lt;U&gt; handle(BiFunction&lt;? super T, Throwable, ? extends U&gt; fn)</code>：无论异常是否发生都会被调用，可在异常时返回特定值用于回退</li></ul></li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> Main</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> Exception</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 创建异步执行任务:</span></span>
<span class="line"><span style="color:#E5C07B;">        CompletableFuture</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">Double</span><span style="color:#ABB2BF;">&gt; </span><span style="color:#E06C75;">cf</span><span style="color:#56B6C2;"> =</span><span style="color:#E5C07B;"> CompletableFuture</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">supplyAsync</span><span style="color:#ABB2BF;">(Main</span><span style="color:#C678DD;">::</span><span style="color:#ABB2BF;">fetchPrice);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果执行成功:</span></span>
<span class="line"><span style="color:#E5C07B;">        cf</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">thenAccept</span><span style="color:#ABB2BF;">((result) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;price: &quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> result);</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 如果执行异常:</span></span>
<span class="line"><span style="color:#E5C07B;">        cf</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">exceptionally</span><span style="color:#ABB2BF;">((e) </span><span style="color:#C678DD;">-&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        });</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">        // 主线程不要立刻结束，否则CompletableFuture默认使用的线程池会立刻关闭:</span></span>
<span class="line"><span style="color:#E5C07B;">        Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">200</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    static</span><span style="color:#E5C07B;"> Double</span><span style="color:#61AFEF;"> fetchPrice</span><span style="color:#ABB2BF;">()</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            Thread</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sleep</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">InterruptedException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&lt;</span><span style="color:#D19A66;"> 0.3</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> RuntimeException</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;fetch price failed!&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> 5</span><span style="color:#56B6C2;"> +</span><span style="color:#E5C07B;"> Math</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">random</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">*</span><span style="color:#D19A66;"> 20</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="jvm" tabindex="-1">JVM <a class="header-anchor" href="#jvm" aria-label="Permalink to &quot;JVM&quot;">​</a></h2><p>JVM 体系结构</p><ul><li>JVM 指令集</li><li>类加载器</li><li>执行引擎 - 相当于 JVM 的 CPU</li><li>内存区 - JVM 的存储</li><li>本地方法调用 - 调用 C/C++ 实现的本地方法</li></ul><p>Hotspot 是最流行的 JVM <br> <img src="`+p+'" alt="jvm-hotspot-architecture.png"></p><h3 id="运行时数据区域" tabindex="-1">运行时数据区域 <a class="header-anchor" href="#运行时数据区域" aria-label="Permalink to &quot;运行时数据区域&quot;">​</a></h3><p><img src="'+e+`" alt="jvm-memory-runtime-data-area.png"></p><p>程序计数器（Program Counter Register）：一块较小的内存空间，可看做是当前线程所执行的字节码的行号指示器 <br> Java 虚拟机栈（Java Virtual Machine Stacks）：生命周期与线程相同；为 Java 方法服务 <br> 本地方法栈（Native Method Stack）：与虚拟机栈的作用相似；为 Native 方法服务 <br> Java 堆（Java Heap） ：存放对象实例，垃圾收集器管理的主要区域，即GC 堆</p><ul><li>新生代（Young Generation） <ul><li>Eden - Eden 和 Survivor 的比例为 8:1</li><li>From Survivor</li><li>To Survivor</li></ul></li><li>老年代（Old Generation）</li><li><s>永久代（Permanent Generation）</s>：方法区（Method Area），用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li></ul><p>1.8 hotspot 移除了永久代用元空间(Metaspace)取而代之</p><ul><li>运行时常量池（Runtime Constant Pool）：方法区的一部分，Class 文件中除了有类的版本、字段、方法、接口等描述信息，还有一项信息是常量池（Constant Pool Table），用于存放编译器生成的各种字面量和符号引用</li></ul><table><thead><tr><th>内存区域</th><th>内存作用范围</th><th>异常</th></tr></thead><tbody><tr><td>程序计数器</td><td>线程私有</td><td>无</td></tr><tr><td>Java 虚拟机栈</td><td>线程私有</td><td>StackOverflowError 和 OutOfMemoryError</td></tr><tr><td>本地方法栈</td><td>线程私有</td><td>StackOverflowError 和 OutOfMemoryError</td></tr><tr><td>Java 堆</td><td>线程共享</td><td>OutOfMemoryError</td></tr><tr><td>方法区</td><td>线程共享</td><td>OutOfMemoryError</td></tr><tr><td>直接内存</td><td>非运行时数据区</td><td>OutOfMemoryError</td></tr></tbody></table><p><strong>回收策略</strong></p><ul><li>Minor GC：当 Eden 区空间不足时，年轻代对象存活时间很短，因此 Minor GC 会频繁执行，执行的速度一般也会比较快</li><li>Full GC <ul><li>调用 System.gc()</li><li>老年代空间不足</li><li>方法区空间不足</li><li>Minor GC 的平均晋升空间大小大于老年代可用空间</li><li>对象大小大于 To 区和老年代的可用内存</li></ul></li></ul><p><strong>内存分配策略</strong></p><ul><li>对象优先在 Eden 分配</li><li>大对象直接进入老年代</li><li>长期存活的对象进入老年代</li><li>动态对象年龄判定</li><li>空间分配担保</li></ul><h3 id="垃圾收集" tabindex="-1">垃圾收集 <a class="header-anchor" href="#垃圾收集" aria-label="Permalink to &quot;垃圾收集&quot;">​</a></h3><h4 id="可达性分析算法" tabindex="-1">可达性分析算法 <a class="header-anchor" href="#可达性分析算法" aria-label="Permalink to &quot;可达性分析算法&quot;">​</a></h4><p>通过 GC Roots 作为起始点进行搜索，JVM 将能够到达到的对象视为存活，不可达的对象视为死亡</p><p><strong>GC Roots 的对象</strong></p><ul><li>虚拟机栈中引用的对象</li><li>本地方法栈中引用的对象（Native 方法）</li><li>方法区中，类静态属性引用的对象</li><li>方法区中，常量引用的对象</li></ul><h4 id="引用类型" tabindex="-1">引用类型 <a class="header-anchor" href="#引用类型" aria-label="Permalink to &quot;引用类型&quot;">​</a></h4><ul><li>强引用（Strong Reference）：不会被垃圾收集器回收，如使用 new 一个新对象</li><li>软引用（Soft Reference）：只有在内存不够的情况下才会被回收；SoftReference 类</li><li>弱引用（Weak Reference）：一定会被垃圾收集器回收；WeakReference 类</li><li>虚引用（Phantom Reference）：一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用取得一个对象实例；为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知；PhantomReference类</li></ul><h4 id="垃圾收集算法" tabindex="-1">垃圾收集算法 <a class="header-anchor" href="#垃圾收集算法" aria-label="Permalink to &quot;垃圾收集算法&quot;">​</a></h4><p><strong>垃圾收集器的性能指标</strong></p><ul><li>停顿时间 - 因为 GC 而导致程序不能工作的时间长度。</li><li>吞吐量 - 关注在特定的时间周期内一个应用的工作量的最大值。</li></ul><p><strong>标记 - 清除（Mark-Sweep）</strong>：将需要回收的对象进行标记，然后清理掉被标记的对象。</p><ul><li>标记和清除过程效率都不高；</li><li>会产生大量不连续的内存碎片，导致无法给大对象分配内存。</li></ul><p><strong>标记 - 整理（Mark-Compact）</strong>：让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><ul><li>能够解决内存碎片化的问题，但代价是压缩算法的性能开销</li></ul><p>**复制（Copying）：**将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。</p><ul><li>主要不足是只使用了内存的一半</li></ul><p>**分代收集：**根据对象存活周期将内存划分为几块，不同块采用适当的收集算法</p><ul><li>年轻代：<strong>复制</strong> 算法</li><li>老年代：<strong>标记 - 清理</strong> 或者 <strong>标记 - 整理</strong> 算法</li></ul><p>参数</p><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>-Xss</td><td>虚拟机栈大小。</td></tr><tr><td>-Xms</td><td>堆空间初始值。</td></tr><tr><td>-Xmx</td><td>堆空间最大值。</td></tr><tr><td>-Xmn</td><td>新生代空间大小。</td></tr><tr><td>-XX:NewSize</td><td>新生代空间初始值。</td></tr><tr><td>-XX:MaxNewSize</td><td>新生代空间最大值。</td></tr><tr><td>-XX:NewRatio</td><td>新生代与年老代的比例。默认为 2，意味着老年代是新生代的 2 倍。</td></tr><tr><td>-XX:SurvivorRatio</td><td>新生代中调整 eden 区与 survivor 区的比例，默认为 8。即 eden 区为 80% 的大小，两个 survivor 分别为 10% 的大小。</td></tr><tr><td>-XX:PermSize</td><td>永久代空间的初始值。</td></tr><tr><td>-XX:MaxPermSize</td><td>永久代空间的最大值。</td></tr></tbody></table><h4 id="垃圾收集器-garbage-collector" tabindex="-1">垃圾收集器 Garbage Collector <a class="header-anchor" href="#垃圾收集器-garbage-collector" aria-label="Permalink to &quot;垃圾收集器 Garbage Collector&quot;">​</a></h4><table><thead><tr><th>收集器</th><th>运行方式</th><th>代</th><th>收集算法</th><th>目标</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Serial</strong></td><td>串行</td><td>年轻代</td><td>复制</td><td>响应速度优先</td><td>单 CPU 环境下的 Client 模式</td></tr><tr><td><strong>Serial Old</strong></td><td>串行</td><td>老年代</td><td>标记-整理</td><td>响应速度优先</td><td>单 CPU 环境下的 Client 模式、CMS 的后备预案</td></tr><tr><td><strong>ParNew</strong></td><td>串行 + 并行</td><td>年轻代</td><td>复制算法</td><td>响应速度优先</td><td>多 CPU 环境时在 Server 模式下与 CMS 配合</td></tr><tr><td><strong>Parallel Scavenge</strong></td><td>串行 + 并行</td><td>年轻代</td><td>复制算法</td><td>吞吐量优先</td><td>在后台运算而不需要太多交互的任务</td></tr><tr><td><strong>Parallel Old</strong></td><td>串行 + 并行</td><td>老年代</td><td>标记-整理</td><td>吞吐量优先</td><td>在后台运算而不需要太多交互的任务</td></tr><tr><td><strong>CMS</strong> <br> 并发标记清除收集器</td><td>并行 + 并发</td><td>老年代</td><td>标记-清除</td><td>响应速度优先</td><td>集中在互联网站或 B/S 系统服务端上的 Java 应用</td></tr><tr><td><strong>G1</strong></td><td>并行 + 并发</td><td>年轻代 + 老年代</td><td>标记-整理 + 复制算法</td><td>响应速度优先</td><td>面向服务端应用，将来替换 CMS</td></tr></tbody></table><h3 id="字节码" tabindex="-1">字节码 <a class="header-anchor" href="#字节码" aria-label="Permalink to &quot;字节码&quot;">​</a></h3><p>.class 文件是一组以 8 位字节为基础单位的二进制流</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">ClassFile {</span></span>
<span class="line"><span style="color:#ABB2BF;">    u4             magic;</span><span style="color:#7F848E;font-style:italic;"> //Class 文件的标志</span></span>
<span class="line"><span style="color:#ABB2BF;">    u2             minor_version;</span><span style="color:#7F848E;font-style:italic;">//Class 的小版本号</span></span>
<span class="line"><span style="color:#ABB2BF;">    u2             major_version;</span><span style="color:#7F848E;font-style:italic;">//Class 的大版本号</span></span>
<span class="line"><span style="color:#ABB2BF;">    u2             constant_pool_count;</span><span style="color:#7F848E;font-style:italic;">//常量池的数量</span></span>
<span class="line"><span style="color:#ABB2BF;">    cp_info        </span><span style="color:#E06C75;">constant_pool</span><span style="color:#ABB2BF;">[constant_pool_count</span><span style="color:#C678DD;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">];</span><span style="color:#7F848E;font-style:italic;">//常量池</span></span>
<span class="line"><span style="color:#ABB2BF;">    u2             access_flags;</span><span style="color:#7F848E;font-style:italic;">//Class 的访问标记</span></span>
<span class="line"><span style="color:#ABB2BF;">    u2             this_class;</span><span style="color:#7F848E;font-style:italic;">//当前类</span></span>
<span class="line"><span style="color:#ABB2BF;">    u2             super_class;</span><span style="color:#7F848E;font-style:italic;">//父类</span></span>
<span class="line"><span style="color:#ABB2BF;">    u2             interfaces_count;</span><span style="color:#7F848E;font-style:italic;">//接口</span></span>
<span class="line"><span style="color:#ABB2BF;">    u2             </span><span style="color:#E06C75;">interfaces</span><span style="color:#ABB2BF;">[interfaces_count];</span><span style="color:#7F848E;font-style:italic;">//一个类可以实现多个接口</span></span>
<span class="line"><span style="color:#ABB2BF;">    u2             fields_count;</span><span style="color:#7F848E;font-style:italic;">//Class 文件的字段属性</span></span>
<span class="line"><span style="color:#ABB2BF;">    field_info     </span><span style="color:#E06C75;">fields</span><span style="color:#ABB2BF;">[fields_count];</span><span style="color:#7F848E;font-style:italic;">//一个类会可以有多个字段</span></span>
<span class="line"><span style="color:#ABB2BF;">    u2             methods_count;</span><span style="color:#7F848E;font-style:italic;">//Class 文件的方法数量</span></span>
<span class="line"><span style="color:#ABB2BF;">    method_info    </span><span style="color:#E06C75;">methods</span><span style="color:#ABB2BF;">[methods_count];</span><span style="color:#7F848E;font-style:italic;">//一个类可以有个多个方法</span></span>
<span class="line"><span style="color:#ABB2BF;">    u2             attributes_count;</span><span style="color:#7F848E;font-style:italic;">//此类的属性表中的属性数</span></span>
<span class="line"><span style="color:#ABB2BF;">    attribute_info </span><span style="color:#E06C75;">attributes</span><span style="color:#ABB2BF;">[attributes_count];</span><span style="color:#7F848E;font-style:italic;">//属性表集合</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>魔数（Magic Number） <br> Class 文件的头 4 个字节，固定值为 <code>0xCAFEBABE</code>，用来判断是否为.class文件</p><h3 id="类加载" tabindex="-1">类加载 <a class="header-anchor" href="#类加载" aria-label="Permalink to &quot;类加载&quot;">​</a></h3><p>类的加载：将类的 .class 文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构</p><p>类的生命周期</p><p><img src="`+o+`" alt="class.png"></p><p>加载（Loading） 查找字节流，并且据此创建类 <br> 链接（Linking）</p><ul><li>验证（Verification） 确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求</li><li>准备（Preparation） 为 static 变量在方法区分配内存并初始化为默认值，使用的是方法区的内存</li><li>解析（Resolution） 将常量池的符号引用替换为直接引用</li></ul><p>初始化（Initialization） 开始执行类中的定义的 Java 程序代码，为类的静态变量赋予正确的初始值 <br> 使用（Using） <br> 卸载（Unloading）</p><ul><li><strong>符号引用（Symbolic References）</strong> - 符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。</li><li><strong>直接引用（Direct Reference）</strong> - 直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。</li></ul><h3 id="classloader" tabindex="-1">ClassLoader <a class="header-anchor" href="#classloader" aria-label="Permalink to &quot;ClassLoader&quot;">​</a></h3><p>类加载器，负责将类加载到 JVM</p><ul><li><strong>Bootstrap ClassLoader</strong>：启动类加载器 ，由 C++ 实现，由 JVM 自己控制，加载 JVM 自身工作所需要的类，即 将 <code>&lt;JAVA_HOME&gt;\\lib</code>或被 -Xbootclasspath 参数所指定的路径的，并且是虚拟机识别的类库加载到虚拟机内存中</li><li><strong>ExtClassLoader</strong>：扩展类加载器，将 <code>&lt;JAVA_HOME&gt;\\lib\\ext</code> 或者被 java.ext.dir 系统变量所指定路径中的所有类库加载到内存中，可以直接使用扩展类加载器</li><li><strong>AppClassLoader</strong>：应用程序类加载器，加载用户类路径（即 classpath）上所指定的类库</li></ul><p>自定义类加载器</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> class</span><span style="color:#E5C07B;"> FileSystemClassLoader</span><span style="color:#C678DD;"> extends</span><span style="color:#E5C07B;"> ClassLoader</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> String</span><span style="color:#E06C75;"> rootDir</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    public</span><span style="color:#61AFEF;"> FileSystemClassLoader</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> rootDir</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">rootDir</span><span style="color:#56B6C2;"> =</span><span style="color:#ABB2BF;"> rootDir;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    protected</span><span style="color:#E5C07B;"> Class</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#C678DD;">?</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#61AFEF;"> findClass</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> name</span><span style="color:#ABB2BF;">)</span><span style="color:#C678DD;"> throws</span><span style="color:#E5C07B;"> ClassNotFoundException</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">classData</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> getClassData</span><span style="color:#ABB2BF;">(name);</span></span>
<span class="line"><span style="color:#C678DD;">        if</span><span style="color:#ABB2BF;"> (classData </span><span style="color:#56B6C2;">==</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">            throw</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ClassNotFoundException</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#61AFEF;"> defineClass</span><span style="color:#ABB2BF;">(name, classData, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">classData</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#C678DD;"> byte</span><span style="color:#61AFEF;">[] getClassData</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> className</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">        String</span><span style="color:#E06C75;"> path</span><span style="color:#56B6C2;"> =</span><span style="color:#61AFEF;"> classNameToPath</span><span style="color:#ABB2BF;">(className);</span></span>
<span class="line"><span style="color:#C678DD;">        try</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#E5C07B;">            InputStream</span><span style="color:#E06C75;"> ins</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> FileInputStream</span><span style="color:#ABB2BF;">(path);</span></span>
<span class="line"><span style="color:#E5C07B;">            ByteArrayOutputStream</span><span style="color:#E06C75;"> baos</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ByteArrayOutputStream</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> bufferSize</span><span style="color:#56B6C2;"> =</span><span style="color:#D19A66;"> 4096</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            byte</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;">buffer</span><span style="color:#56B6C2;"> =</span><span style="color:#C678DD;"> new</span><span style="color:#C678DD;"> byte</span><span style="color:#ABB2BF;">[bufferSize];</span></span>
<span class="line"><span style="color:#C678DD;">            int</span><span style="color:#E06C75;"> bytesNumRead</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">            while</span><span style="color:#ABB2BF;"> ((bytesNumRead </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ins</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">read</span><span style="color:#ABB2BF;">(buffer)) </span><span style="color:#56B6C2;">!=</span><span style="color:#56B6C2;"> -</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">                baos</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(buffer, </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">, bytesNumRead);</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#C678DD;">            return</span><span style="color:#E5C07B;"> baos</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">toByteArray</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        } </span><span style="color:#C678DD;">catch</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">IOException</span><span style="color:#E06C75;font-style:italic;"> e</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#E5C07B;">            e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#D19A66;"> null</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    private</span><span style="color:#E5C07B;"> String</span><span style="color:#61AFEF;"> classNameToPath</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;font-style:italic;"> className</span><span style="color:#ABB2BF;">)</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#C678DD;">        return</span><span style="color:#ABB2BF;"> rootDir </span><span style="color:#56B6C2;">+</span><span style="color:#E5C07B;"> File</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">separatorChar</span></span>
<span class="line"><span style="color:#56B6C2;">                +</span><span style="color:#E5C07B;"> className</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replace</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;.&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">File</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">separatorChar</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">+</span><span style="color:#98C379;"> &quot;.class&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>双亲委派模型（Parents Delegation Model） <br> 一个类加载器首先将类加载请求传送到父类加载器，只有当父类加载器无法完成类加载请求时才尝试加载</p><table><thead><tr><th>参数选项</th><th>ClassLoader 类型</th><th>说明</th></tr></thead><tbody><tr><td>-Xbootclasspath</td><td>Bootstrap ClassLoader</td><td>设置 Bootstrap ClassLoader 搜索路径</td></tr><tr><td>-Xbootclasspath/a</td><td>Bootstrap ClassLoader</td><td>把路径添加到已存在的 Bootstrap ClassLoader 搜索路径后面</td></tr><tr><td>-Xbootclasspath/p</td><td>Bootstrap ClassLoader</td><td>把路径添加到已存在的 Bootstrap ClassLoader 搜索路径前面</td></tr><tr><td>-Djava.ext.dirs</td><td>ExtClassLoader</td><td>设置 ExtClassLoader 搜索路径</td></tr><tr><td>-Djava.class.path 或 -cp 或 -classpath</td><td>AppClassLoader</td><td>设置 AppClassLoader 搜索路径</td></tr></tbody></table><h2 id="jmx" tabindex="-1">JMX <a class="header-anchor" href="#jmx" aria-label="Permalink to &quot;JMX&quot;">​</a></h2><p>Java Management Extensions 是 Java SE 平台的标准功能，提供了一种简单的、标准的监控和管理资源的方式，对于如何定义一个资源给出了明确的结构和设计模式，主要用于监控和管理 Java 应用程序运行状态、设备和资源信息、Java 虚拟机运行情况等信息。 <br> <img src="`+r+`" alt=""></p><p>java.lang.management</p><ul><li>类加载相关</li><li>JVM 相关，如运行时间、系统环境变量、用户输入参数</li><li>线程相关，如线程状态，线程的统计信息、线程的堆栈等</li><li>内存使用情况</li><li>GC 情况</li><li>死锁检测</li><li>操作系统信息</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) {</span></span>
<span class="line"><span style="color:#E5C07B;">    OperatingSystemMXBean</span><span style="color:#E06C75;"> operatingSystemMXBean </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ManagementFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getOperatingSystemMXBean</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    String</span><span style="color:#E06C75;"> osName </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> operatingSystemMXBean</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    String</span><span style="color:#E06C75;"> osVersion </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> operatingSystemMXBean</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getVersion</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    int</span><span style="color:#E06C75;"> processors </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> operatingSystemMXBean</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getAvailableProcessors</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;操作系统：%s，版本：%s，处理器：%d 个%n&quot;</span><span style="color:#ABB2BF;">, osName, osVersion, processors);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    CompilationMXBean</span><span style="color:#E06C75;"> compilationMXBean </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ManagementFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getCompilationMXBean</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    String</span><span style="color:#E06C75;"> compilationMXBeanName </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> compilationMXBean</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getName</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;编译系统：&quot;</span><span style="color:#56B6C2;"> +</span><span style="color:#ABB2BF;"> compilationMXBeanName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    MemoryMXBean</span><span style="color:#E06C75;"> memoryMXBean </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ManagementFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMemoryMXBean</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    MemoryUsage</span><span style="color:#E06C75;"> heapMemoryUsage </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> memoryMXBean</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHeapMemoryUsage</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> max </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> heapMemoryUsage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMax</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">    long</span><span style="color:#E06C75;"> used </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> heapMemoryUsage</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUsed</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">    System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printf</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;使用内存：%dMB/%dMB%n&quot;</span><span style="color:#ABB2BF;">, used </span><span style="color:#56B6C2;">/</span><span style="color:#D19A66;"> 1024</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 1024</span><span style="color:#ABB2BF;">, max </span><span style="color:#56B6C2;">/</span><span style="color:#D19A66;"> 1024</span><span style="color:#56B6C2;"> /</span><span style="color:#D19A66;"> 1024</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><strong>使用</strong></p><ol><li>编写资源管理 MBean</li><li>注册资源到 MBean Server</li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#C678DD;"> static</span><span style="color:#C678DD;"> void</span><span style="color:#61AFEF;"> main</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] args) throws MalformedObjectNameException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> NotCompliantMBeanException</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    InstanceAlreadyExistsException</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;"> MBeanRegistrationException {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 获取 MBean Server</span></span>
<span class="line"><span style="color:#E5C07B;">    MBeanServer</span><span style="color:#E06C75;"> platformMBeanServer </span><span style="color:#56B6C2;">=</span><span style="color:#E5C07B;"> ManagementFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPlatformMBeanServer</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">    TestMBean</span><span style="color:#E06C75;"> testMBean </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> TestMBean</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    // 注册</span></span>
<span class="line"><span style="color:#E5C07B;">    ObjectName</span><span style="color:#E06C75;"> objectName </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#61AFEF;"> ObjectName</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;me.ylem.jmx:type=testMBean&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">    platformMBeanServer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">registerMBean</span><span style="color:#ABB2BF;">(testMBean, objectName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>远程访问</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">java</span><span style="color:#D19A66;"> -Dcom.sun.management.jmxremote=true</span><span style="color:#56B6C2;"> \\ </span><span style="color:#7F848E;font-style:italic;"> # 开启远程访问</span></span>
<span class="line"><span style="color:#61AFEF;">-Dcom.sun.management.jmxremote.port</span><span style="color:#ABB2BF;">=8398 </span><span style="color:#56B6C2;">\\	</span><span style="color:#7F848E;font-style:italic;">	# 自定义 JMX 端口</span></span>
<span class="line"><span style="color:#61AFEF;">-Dcom.sun.management.jmxremote.ssl</span><span style="color:#ABB2BF;">=</span><span style="color:#56B6C2;">false</span><span style="color:#56B6C2;"> \\	</span><span style="color:#7F848E;font-style:italic;">	# 是否使用 SSL 协议</span></span>
<span class="line"><span style="color:#61AFEF;">-Dcom.sun.management.jmxremote.authenticate</span><span style="color:#ABB2BF;">=</span><span style="color:#56B6C2;">false</span><span style="color:#56B6C2;"> \\ </span><span style="color:#98C379;">#</span><span style="color:#98C379;"> 是否需要认证</span></span>
<span class="line"><span style="color:#61AFEF;">-Djava.rmi.server.hostname</span><span style="color:#ABB2BF;">=192.168.3.5 </span><span style="color:#98C379;">YourClass.java</span><span style="color:#7F848E;font-style:italic;"> # 当前机器 ip</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>jconsole 是 Java 自带的基于 JMX 技术的监控管理工具</p><h2 id="jdk-cli-tools" tabindex="-1">JDK CLI Tools <a class="header-anchor" href="#jdk-cli-tools" aria-label="Permalink to &quot;JDK CLI Tools&quot;">​</a></h2><p>jps (JVM Process Status）: 查看所有 Java 进程的启动类、传入参数和 Java 虚拟机参数等信息</p><ul><li>-m - 输出 JVM 启动时传递给 main() 的参数</li><li>-l - 输出主类的全名，如果进程执行的是 jar 包，输出 jar 路径</li><li>-v - 显示传递给 JVM 的参数</li><li>-q - 仅输出本地 JVM 进程 ID</li><li>-V - 仅输出本地 JVM 标识符</li></ul><p>jcmd：JVM 命令行调试工具，用于向 JVM 进程发送调试命令</p><p>jstat（JVM Statistics Monitoring Tool）: 用于收集 HotSpot 虚拟机各方面的运行数据 <br> <code>jstat [option] VMID [interval] [count]</code></p><ul><li>-class - 监视类装载、卸载数量、总空间以及类装载所耗费的时间</li><li>-compiler：显示 JIT 编译的相关信息</li><li>-gc：监视 Java 堆状况，包括 Eden 区、两个 survivor 区、老年代、永久代等区的容量、已用空间、GC 时间合计等信息。</li><li>-gccapacity：显示各个代的容量以及使用情况；</li><li>-gcmetacapacity：显示 Metaspace 的大小</li><li>-gcnew：显示新生代信息</li><li>-gcnewcapacity：显示新生代大小和使用情况</li><li>-gcold：显示老年代和永久代的信息</li><li>-gcoldcapacity：显示老年代的大小</li><li>-gcutil：显示垃圾回收统计信息</li><li>-gccause：显示垃圾回收的相关信息，同时显示最后一次或当前正在发生的垃圾回收的诱因</li><li>-printcompilation：输出 JIT 编译的方法信息</li></ul><p><code>jstat -gcutil &lt;pid&gt; 5000 100</code>：输出 GC 和内存占用汇总信息，每隔 5 秒输出一次，输出 100 次（其中，S0 表示 Survivor0 区占用百分比，S1 表示 Survivor1 区占用百分比，E 表示 Eden 区占用百分比，O 表示老年代占用百分比，M 表示元数据区占用百分比，YGC 表示新生代回收次数，YGCT 表示新生代回收耗时，FGC 表示老年代回收次数，FGCT 表示老年代回收耗时）</p><p>jstack (Stack Trace for Java) : 生成虚拟机当前时刻的线程快照，即当前虚拟机内每一条线程正在执行的方法堆栈的集合</p><p><strong>jinfo</strong>：JVM 信息查看工具，查看 JVM 的各种配置信息</p><p>jmap（Memory Map for Java）：JVM 堆内存分析工具，可以打印 VM 进程对象直方图、类加载统计，以及 <br> 做堆转储操作</p><ul><li><code>jmap -dump:format=b,file=/tmp/a.hprof &lt;pid&gt;</code>：生成虚拟机的堆内存转储快照（heapdump 文件）</li><li><code>jmap -heap &lt;pid&gt;</code>：显示堆详细信息，包括使用的 GC 算法、堆配置信息和各内存区域内存使用信息</li><li><code>jmap -histo:live &lt;pid&gt;</code>：显示堆中对象的统计信息，包括每个 Java 类的对象数量（只计算活动的对象）、内存大小</li></ul><p>jhat (JVM Heap Dump Browser) : 用于分析 heapdump 文件，它会建立一个 HTTP/HTML 服务器，可以在浏览器上查看分析结果</p><h3 id="gui-tools" tabindex="-1">GUI Tools <a class="header-anchor" href="#gui-tools" aria-label="Permalink to &quot;GUI Tools&quot;">​</a></h3><ul><li>jvisualvm(All-In-One Java Troubleshooting Tool) ：多合一故障处理工具。支持运行监视、故障处理、性能分析等功能</li><li><a href="https://www.eclipse.org/mat/" target="_blank" rel="noreferrer">MAT</a>（Eclipse Memory Analyzer Tool）能够获取堆的二进制快照</li><li><a href="https://www.ej-technologies.com/products/jprofiler/overview.html" target="_blank" rel="noreferrer">JProfiler</a>：一款性能分析工具</li></ul><p><a href="https://github.com/openjdk/jmc" target="_blank" rel="noreferrer">jmc</a> Java Mission Control 用于管理、监听、分析以及排除 Java 故障的高级工具 <br> <a href="https://github.com/openjdk/jmh" target="_blank" rel="noreferrer">jmh</a> Java Microbenchmark Harness 微基准测试工具</p><h2 id="resource" tabindex="-1">Resource <a class="header-anchor" href="#resource" aria-label="Permalink to &quot;Resource&quot;">​</a></h2><p>JVM/JDK</p><ul><li><a href="https://github.com/oracle/graal" target="_blank" rel="noreferrer">Graal</a> - Polyglot embeddable JVM</li><li><a href="https://openjdk.java.net/" target="_blank" rel="noreferrer">Open JDK</a> - Open JDK community home</li><li><a href="https://www.azul.com/products/zulu-community/" target="_blank" rel="noreferrer">Zulu</a> - OpenJDK builds for Windows, Linux, and macOS</li><li><a href="https://github.com/microsoft/openjdk" target="_blank" rel="noreferrer">Microsoft JDK</a> - Microsoft Build of OpenJDK, Free, Open Source</li></ul><p>Style:</p><ul><li><a href="https://github.com/google/styleguide" target="_blank" rel="noreferrer">google/styleguide</a></li><li><a href="https://github.com/alibaba/p3c" target="_blank" rel="noreferrer">alibaba/p3c</a></li><li><a href="https://github.com/checkstyle/checkstyle" target="_blank" rel="noreferrer">checkstyle</a></li></ul>`,191),B=[c];function i(y,b,F,u,A,C){return a(),n("div",null,B)}const E=s(t,[["render",i]]);export{d as __pageData,E as default};
