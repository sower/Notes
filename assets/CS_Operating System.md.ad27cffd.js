import{_ as e,c as l,o as i,a}from"./app.6a0e111d.js";const B=JSON.parse('{"title":"Operating System","description":"","frontmatter":{"title":"Operating System","created_at":"2022-02-01T05:44:39.000Z","updated_at":"2022-03-05T00:26:43.000Z","word_count":1682},"headers":[{"level":2,"title":"—— 操作系统（Operating System） ——","slug":"——-操作系统-operating-system-——","link":"#——-操作系统-operating-system-——","children":[]},{"level":2,"title":"进程 线程","slug":"进程-线程","link":"#进程-线程","children":[]},{"level":2,"title":"内存管理机制","slug":"内存管理机制","link":"#内存管理机制","children":[]}],"relativePath":"CS/Operating System.md"}'),r={name:"CS/Operating System.md"},s=a(`<h2 id="——-操作系统-operating-system-——" tabindex="-1">—— 操作系统（Operating System） —— <a class="header-anchor" href="#——-操作系统-operating-system-——" aria-hidden="true">#</a></h2><p>操作系统：一组主管并控制<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E8%AE%A1%E7%AE%97%E6%9C%BA" target="_blank" rel="noreferrer">计算机</a>操作、运用和运行硬件、软件资源和提供公共服务来组织用户交互的相互关联的系统软件程序，同时也是计算机系统的内核与基石。</p><p><strong>功能</strong></p><ul><li>进程管理（Processing management）</li><li>内存管理（Memory management）</li><li>文件系统（File system）：将资料以目录或文件的型式存储</li><li>网络通信（Networking）</li><li>安全机制（Security）</li><li>用户界面（User interface）</li><li>驱动程序（Device drivers）：与硬件交互的电脑软件</li></ul><p>内核（Kernel）是一个用来管理<a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E9%AB%94" target="_blank" rel="noreferrer">软件</a>发出的资料I/O（输入与输出）要求的电脑程序，将这些要求转译为资料处理的指令并交由中央处理器（CPU）及电脑中其他电子组件进行处理 <br> <a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E5%AD%90%E8%A8%88%E7%AE%97%E6%A9%9F" target="_blank" rel="noreferrer">计算机</a>集群（computer cluster）是一组松散或紧密连接在一起工作的计算机 <br> 分布式系统（Distributed system）是一组<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E5%AD%90%E8%A8%88%E7%AE%97%E6%A9%9F" target="_blank" rel="noreferrer">电脑</a>，透过网络相互连接传递消息与通信后并协调它们的行为而形成的系统。</p><h2 id="进程-线程" tabindex="-1">进程 线程 <a class="header-anchor" href="#进程-线程" aria-hidden="true">#</a></h2><p><strong>进程（process）</strong> 程序的基本执行实体</p><ul><li>整批系统环境，进程称为工作（jobs）。</li><li>分时系统环境，进程称为用户程序（user progams）或任务（tasks）。</li></ul><p><strong>状态（state）</strong></p><ul><li>新生（new）</li><li>运行（running）</li><li>等待（waiting）：亦称“阻塞”（blocked）</li><li>就绪（ready）：排班中，等待CPU。</li><li>结束（terminated）：完成运行。</li></ul><p><strong>进程间通信的方式</strong></p><ul><li>Inter-Process Communication进程间传递信号或者数据</li><li>管道（pipe） 效率较低</li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 匿名管道 - 传输数据是单向的，只能用于存在父子关系的进程间通信</span></span>
<span class="line"><span style="color:#ABB2BF;">ps </span><span style="color:#98C379;">auxf</span><span style="color:#ABB2BF;"> | grep </span><span style="color:#98C379;">mysql</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 有名管道</span></span>
<span class="line"><span style="color:#56B6C2;">echo</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;"> &gt; </span><span style="color:#98C379;">myPipe</span></span>
<span class="line"><span style="color:#ABB2BF;">cat &lt; </span><span style="color:#98C379;">myPipe</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>信号（Signal）：异步通信机制 如用户使用ctrl+c产生SIGINT程序终止信号</li><li>消息队列（Message）：kafka等 保存在内核中的消息链表 通信不及时，并且有大小限制</li><li>共享内存（share memory）：不常用，不适用于并发</li><li>信号量（Semaphore）：不常用 <ul><li>P 操作，这个操作会把信号量减去 -1，相减后如果信号量 &lt; 0，则表明资源已被占用，进程需阻塞等待；相减后如果信号量 &gt;= 0，则表明还有资源可使用，进程可正常继续执行。</li><li>V 操作，这个操作会把信号量加上 1，相加后如果信号量 &lt;= 0，则表明当前有阻塞中的进程，于是会将该进程唤醒运行；相加后如果信号量 &gt; 0，则表明当前没有阻塞中的进程；</li></ul></li><li>套接字（socket）：常用，跨网络与不同主机上的进程之间通信，如web应用</li></ul><p>**线程（thread）**是<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F" target="_blank" rel="noreferrer">操作系统</a>能够进行运算调度的最小单位，进程中的实际运作单位 <br> 基本状态</p><ul><li>产生（spawn）</li><li>阻塞（block）</li><li>非阻塞（unblock）</li><li>结束（finish）</li></ul><p>线程同步的方式</p><ul><li>互斥量（锁）：通过互斥机制防止多个线程同时访问公共资源（获得锁之后才能操作）。</li><li>信号量（Semphare）：控制同一个时刻多个线程访问同一个资源的线程数。</li><li>事件（信号）：通过通知的方式保持多个线程同步。</li></ul><p><a href="http://www.chengxuchu.com/#/%E9%9D%A2%E8%AF%95%E5%9F%BA%E5%9C%B0/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F?id=110-%e8%bf%9b%e7%a8%8b%e8%b0%83%e5%ba%a6%e7%9a%84%e5%87%86%e5%88%99" target="_blank" rel="noreferrer">进程调度的准则</a></p><ul><li>CPU利用率：如何调度可以使CPU的利用率达到最大</li><li>系统吞吐率：系统吞吐量表示单位时间内CPU完成作业的数量</li><li>响应时间：调度策略要尽量保证响应时间在用户接受的范围内</li><li>周转时间：周转时间是作业从开始到完成的所需的时间，尽量使这个时间较小。</li></ul><p>概念</p><ul><li>并发：一个时间段内，x个程序在同一个cpu运行，就可以描述为x并发。</li><li>并行：在任意时刻点上，有多个程序同时运行在多个cpu上。并行数量和cpu数量一致。</li><li>同步：指代码调用IO操作时，必须等待IO操作完成才返回的调用方式。</li><li>异步：指代码调用IO操作时，不必等IO操作完成就返回的调用方式。</li><li>阻塞：指调用函数的时候当前线程被挂起。</li><li>非阻塞：指调用函数的时候当前线程不会被挂起，会立即返回。</li></ul><h2 id="内存管理机制" tabindex="-1">内存管理机制 <a class="header-anchor" href="#内存管理机制" aria-hidden="true">#</a></h2><p>分页机制</p><ul><li>程序的逻辑地址划分为固定大小的页（Page）。</li><li>物理地址划分为同样大小的帧（Frame）。</li><li>通过页表对应逻辑地址和物理地址。</li></ul><p>分段机制</p><ul><li>分段是为了满足代码的一些逻辑需求。例如防止栈区和堆区互相影响。</li><li>把一段数据共享、数据保护、动态链接等。</li><li>通过段表实现逻辑地址和物理地址的映射关系。</li><li>每个段内部是连续内存分配，段和段之间是离散分配的。</li><li>通过段号、段长和起始地址。</li></ul><p>虚拟内存</p><ul><li>将内存中暂时不需要的内容放到硬盘上。</li><li>局部性原理，程序运行的时候只有部分必要信息装入内存。</li><li>系统提供了比实际内存大得多的容量，称之为虚拟内存。</li></ul><p><strong>CLI</strong>(comand-Line Interface，命令行界面） <br> GUI (Graphical User Interface ，图形用户界面) 采用图形方式显示的<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA" target="_blank" rel="noreferrer">计算机</a>操作用户界面。 <br> SDK（Software Development Kit，<strong>软件开发工具包</strong>）一般是一些被软件工程师用于为特定的<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%8C%85" target="_blank" rel="noreferrer">软件包</a>、软件框架、硬件平台、操作系统等创建应用软件的开发工具的集合。 <br> API (Application Programming Interface，应用程序编程接口) <br> 一种<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97" target="_blank" rel="noreferrer">计算</a>接口，它定义多个软件中介之间的交互，以及可以进行的调用（call）或请求（request）的种类，如何进行调用或发出请求，应使用的数据格式，应遵循的惯例等。</p>`,30),n=[s];function t(p,o,c,u,h,g){return i(),l("div",null,n)}const E=e(r,[["render",t]]);export{B as __pageData,E as default};
